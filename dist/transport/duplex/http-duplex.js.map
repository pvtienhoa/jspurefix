{"version":3,"file":"http-duplex.js","sourceRoot":"","sources":["../../../src/transport/duplex/http-duplex.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAwC;AAGxC,kDAAiD;AAEjD,MAAa,UAAW,SAAQ,sBAAS;IACvC,YAAoC,OAAqB;QACvD,KAAK,EAAE,CAAA;QAD2B,YAAO,GAAP,OAAO,CAAc;QAEvD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,YAAY,EAAE,CAAA;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;IACrC,CAAC;IAEO,MAAM,CAAC,YAAY;QACzB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,MAAM,MAAM,GAAG;YACb,IAAI,EAAG,GAAG,EAAE;YAEZ,CAAC;SACF,CAAA;QACD,OAAO,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC;IAEO,YAAY;QAClB,MAAM,OAAO,GAAa,IAAI,CAAC,QAAQ,CAAA;QACvC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,CAAO,IAAY,EAAE,CAAM,EAAE,IAAc,EAAE,EAAE;gBACpD,IAAI;oBACF,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;oBAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBACxC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,OAAY,EAAE,EAAE;wBAC5C,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;wBACxC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;wBAClB,IAAI,EAAE,CAAA;oBACR,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;wBACtB,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;iBACH;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,CAAC,CAAA;iBACR;YACH,CAAC,CAAA;SACF,CAAA;QACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;QACrC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;CACF;AA5CD,gCA4CC","sourcesContent":["import { FixDuplex } from './fix-duplex'\r\nimport { Readable, Writable } from 'stream'\r\nimport { IHttpAdapter } from '../session-description'\r\nimport * as requestPromise from 'request-promise'\r\n\r\nexport class HttpDuplex extends FixDuplex {\r\n  public constructor (public readonly adapter: IHttpAdapter) {\r\n    super()\r\n    this.readable = HttpDuplex.makeReadable()\r\n    this.writable = this.makeWritable()\r\n  }\r\n\r\n  private static makeReadable (): Readable {\r\n    const Readable = require('stream').Readable\r\n    const reader = {\r\n      read:  () => {\r\n        // nothing\r\n      }\r\n    }\r\n    return new Readable(reader)\r\n  }\r\n\r\n  private makeWritable (): Writable {\r\n    const forward: Readable = this.readable\r\n    const Writable = require('stream').Writable\r\n    const writer = {\r\n      write: async (data: Buffer, _: any, done: Function) => {\r\n        try {\r\n          const adapter = this.adapter\r\n          const options = adapter.getOptions(data)\r\n          requestPromise(options).then((message: any) => {\r\n            const body = adapter.endMessage(message)\r\n            forward.push(body)\r\n            done()\r\n          }).catch((err: Error) => {\r\n            receiver.emit('error', err)\r\n          })\r\n        } catch (e) {\r\n          done(e)\r\n        }\r\n      }\r\n    }\r\n    const receiver = new Writable(writer)\r\n    return receiver\r\n  }\r\n\r\n  public end (): void {\r\n    this.readable.push(null)\r\n  }\r\n}\r\n"]}