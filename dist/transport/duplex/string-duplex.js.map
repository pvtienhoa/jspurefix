{"version":3,"file":"string-duplex.js","sourceRoot":"","sources":["../../../src/transport/duplex/string-duplex.ts"],"names":[],"mappings":";;AAAA,6CAAwC;AAGxC,MAAa,YAAa,SAAQ,sBAAS;IAEzC,YAA6B,OAAe,EAAE,EAAS,SAAkB,KAAK;QAC5E,KAAK,EAAE,CAAA;QADoB,SAAI,GAAJ,IAAI,CAAa;QAAS,WAAM,GAAN,MAAM,CAAiB;QAE5E,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QACvD,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,YAAY,EAAE,CAAA;IAC7C,CAAC;IAEO,MAAM,CAAC,YAAY,CAAE,IAAY,EAAE,MAAe;QACxD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,IAAI,KAAK,GAAW,CAAC,CAAA;QACrB,MAAM,MAAM,GAAG;YACb,IAAI,EAAG,CAAC,IAAY,EAAE,EAAE;gBACtB,KAAK,IAAI,IAAI,CAAA;gBACb,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;oBAC1C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBACpB;YACH,CAAC;SACF,CAAA;QACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;QACrC,IAAI,CAAC,MAAM,EAAE;YACX,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACpB;aAAM;YAEL,YAAY,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;SAC9C;QAED,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEO,MAAM,CAAC,YAAY;QACzB,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAA;QAC3C,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,CAAC,IAAY,EAAE,CAAM,EAAE,IAAc,EAAE,EAAE;gBAC9C,IAAI;oBACF,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;oBAC3B,IAAI,EAAE,CAAA;iBACP;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,CAAC,CAAA;iBACR;YACH,CAAC;SACF,CAAA;QACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;QACrC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAE,IAAY,EAAE,QAAkB;QAE/D,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAI,SAAS,GAAG,CAAC,CAAA;QACjB,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAA;QAC3B,OAAO,SAAS,GAAG,CAAC,EAAE;YACpB,SAAS,EAAE,CAAA;YACX,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,GAAG,EAAE,CAAC,CAAA;YAC/C,SAAS,IAAI,KAAK,CAAA;YAClB,MAAM,GAAG,GAAG,KAAK,GAAG,KAAK,CAAA;YACzB,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;YACpC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,KAAK,GAAG,GAAG,CAAA;SACZ;IACH,CAAC;IAEM,GAAG;QACR,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACzB;IACH,CAAC;CACF;AAnED,oCAmEC","sourcesContent":["import { FixDuplex } from './fix-duplex'\r\nimport { Readable, Writable } from 'stream'\r\n\r\nexport class StringDuplex extends FixDuplex {\r\n\r\n  constructor (public readonly text: string = '', public chunks: boolean = false) {\r\n    super()\r\n    this.readable = StringDuplex.makeReadable(text, chunks)\r\n    this.writable = StringDuplex.makeWritable()\r\n  }\r\n\r\n  private static makeReadable (text: string, chunks: boolean): Readable {\r\n    const Readable = require('stream').Readable\r\n    let total: number = 0\r\n    const reader = {\r\n      read:  (size: number) => {\r\n        total += size\r\n        if (text.length > 0 && total > text.length) {\r\n          readable.push(null)\r\n        }\r\n      }\r\n    }\r\n    const readable = new Readable(reader)\r\n    if (!chunks) {\r\n      readable.push(text)\r\n    } else {\r\n      // simulate a set of chunks sent to parser\r\n      StringDuplex.sendReaderChunks(text, readable)\r\n    }\r\n\r\n    return readable\r\n  }\r\n\r\n  private static makeWritable (): Writable {\r\n    const Writable = require('stream').Writable\r\n    const writer = {\r\n      write: (data: Buffer, _: any, done: Function) => {\r\n        try {\r\n          receiver.emit('data', data)\r\n          done()\r\n        } catch (e) {\r\n          done(e)\r\n        }\r\n      }\r\n    }\r\n    const receiver = new Writable(writer)\r\n    return receiver\r\n  }\r\n\r\n  private static sendReaderChunks (text: string, readable: Readable) {\r\n    // simulate a set of chunks sent to parser\r\n    let start = 0\r\n    let iteration = 0\r\n    let remaining = text.length\r\n    while (remaining > 0) {\r\n      iteration++\r\n      let chunk = Math.min(remaining, iteration % 10)\r\n      remaining -= chunk\r\n      const end = start + chunk\r\n      let snippet = text.slice(start, end)\r\n      readable.push(snippet)\r\n      start = end\r\n    }\r\n  }\r\n\r\n  public end (): void {\r\n    if (this.text.length === 0) {\r\n      this.readable.push(null)\r\n    }\r\n  }\r\n}\r\n"]}