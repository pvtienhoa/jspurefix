{"version":3,"file":"ascii-session.js","sourceRoot":"","sources":["../../../src/transport/ascii/ascii-session.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgView, SegmentType } from '../../buffer'\r\nimport { MsgType, MsgTag, SessionRejectReason } from '../../types/enum'\r\nimport { IJsFixConfig } from '../../config'\r\nimport { IMsgApplication } from '../session-description'\r\nimport { SessionState, TickAction } from '../fix-session-state'\r\nimport { FixSession } from '../fix-session'\r\n\r\nexport abstract class AsciiSession extends FixSession {\r\n\r\n  public heartbeat: boolean = true\r\n\r\n  protected constructor (public readonly config: IJsFixConfig) {\r\n    super(config)\r\n    this.requestLogoutType = this.respondLogoutType = MsgType.Logout\r\n    this.requestLogonType = MsgType.Logon\r\n  }\r\n\r\n  public static asPiped (txt: string) {\r\n    return txt.replace(/\\x01/g,'|')\r\n  }\r\n\r\n  private checkSeqNo (msgType: string, view: MsgView): boolean {\r\n\r\n    switch (msgType) {\r\n      case MsgType.TestRequest:\r\n      case MsgType.SequenceReset:\r\n      case MsgType.ResendRequest: {\r\n        return true\r\n      }\r\n\r\n      default: {\r\n        const state = this.sessionState\r\n        const lastSeq: number = state.lastPeerMsgSeqNum\r\n        const seqNo: number = view.getTyped(MsgTag.MsgSeqNum)\r\n        let ret: boolean = false\r\n        const seqDelta: number = seqNo - lastSeq\r\n        if (seqDelta <= 0) {\r\n          // serious problem ... drop immediately\r\n          this.sessionLogger.warning(`terminate as seqDelta (${seqDelta}) < 0 lastSeq = ${lastSeq} seqNo = ${seqNo}`)\r\n          this.stop()\r\n        } else if (seqDelta > 1) {\r\n          // reset required as have missed messages.\r\n          const resend = this.config.factory.resendRequest(lastSeq, seqNo)\r\n          this.sessionLogger.warning(`sending resend last received ${lastSeq} seqNo ${seqNo}`)\r\n          this.send(MsgType.ResendRequest, resend)\r\n        } else {\r\n          ret = true\r\n          state.lastPeerMsgSeqNum = seqNo\r\n        }\r\n        return ret\r\n      }\r\n    }\r\n  }\r\n\r\n  private sendReject (msgType: string, seqNo: number, msg: string, reason: number): void {\r\n    const factory = this.config.factory\r\n    const reject = factory.reject(msgType, seqNo, msg, reason)\r\n    this.sessionLogger.warning(`rejecting with ${JSON.stringify(reject)}`)\r\n    this.send(MsgType.Reject, reject)\r\n  }\r\n\r\n  private checkIntegrity (msgType: string, view: MsgView): boolean {\r\n    const state = this.sessionState\r\n    const seqNum = view.getTyped(MsgTag.MsgSeqNum)\r\n\r\n    const received: number = parseInt(view.getString(MsgTag.CheckSum), 10)\r\n    const computed = view.checksum()\r\n    if (received !== computed) {\r\n      const msg: string = `msgType ${msgType} checksum failed. received = ${received} computed = ${computed}`\r\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.ValueIsIncorrect)\r\n      return false\r\n    }\r\n\r\n    if (view.segment.type === SegmentType.Unknown) {\r\n      const msg: string = `msgType ${msgType} unknown`\r\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.InvalidMsgType)\r\n      return false\r\n    }\r\n\r\n    const invalid = view.invalid()\r\n    if (invalid.length > 0) {\r\n      const msg: string = `msgType ${msgType} invalid tag${invalid.length > 1 ? 's' : ''} ${invalid.join(', ')}`\r\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.InvalidTagNumber)\r\n      return false\r\n    }\r\n\r\n    const undefinedMsg: string = view.undefinedForMsg()\r\n    if (undefinedMsg) {\r\n      const msg: string = `msgType ${msgType} ${undefinedMsg}`\r\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.TagNotDefinedForThisMessageType)\r\n      return false\r\n    }\r\n\r\n    const missingRequired = view.missing()\r\n    if (missingRequired.length > 0) {\r\n      const msg: string = `msgType ${msgType} missing required tag${missingRequired.length > 1 ? 's' : ''} ${missingRequired.join(', ')}`\r\n      this.sendReject(msgType, seqNum, msg, SessionRejectReason.RequiredTagMissing)\r\n      return false\r\n    }\r\n\r\n    switch (state.state) {\r\n      case SessionState.PeerLoggedOn: {\r\n        const targetCompId = view.getString(MsgTag.TargetCompID)\r\n        if (targetCompId !== state.compId) {\r\n          const msg: string = `msgType ${msgType} unexpected TargetCompID ${targetCompId}`\r\n          this.sendReject(msgType, seqNum, msg, SessionRejectReason.CompIDProblem)\r\n          return false\r\n        }\r\n\r\n        const peerCompId = view.getString(MsgTag.SenderCompID)\r\n        if (peerCompId !== state.peerCompId) {\r\n          const msg: string = `msgType ${msgType} unexpected SenderCompID ${peerCompId}`\r\n          this.sendReject(msgType, seqNum, msg, SessionRejectReason.CompIDProblem)\r\n          return false\r\n        }\r\n      }\r\n        break\r\n\r\n      default: {\r\n        break\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  private onSessionMsg (msgType: string, view: MsgView): void {\r\n\r\n    const factory = this.config.factory\r\n    const logger = this.sessionLogger\r\n\r\n    switch (msgType) {\r\n      case MsgType.Logon: {\r\n        this.peerLogon(view)\r\n        break\r\n      }\r\n\r\n      case MsgType.Logout: {\r\n        this.peerLogout(view)\r\n        break\r\n      }\r\n\r\n      case MsgType.TestRequest: {\r\n        const req: string = view.getString(MsgTag.TestReqID)\r\n        this.send(MsgType.Heartbeat, factory.heartbeat(req))\r\n        break\r\n      }\r\n\r\n      case MsgType.Heartbeat: {\r\n        this.sessionState.lastTestRequestAt = null\r\n        break\r\n      }\r\n\r\n      case MsgType.ResendRequest: {\r\n        logger.info(`peer sends '${msgType}' resend reset.`)\r\n        const endSeqNo: number = view.getTyped(MsgTag.EndSeqNo)\r\n        const resend = factory.sequenceReset(endSeqNo)\r\n        this.send(MsgType.SequenceReset, resend)\r\n        break\r\n      }\r\n\r\n      case MsgType.SequenceReset: {\r\n        const newSeqNo: number = view.getTyped(MsgTag.NewSeqNo)\r\n        logger.info(`peer sends '${msgType}' sequence reset. newSeqNo = ${newSeqNo}`)\r\n        this.sessionState.lastPeerMsgSeqNum = newSeqNo\r\n        break\r\n      }\r\n\r\n      case MsgType.Reject: {\r\n        logger.info(`peer rejects type '${msgType}' with text '${view.getTyped(MsgTag.Text)}'`)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onMsg (msgType: string, view: MsgView): void {\r\n\r\n    if (!this.checkSeqNo(msgType, view)) {\r\n      this.sessionLogger.debug(`message '${msgType}' failed checkSeqNo.`)\r\n      return\r\n    }\r\n\r\n    if (this.checkMsgIntegrity && !this.checkIntegrity(msgType, view)) {\r\n      this.sessionLogger.debug(`message '${msgType}' failed checkIntegrity.`)\r\n      switch (msgType) {\r\n        case MsgType.Logon: {\r\n          this.sessionState.state = SessionState.PeerLogonRejected\r\n          this.timer = setInterval(() => {\r\n            this.tick()\r\n          }, 200)\r\n          break\r\n        }\r\n      }\r\n      return\r\n    }\r\n\r\n    switch (msgType) {\r\n      case MsgType.Logon:\r\n      case MsgType.Logout:\r\n      case MsgType.TestRequest:\r\n      case MsgType.Reject:\r\n      case MsgType.SequenceReset:\r\n      case MsgType.Heartbeat:\r\n      case MsgType.ResendRequest: {\r\n        this.onSessionMsg(msgType, view)\r\n        break\r\n      }\r\n\r\n      default: {\r\n        this.checkForwardMsg(msgType, view)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  private peerLogon (view: MsgView) {\r\n    const logger = this.sessionLogger\r\n    const heartBtInt = view.getTyped(MsgTag.HeartBtInt)\r\n    const peerCompId = view.getTyped(MsgTag.SenderCompID)\r\n    const userName = view.getString(MsgTag.Username)\r\n    logger.info(`peerLogon Username = ${userName}, heartBtInt = ${heartBtInt}, peerCompId = ${peerCompId}, userName = ${userName}`)\r\n    const state = this.sessionState\r\n    state.state = SessionState.PeerLoggedOn\r\n    state.peerHeartBeatSecs = view.getTyped(MsgTag.HeartBtInt)\r\n    state.peerCompId = view.getTyped(MsgTag.SenderCompID)\r\n    if (this.acceptor) {\r\n      this.send(MsgType.Logon, this.config.factory.logon())\r\n    }\r\n    if (this.heartbeat) {\r\n      logger.debug(`start heartbeat timer.`)\r\n      this.timer = setInterval(() => {\r\n        this.tick()\r\n      }, 200)\r\n    }\r\n    logger.info(`system ready, inform app`)\r\n    this.onReady(view)\r\n  }\r\n\r\n  private tick (): void {\r\n    const sessionState = this.sessionState\r\n    const action: TickAction = sessionState.calcAction(new Date())\r\n    const application: IMsgApplication = this.transport.config.description.application\r\n    const factory = this.config.factory\r\n    const logger = this.sessionLogger\r\n\r\n    switch (action) {\r\n      case TickAction.Nothing: {\r\n        // all is well\r\n        break\r\n      }\r\n\r\n      case TickAction.TestRequest: {\r\n        logger.debug(`send test req. state = ${sessionState.toString()}`)\r\n        this.send(MsgType.TestRequest, factory.testRequest())\r\n        break\r\n      }\r\n\r\n      case TickAction.Heartbeat: {\r\n        logger.debug(`send heartbeat. state = ${sessionState.toString()}`)\r\n        this.send(MsgType.Heartbeat, factory.heartbeat(sessionState.now.toUTCString()))\r\n        break\r\n      }\r\n\r\n      case TickAction.TerminateOnError: {\r\n        logger.info(sessionState.toString())\r\n        this.terminate(new Error(`${application.name}: peer not responding`))\r\n        break\r\n      }\r\n\r\n      case TickAction.Stop: {\r\n        logger.info(sessionState.toString())\r\n        logger.info('stopping')\r\n        this.stop()\r\n        break\r\n      }\r\n\r\n      default:\r\n        throw new Error(`unexpected action`)\r\n    }\r\n  }\r\n}\r\n"]}