{"version":3,"file":"tcp-initiator.js","sourceRoot":"","sources":["../../../src/transport/tcp/tcp-initiator.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITcpTransportDescription } from '../session-description'\r\nimport { FixInitiator } from '../fix-initiator'\r\nimport { MsgTransport } from '../msg-transport'\r\n\r\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\r\nimport { TcpDuplex, FixDuplex } from '../duplex'\r\n\r\nimport * as util from 'util'\r\nimport * as net from 'net'\r\n\r\nexport enum InitiatorState {\r\n  Idle = 1,\r\n  Connecting = 2,\r\n  Connected = 3,\r\n  Stopped = 4\r\n}\r\n\r\nexport class TcpInitiator extends FixInitiator {\r\n  public tcp: ITcpTransportDescription\r\n  public state: InitiatorState = InitiatorState.Idle\r\n  private readonly logger: IJsFixLogger\r\n  private duplex: FixDuplex\r\n\r\n  constructor (public readonly jsFixConfig: IJsFixConfig) {\r\n    super(jsFixConfig.description.application)\r\n    this.logger = jsFixConfig.logFactory.logger(`${this.application.name}:TcpInitiator`)\r\n    if (!this.application) {\r\n      const e: Error = new Error(`no application in session description.`)\r\n      this.logger.error(e)\r\n      throw e\r\n    }\r\n    this.tcp = this.application.tcp\r\n    if (!this.tcp) {\r\n      const e = new Error(`no tcp in session description need tcp { host: hostname, port: port }`)\r\n      this.logger.error(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  public end (): void {\r\n    switch (this.state) {\r\n      case InitiatorState.Connected: {\r\n        this.logger.info('end')\r\n        this.duplex.end()\r\n        this.state = InitiatorState.Stopped\r\n        break\r\n      }\r\n\r\n      default: {\r\n        this.logger.info(`end :state ${this.state}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  public connect (timeoutSeconds: number): Promise<MsgTransport> {\r\n    return new Promise<MsgTransport>(async (resolve, reject) => {\r\n      switch (this.state) {\r\n        case InitiatorState.Idle: {\r\n          this.state = InitiatorState.Connecting\r\n          this.logger.info(`connecting with timeout ${timeoutSeconds}`)\r\n          this.tryConnect().then((t: MsgTransport) => resolve(t)).catch((e: Error) => {\r\n            this.logger.error(e)\r\n            this.repeatConnect(timeoutSeconds).then((t: MsgTransport) => resolve(t)).catch((e: Error) => reject(e))\r\n          })\r\n          break\r\n        }\r\n\r\n        default:\r\n          const e: Error = new Error(`connect not valid from non idle state`)\r\n          this.logger.warning(`rejecting from state ${this.state}`)\r\n          reject(e)\r\n      }\r\n    })\r\n  }\r\n\r\n  private tryConnect (): Promise<MsgTransport> {\r\n    return new Promise<MsgTransport>((resolve, reject) => {\r\n      const tcp = this.tcp\r\n      this.logger.info(`tryConnect ${tcp.host}:${tcp.port}`)\r\n      const socket = net.createConnection(tcp, () => {\r\n        this.logger.info(`net.createConnection cb, resolving`)\r\n        this.duplex = new TcpDuplex(socket)\r\n        resolve(new MsgTransport(0, this.jsFixConfig, this.duplex))\r\n      })\r\n      socket.on('error', (e) => {\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n\r\n  private repeatConnect (timeoutSeconds: number): Promise<MsgTransport> {\r\n    return new Promise<MsgTransport>(async (resolve, reject) => {\r\n      const application = this.application\r\n      const promisify = util.promisify\r\n      const timeoutPromise = promisify(setTimeout)\r\n      let retries = 0\r\n      let timer = setInterval(() => {\r\n        ++retries\r\n        this.tryConnect().then((t: MsgTransport) => {\r\n          this.state = InitiatorState.Connected\r\n          clearInterval(timer)\r\n          resolve(t)\r\n        }).catch((e: Error) => {\r\n          this.logger.info(`${application.name}: retries ${retries} ${e.message}`)\r\n        })\r\n      }, application.reconnectSeconds * 1000)\r\n      timeoutPromise(timeoutSeconds * 1000).then(() => {\r\n        clearInterval(timer)\r\n        this.state = InitiatorState.Stopped\r\n        const e = new Error(`${application.name}: timeout of ${timeoutSeconds} whilst connecting`)\r\n        this.logger.warning(`repeatConnect reject with message ${e.message}`)\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}