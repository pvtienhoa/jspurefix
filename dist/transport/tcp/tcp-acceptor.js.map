{"version":3,"file":"tcp-acceptor.js","sourceRoot":"","sources":["../../../src/transport/tcp/tcp-acceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as net from 'net'\r\nimport { TcpDuplex } from '../duplex'\r\nimport { MsgTransport } from '../msg-transport'\r\nimport { FixAcceptor } from '../fix-acceptor'\r\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\r\n\r\nexport class TcpAcceptor extends FixAcceptor {\r\n  private server: net.Server\r\n  private logger: IJsFixLogger\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    super(config.description.application)\r\n    this.logger = config.logFactory.logger(`${config.description.application.name}:TcpAcceptor`)\r\n    let nextId: number = 0\r\n    this.logger.info('creating server')\r\n    this.server = net.createServer((socket: net.Socket) => {\r\n      socket.setNoDelay(true)\r\n      const id: number = nextId++\r\n      const transport: MsgTransport = new MsgTransport(id, config, new TcpDuplex(socket))\r\n      this.saveTransport(id, transport)\r\n      transport.receiver.on('end', () => {\r\n        this.harvestTransport(id)\r\n      })\r\n      transport.receiver.on('error', (e: Error) => {\r\n        this.logger.error(e)\r\n        this.harvestTransport(id)\r\n      })\r\n    })\r\n    this.server.on('error', ((err: Error) => {\r\n      throw err\r\n    }))\r\n  }\r\n\r\n  public listen (): void {\r\n    const port = this.config.description.application.tcp.port\r\n    this.logger.info(`start to listen ${port}`)\r\n    this.server.listen(port)\r\n  }\r\n\r\n  public close (cb: Function): void {\r\n    const port = this.config.description.application.tcp.port\r\n    this.logger.info(`close listener on port ${port}`)\r\n    this.server.close(cb)\r\n  }\r\n\r\n  private saveTransport (tid: number, transport: MsgTransport) {\r\n    this.transports[tid] = transport\r\n    const keys: string[] = Object.keys(this.transports)\r\n    this.logger.info(`new transport id = ${tid} created total transports = ${keys.length}`)\r\n    this.emit('transport', transport)\r\n  }\r\n\r\n  private harvestTransport (tid: number) {\r\n    delete this.transports[tid]\r\n    const keys: string[] = Object.keys(this.transports)\r\n    this.logger.info(`transport ${tid} ends total transports = ${keys.length}`)\r\n  }\r\n}\r\n"]}