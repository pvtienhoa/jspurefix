{"version":3,"file":"initiator.js","sourceRoot":"","sources":["../../../src/transport/tcp/initiator.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,mDAA8C;AAK9C,SAAgB,SAAS,CAAE,MAAoB,EAAE,cAA8B,EAAE,mBAA2B,CAAC;IAC3G,OAAO,IAAI,OAAO,CAAM,CAAO,MAAM,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACpD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC7B,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAA;QAC/C,IAAI,UAAU,GAAY,IAAI,CAAA;QAC9B,OAAO,UAAU,EAAE;YACjB,IAAI;gBACF,MAAM,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAA;gBACpC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;gBAChC,UAAU,GAAG,KAAK,CAAA;gBAClB,MAAM,EAAE,CAAA;aACT;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,gBAAgB,EAAE;oBACrB,MAAM,CAAC,CAAC,CAAC,CAAA;iBACV;qBAAM;oBACL,MAAM,CAAC,IAAI,CAAC,WAAW,gBAAgB,+BAA+B,CAAC,CAAA;oBACvE,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAA;iBAC9B;aACF;SACF;IACH,CAAC,CAAA,CAAC,CAAA;AACJ,CAAC;AAtBD,8BAsBC;AAED,SAAS,KAAK,CAAE,CAAS;IACvB,OAAO,IAAI,OAAO,CAAM,CAAC,MAAM,EAAE,EAAE;QACjC,IAAI,CAAC,CAAC,EAAE;YACN,MAAM,EAAE,CAAA;SACT;QACD,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,EAAE,CAAA;QACV,CAAC,EAAE,CAAC,CAAC,CAAA;IACP,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,IAAI,CAAE,MAAoB,EAAE,gBAA4B;IAC/D,OAAO,IAAI,OAAO,CAAM,CAAO,MAAM,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACpD,MAAM,SAAS,GAAiB,IAAI,4BAAY,CAAC,MAAM,CAAC,CAAA;QACxD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC7B,MAAM,kBAAkB,GAAiB,MAAM,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACpE,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;QACzC,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACnB,MAAM,EAAE,CAAA;QACV,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;YACpB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YACf,MAAM,CAAC,CAAC,CAAC,CAAA;QACX,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import { IJsFixConfig } from '../../config'\r\nimport { FixInitiator } from '../fix-initiator'\r\nimport { TcpInitiator } from './tcp-initiator'\r\nimport { MsgTransport } from '../msg-transport'\r\nimport { MakeFixSession } from '../make-fixl-session'\r\nimport { FixSession } from '../fix-session'\r\n\r\nexport function initiator (config: IJsFixConfig, sessionFactory: MakeFixSession, reconnectTimeout: number = 0): Promise<any> {\r\n  return new Promise<any>(async (accept, reject) => {\r\n    const logger = config.logFactory.logger('initiator')\r\n    logger.info('create session')\r\n    const initiatorSession = sessionFactory(config)\r\n    let connecting: boolean = true\r\n    while (connecting) {\r\n      try {\r\n        await once(config, initiatorSession)\r\n        logger.info('session has ended')\r\n        connecting = false\r\n        accept()\r\n      } catch (e) {\r\n        if (!reconnectTimeout) {\r\n          reject(e)\r\n        } else {\r\n          logger.info(`waiting ${reconnectTimeout} to reconnect following error`)\r\n          await delay(reconnectTimeout)\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nfunction delay (p: number): Promise<any> {\r\n  return new Promise<any>((accept) => {\r\n    if (!p) {\r\n      accept()\r\n    }\r\n    setTimeout(() => {\r\n      accept()\r\n    }, p)\r\n  })\r\n}\r\n\r\nfunction once (config: IJsFixConfig, initiatorSession: FixSession): Promise<any> {\r\n  return new Promise<any>(async (accept, reject) => {\r\n    const logger = config.logFactory.logger('initiator')\r\n    const initiator: FixInitiator = new TcpInitiator(config)\r\n    logger.info('connecting ...')\r\n    const initiatorTransport: MsgTransport = await initiator.connect(22)\r\n    logger.info('... connected, run session')\r\n    initiatorSession.run(initiatorTransport).then(() => {\r\n      logger.info('ends')\r\n      accept()\r\n    }).catch((e: Error) => {\r\n      logger.error(e)\r\n      reject(e)\r\n    })\r\n  })\r\n}\r\n"]}