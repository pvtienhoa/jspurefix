{"version":3,"file":"msg-transport.js","sourceRoot":"","sources":["../../src/transport/msg-transport.ts"],"names":[],"mappings":";;AAAA,sCAA2E;AAC3E,mCAA6C;AAE7C,mCAA6C;AAI7C,MAAa,YAAY;IAIvB,YAA6B,EAAU,EACV,MAAoB,EACpB,MAAiB;QAFjB,OAAE,GAAF,EAAE,CAAQ;QACV,WAAM,GAAN,MAAM,CAAc;QACpB,WAAM,GAAN,MAAM,CAAW;QAE5C,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC5C;QACD,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAA;QACtC,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAA;QACtC,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAA;QACjD,QAAQ,QAAQ,EAAE;YAChB,KAAK,OAAO,CAAC,CAAC;gBAGZ,IAAI,CAAC,WAAW,GAAG,IAAI,2BAAmB,CAAC,MAAM,CAAC,CAAA;gBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAW,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,mBAAU,CAAC,IAAI,CAAC,CAAA;gBACzF,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,WAAW,GAAG,IAAI,2BAAmB,CAAC,MAAM,CAAC,CAAA;gBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAW,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAA;gBACxD,MAAK;aACN;YAED,OAAO,CAAC,CAAC;gBACP,MAAM,IAAI,KAAK,CAAC,6CAA6C,QAAQ,EAAE,CAAC,CAAA;aACzE;SACF;QAGD,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;SACpD;IACH,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;IACnB,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC3B,OAAO,EAAE,CAAA;YACX,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC9B,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBACjC,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AA1DD,oCA0DC","sourcesContent":["import { AsciiParser, FiXmlParser, MsgParser, AsciiChars } from '../buffer'\r\nimport { AsciiMsgTransmitter } from './ascii'\r\nimport { MsgTransmitter } from './msg-transmitter'\r\nimport { FixmlMsgTransmitter } from './fixml'\r\nimport { FixDuplex } from './duplex'\r\nimport { IJsFixConfig } from '../config'\r\n\r\nexport class MsgTransport {\r\n  public readonly transmitter: MsgTransmitter\r\n  public readonly receiver: MsgParser\r\n\r\n  constructor (public readonly id: number,\r\n               public readonly config: IJsFixConfig,\r\n               public readonly duplex: FixDuplex) {\r\n\r\n    const delimiter = config.delimiter\r\n    if (!delimiter) {\r\n      throw new Error(`no delimiter char given.`)\r\n    }\r\n    const description = config.description\r\n    const definitions = config.definitions\r\n    const protocol = description.application.protocol\r\n    switch (protocol) {\r\n      case 'ascii': {\r\n        // let parser replace delimiter with Pipe so fix log does not require\r\n        // expensive replace\r\n        this.transmitter = new AsciiMsgTransmitter(config)\r\n        this.receiver = new AsciiParser(definitions, duplex.readable, delimiter, AsciiChars.Pipe)\r\n        break\r\n      }\r\n\r\n      case 'fixml': {\r\n        this.transmitter = new FixmlMsgTransmitter(config)\r\n        this.receiver = new FiXmlParser(config, duplex.readable)\r\n        break\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`session Protocol must ascii or fixml. got ${protocol}`)\r\n      }\r\n    }\r\n\r\n    // pipe the encoder to say a socket.\r\n    if (duplex.writable) {\r\n      this.transmitter.encodeStream.pipe(duplex.writable)\r\n    }\r\n  }\r\n\r\n  public end (): void {\r\n    this.duplex.end()\r\n  }\r\n\r\n  public wait (): Promise<any> {\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.receiver.on('end', () => {\r\n        resolve()\r\n      })\r\n      this.receiver.on('error', (e) => {\r\n        reject(e)\r\n      })\r\n      this.transmitter.on('error', (e) => {\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}