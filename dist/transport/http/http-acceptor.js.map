{"version":3,"file":"http-acceptor.js","sourceRoot":"","sources":["../../../src/transport/http/http-acceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgTransport } from '../msg-transport'\r\nimport { FixAcceptor } from '../fix-acceptor'\r\nimport { IJsFixConfig, IJsFixLogger } from '../../config'\r\nimport { IFixmlRequest } from '../fixml'\r\nimport { StringDuplex, FixDuplex } from '../duplex'\r\nimport { Dictionary } from '../../collections'\r\n\r\nimport * as express from 'express'\r\nimport * as bodyParser from 'body-parser'\r\nimport * as http from 'http'\r\n\r\nexport class HttpAcceptor extends FixAcceptor {\r\n  private app: express.Express = express()\r\n  private server: http.Server\r\n  private readonly logger: IJsFixLogger\r\n  private readonly router: express.Router\r\n  private nextId: number = 0\r\n  private keys: Dictionary<MsgTransport> = new Dictionary()\r\n\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    super(config.description.application)\r\n    this.logger = config.logFactory.logger(`${config.description.application.name}:HttpAcceptor`)\r\n    this.logger.info('creating http server')\r\n    this.router = express.Router()\r\n    this.router.use(bodyParser.json())\r\n    this.subscribe()\r\n    this.app.use('/', this.router)\r\n  }\r\n\r\n  public listen (): void {\r\n    const app = this.config.description.application\r\n    const port = app.http.port\r\n    const logger = this.logger\r\n    logger.info(`start to listen ${port}`)\r\n    this.server = this.app.listen(port, () => {\r\n      logger.info(`app listening at http://localhost:${port}${app.http.uri}`)\r\n    })\r\n    this.server.on('error', ((err: Error) => {\r\n      logger.error(err)\r\n      this.emit('error', err)\r\n    }))\r\n  }\r\n\r\n  public close (cb: Function): void {\r\n    const app = this.config.description.application\r\n    const port = app.http.port\r\n    this.logger.info(`close listener on port ${port}`)\r\n    this.server.close(cb)\r\n  }\r\n\r\n  private saveTransport (tid: number, transport: MsgTransport): string {\r\n    const uuidv3 = require('uuid/v3')\r\n    this.transports[tid] = transport\r\n    const app = this.config.description.application\r\n    const keys: string[] = Object.keys(this.transports)\r\n    const a = uuidv3(app.http.uri, uuidv3.URL)\r\n    this.keys.addUpdate(a, transport)\r\n    this.logger.info(`new transport id = ${tid} token = ${a} created total transports = ${keys.length}`)\r\n    this.emit('transport', transport)\r\n    return a\r\n  }\r\n\r\n  private harvestTransport (token: string, tid: number): void {\r\n    delete this.transports[tid]\r\n    this.keys.remove(token)\r\n    const keys: string[] = Object.keys(this.transports)\r\n    this.logger.info(`transport ${tid} ends total transports = ${keys.length}`)\r\n  }\r\n\r\n  private respond (duplex: FixDuplex, res: express.Response, token: string = null): Promise<any> {\r\n    return new Promise<any>((accept, reject) => {\r\n      res.setHeader('Content-Type', 'application/json')\r\n      const timer = setTimeout(() => {\r\n        const businessReject = `<FIXML><BizMsgRej BizRejRsn=\"4\" Txt=\"no response from application\"/></FIXML>`\r\n        const b = Buffer.from(businessReject, 'utf-8')\r\n        duplex.writable.removeListener('data', transmit)\r\n        res.send(b)\r\n        reject(new Error('no response'))\r\n      }, 5000)\r\n\r\n      const transmit = (d: Buffer) => {\r\n        this.logger.info('responding to request')\r\n        clearTimeout(timer)\r\n        if (token) {\r\n          res.setHeader('authorization', token)\r\n        }\r\n        duplex.writable.removeListener('data', transmit)\r\n        res.send(d)\r\n        accept()\r\n      }\r\n\r\n      duplex.writable.on('data', transmit)\r\n    })\r\n  }\r\n\r\n  private async logon (req: express.Request, res: express.Response) {\r\n    const body: IFixmlRequest = req.body\r\n    const id = this.nextId++\r\n    this.logger.info(JSON.stringify(body, null,4))\r\n    // check hand back session key\r\n    const d = new StringDuplex()\r\n    const transport = new MsgTransport(id, this.config, d)\r\n    const token = this.saveTransport(id, transport)\r\n    this.respond(d, res, token).then(() => {\r\n      this.logger.info('responded to logon')\r\n    }).catch((e: Error) => {\r\n      this.logger.error(e)\r\n    })\r\n    d.readable.push(body.fixml)\r\n  }\r\n\r\n  private async logout (req: express.Request, res: express.Response) {\r\n    const headers = req.headers\r\n    const body: IFixmlRequest = req.body\r\n    const t: MsgTransport = this.keys.get(headers.authorization)\r\n    if (t) {\r\n      const token = req.headers.authorization\r\n      this.harvestTransport(token, t.id)\r\n      const d = t.duplex\r\n      this.respond(d, res, token).then(() => {\r\n        this.logger.info('responded to logout')\r\n        t.end()\r\n      }).catch((e: Error) => {\r\n        this.logger.error(e)\r\n      })\r\n      d.readable.push(body.fixml)\r\n    }\r\n  }\r\n\r\n  private subscribe (): void {\r\n    const router = this.router\r\n    const app = this.config.description.application\r\n    const root = app.http.uri\r\n    const authorise = `${root}authorise`\r\n    const query = `${root}query`\r\n    this.logger.info(`uri: authorise ${authorise}, query ${query}`)\r\n    router.post(authorise, (req: express.Request, res: express.Response) => {\r\n      if (!req.headers.authorization) {\r\n        this.logger.info('logon')\r\n        this.logon(req, res)\r\n      } else {\r\n        this.logger.info('logout')\r\n        this.logout(req, res)\r\n      }\r\n    })\r\n\r\n    router.get(query, async (req: express.Request, res: express.Response) => {\r\n      const headers = req.headers\r\n      const body: IFixmlRequest = req.body\r\n      const t: MsgTransport = this.keys.get(headers.authorization)\r\n      if (!t) {\r\n        this.logger.info(`received request with no token`)\r\n        res.send({\r\n          error: 'no key with query'\r\n        })\r\n      } else {\r\n        const d = t.duplex\r\n        this.respond(d, res).then(() => {\r\n          this.logger.info(`responded to ${req.url}`)\r\n        })\r\n        d.readable.push(body.fixml)\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}