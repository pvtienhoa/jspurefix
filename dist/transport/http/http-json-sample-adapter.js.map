{"version":3,"file":"http-json-sample-adapter.js","sourceRoot":"","sources":["../../../src/transport/http/http-json-sample-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsFixConfig, IJsFixLogger } from '../../config'\r\nimport { IHtmlOptions, IHtmlRoute, IHttpAdapter } from '../session-description'\r\nimport { HttpTransaction } from './http-transaction'\r\nimport { Dictionary } from '../../collections'\r\n\r\nexport class HttpJsonSampleAdapter implements IHttpAdapter {\r\n  private logger: IJsFixLogger\r\n  private queue: HttpTransaction[] = []\r\n  private token: string = null\r\n  private routes: Dictionary<IHtmlRoute> = new Dictionary()\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    this.logger = config.logFactory.logger('http.adapter')\r\n    const routes = this.routes\r\n    const options = config.description.application.http.options\r\n    if (!options) {\r\n      return\r\n    }\r\n    options.forEach((o: IHtmlRoute) => {\r\n      routes.addUpdate(o.name, o)\r\n    })\r\n    this.logger.info(`instance created routes ${routes.count()}`)\r\n  }\r\n\r\n  public getOptions (data: Buffer): IHtmlOptions {\r\n    const q = this.queue\r\n    if (q.length === 0) {\r\n      return null\r\n    }\r\n    const next: HttpTransaction = q.shift()\r\n    const options = next.options\r\n    options.body = {\r\n      fixml: data.toString()\r\n    }\r\n    this.logger.info(`${next.msgType}: ${next.options.method} ${next.options.uri} ${data.length}`)\r\n    return options\r\n  }\r\n\r\n  endMessage (m: any): Buffer {\r\n    // grab token if not yet received\r\n    if (!this.token) {\r\n      const headers = m.headers\r\n      this.token = headers.authorization\r\n      this.logger.info(`receive token ${this.token}`)\r\n    }\r\n    return m.body\r\n  }\r\n\r\n  beginMessage (msgType: string): void {\r\n    // build options based on type\r\n    const routes = this.routes\r\n    const route = routes.get(msgType) || routes.get('default')\r\n    const options = {\r\n      method: route.value.method,\r\n      uri: route.value.uri,\r\n      json: route.value.json,\r\n      resolveWithFullResponse: route.value.resolveWithFullResponse,\r\n      headers: route.value.headers\r\n    } as IHtmlOptions\r\n    const headers = options.headers\r\n    if (headers) {\r\n      if (this.token) {\r\n        headers.authorization = this.token\r\n      } else if (msgType === 'UserReq') {\r\n        delete headers.authorization\r\n      }\r\n    }\r\n    this.queue.push(new HttpTransaction(msgType, options))\r\n  }\r\n}\r\n"]}