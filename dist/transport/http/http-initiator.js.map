{"version":3,"file":"http-initiator.js","sourceRoot":"","sources":["../../../src/transport/http/http-initiator.ts"],"names":[],"mappings":";;;;;;;;;;AACA,oDAA+C;AAC/C,sCAAsC;AAItC,SAAgB,aAAa,CAAE,MAAoB,EAAE,cAA8B;IACjF,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAA;IAC/C,OAAO,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAA;AACvC,CAAC;AAHD,sCAGC;AAGD,SAAS,IAAI,CAAE,MAAoB,EAAE,gBAA4B;IAC/D,OAAO,IAAI,OAAO,CAAM,CAAO,MAAM,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACpD,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAA;QAC3D,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,CAAC,kEAAkE,CAAC,CAAA;SAC3E;QACD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC7B,MAAM,kBAAkB,GAAiB,IAAI,4BAAY,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,mBAAU,CAAC,OAAO,CAAC,CAAC,CAAA;QAC7F,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;QACzC,gBAAgB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACnB,MAAM,EAAE,CAAA;QACV,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;YACpB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YACf,MAAM,CAAC,CAAC,CAAC,CAAA;QACX,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import { IJsFixConfig } from '../../config'\r\nimport { MsgTransport } from '../msg-transport'\r\nimport { HttpDuplex } from '../duplex'\r\nimport { MakeFixSession } from '../make-fixl-session'\r\nimport { FixSession } from '../fix-session'\r\n\r\nexport function httpInitiator (config: IJsFixConfig, sessionFactory: MakeFixSession): Promise<any> {\r\n  const initiatorSession = sessionFactory(config)\r\n  return once(config, initiatorSession)\r\n}\r\n\r\n// the adapter will be provided on config\r\nfunction once (config: IJsFixConfig, initiatorSession: FixSession): Promise<any> {\r\n  return new Promise<any>(async (accept, reject) => {\r\n    const logger = config.logFactory.logger('initiator')\r\n    const adapter = config.description.application.http.adapter\r\n    if (!adapter) {\r\n      reject('http initiator needs config.description.application.http.adapter')\r\n    }\r\n    logger.info('connecting ...')\r\n    const initiatorTransport: MsgTransport = new MsgTransport(0, config, new HttpDuplex(adapter))\r\n    logger.info('... connected, run session')\r\n    initiatorSession.run(initiatorTransport).then(() => {\r\n      logger.info('ends')\r\n      accept()\r\n    }).catch((e: Error) => {\r\n      logger.error(e)\r\n      reject(e)\r\n    })\r\n  })\r\n}\r\n"]}