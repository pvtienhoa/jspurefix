{"version":3,"file":"msg-transmitter.js","sourceRoot":"","sources":["../../src/transport/msg-transmitter.ts"],"names":[],"mappings":";;AAAA,sCAAqD;AAErD,mCAAkC;AAClC,+CAA0C;AAG1C,iCAAgC;AAEhC,MAAsB,cAAe,SAAQ,MAAM,CAAC,YAAY;IAK9D,YAAuC,WAA2B,EAC3B,OAA4B;QACjE,KAAK,EAAE,CAAA;QAF8B,gBAAW,GAAX,WAAW,CAAgB;QAC3B,YAAO,GAAP,OAAO,CAAqB;QAJnD,WAAM,GAAkB,IAAI,sBAAa,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;QAMlE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;QACxC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;YACzC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;QACvB,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnB,CAAC,CAAC,CAAA;IACJ,CAAC;IAGM,IAAI,CAAE,OAAe,EAAE,GAAiB;QAC7C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,wBAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;IACvD,CAAC;IAOO,aAAa;QACnB,MAAM,WAAW,GAAG,IAAI,CAAA;QACxB,OAAO,IAAI,kBAAS,CAAC;YACnB,kBAAkB,EAAE,IAAI;YACxB,SAAS,CAAE,OAAmB,EAAE,QAAQ,EAAE,IAAc;gBACtD,IAAI;oBACF,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;oBAC/B,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;oBAC1B,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;oBAC/C,OAAO,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;oBAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1B,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBACrD,IAAI,EAAE,CAAA;iBACP;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,CAAC,CAAA;iBACR;YACH,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AA9CD,wCA8CC","sourcesContent":["import { MsgEncoder, ElasticBuffer } from '../buffer'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { Transform } from 'stream'\r\nimport { MsgPayload } from './msg-payload'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { ISessionDescription } from './session-description'\r\nimport * as events from 'events'\r\n\r\nexport abstract class MsgTransmitter extends events.EventEmitter {\r\n  public readonly encodeStream: Transform\r\n  public readonly buffer: ElasticBuffer = new ElasticBuffer(10 * 1024)\r\n  protected encoder: MsgEncoder\r\n\r\n  protected constructor (public readonly definitions: FixDefinitions,\r\n                         public readonly session: ISessionDescription) {\r\n    super()\r\n    this.encodeStream = this.encoderStream()\r\n    this.encodeStream.on('error', (e: Error) => {\r\n      this.emit('error', e)\r\n    })\r\n    this.encodeStream.on('done', () => {\r\n      this.emit('done')\r\n    })\r\n  }\r\n\r\n  // messages at front, byte stream at back\r\n  public send (msgType: string, obj: ILooseObject): void {\r\n    this.encodeStream.write(new MsgPayload(msgType, obj))\r\n  }\r\n\r\n  public abstract encodeMessage (msgType: string, obj: ILooseObject): void\r\n\r\n  // read fix messages from one side, encode buffers on other ready to pipe\r\n  // to output stream, say a socket\r\n\r\n  private encoderStream (): Transform {\r\n    const transmitter = this\r\n    return new Transform({\r\n      writableObjectMode: true,\r\n      transform (payload: MsgPayload, encoding, done: Function) {\r\n        try {\r\n          const msgType = payload.msgType\r\n          transmitter.buffer.reset()\r\n          transmitter.encodeMessage(msgType, payload.obj)\r\n          payload.encoded = transmitter.buffer.slice()\r\n          this.push(payload.encoded)\r\n          transmitter.emit('encoded', msgType, payload.encoded)\r\n          done()\r\n        } catch (e) {\r\n          done(e)\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}