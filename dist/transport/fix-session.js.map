{"version":3,"file":"fix-session.js","sourceRoot":"","sources":["../../src/transport/fix-session.ts"],"names":[],"mappings":"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","sourcesContent":["import { SegmentType, ElasticBuffer, MsgView } from '../buffer'\r\nimport { IJsFixConfig, IJsFixLogger } from '../config'\r\nimport { FixSessionState, SessionState } from './fix-session-state'\r\nimport { MsgTransport } from './msg-transport'\r\nimport { MsgTag } from '../types/enum'\r\nimport { ILooseObject } from '../collections/collection'\r\n\r\nimport * as events from 'events'\r\n\r\nexport abstract class FixSession {\r\n  public logReceivedMsgs: boolean = false\r\n  protected timer: NodeJS.Timer = null\r\n  protected transport: MsgTransport = null\r\n  public manageSession: boolean = true\r\n  public checkMsgIntegrity: boolean = false\r\n  protected readonly me: string\r\n  protected readonly initiator: boolean\r\n  protected readonly acceptor: boolean\r\n  protected readonly sessionState: FixSessionState\r\n  protected readonly emitter: events.EventEmitter\r\n  protected readonly sessionLogger: IJsFixLogger\r\n  protected requestLogoutType: string\r\n  protected respondLogoutType: string\r\n  protected requestLogonType: string\r\n\r\n  protected constructor (public readonly config: IJsFixConfig) {\r\n    const description = config.description\r\n    this.emitter = new events.EventEmitter()\r\n    this.me = description.application.name\r\n    this.sessionState = new FixSessionState(description.HeartBtInt)\r\n    this.sessionLogger = config.logFactory.logger(`${this.me}:FixSession`)\r\n    this.initiator = description.application.type === 'initiator'\r\n    this.acceptor = !this.initiator\r\n    this.checkMsgIntegrity = this.acceptor\r\n    this.sessionState.compId = description.SenderCompId\r\n  }\r\n\r\n  public run (transport: MsgTransport): Promise<any> {\r\n    const logger = this.sessionLogger\r\n    if (this.transport) {\r\n      logger.info('reset from previous transport.')\r\n      this.reset()\r\n    }\r\n    this.transport = transport\r\n    this.subscribe()\r\n    return new Promise<any>((accept, reject) => {\r\n      if (this.initiator) {\r\n        logger.debug('sending logon')\r\n        this.send(this.requestLogonType, this.config.factory.logon())\r\n      }\r\n      this.emitter.on('error', (e: Error) => {\r\n        logger.error(e)\r\n        reject(e)\r\n      })\r\n      this.emitter.on('done', () => {\r\n        accept()\r\n      })\r\n    })\r\n  }\r\n\r\n  protected subscribe () {\r\n\r\n    const transport = this.transport\r\n    const logger = this.sessionLogger\r\n\r\n    const rx = transport.receiver\r\n    const tx = transport.transmitter\r\n\r\n    rx.on('msg', (msgType: string, view: MsgView) => {\r\n      if (this.logReceivedMsgs) {\r\n        const name = view.segment.type !== SegmentType.Unknown ? view.segment.set.name : 'unknown'\r\n        logger.info(`${msgType}: ${name}`)\r\n        logger.info(`${view.toString()}`)\r\n      }\r\n      this.sessionState.lastReceivedAt = new Date()\r\n      if (this.manageSession) {\r\n        this.onMsg(msgType, view)\r\n      } else {\r\n        this.checkForwardMsg(msgType, view)\r\n      }\r\n    })\r\n\r\n    rx.on('error', (e: Error) => {\r\n      logger.warning(`rx error event: ${e.message} ${e.stack || ''}`)\r\n      this.terminate(e)\r\n    })\r\n\r\n    rx.on('done', () => this.done())\r\n    rx.on('end', () => this.done())\r\n\r\n    rx.on('decoded', (msgType: string, data: ElasticBuffer, ptr: number) => {\r\n      logger.debug(`rx: [${msgType}] ${ptr} bytes`)\r\n      this.onDecoded(msgType, data.toString(ptr))\r\n    })\r\n\r\n    tx.on('error', (e: Error) => {\r\n      logger.warning(`tx error event: ${e.message} ${e.stack || ''}`)\r\n      this.terminate(e)\r\n    })\r\n\r\n    tx.on('encoded', (msgType: string, data: Buffer) => {\r\n      logger.debug(`tx: [${msgType}] ${data.length} bytes`)\r\n      this.onEncoded(msgType, data.toString())\r\n    })\r\n  }\r\n\r\n  protected checkForwardMsg (msgType: string, view: MsgView): void {\r\n    this.sessionLogger.info(`forwarding msgType = '${msgType}' to application`)\r\n    this.onApplicationMsg(msgType, view)\r\n  }\r\n\r\n  protected terminate (error: Error): void {\r\n    this.sessionLogger.error(error)\r\n    clearInterval(this.timer)\r\n    this.emitter.emit('error', error)\r\n  }\r\n\r\n  protected peerLogout (view: MsgView) {\r\n    const msg = view.getString(MsgTag.Text)\r\n    switch (this.sessionState.state) {\r\n      case SessionState.WaitingLogoutConfirm: {\r\n        this.sessionLogger.info(`peer confirms logout Text = '${msg}'`)\r\n        this.stop()\r\n        break\r\n      }\r\n\r\n      case SessionState.PeerLoggedOn: {\r\n        this.sessionState.state = SessionState.ConfirmingLogout\r\n        this.sessionLogger.info(`peer initiates logout Text = '${msg}'`)\r\n        this.sessionLogout()\r\n      }\r\n    }\r\n  }\r\n\r\n  protected send (msgType: string, obj: ILooseObject) {\r\n    switch (this.sessionState.state) {\r\n      case SessionState.Stopped: {\r\n        this.sessionLogger.warning(`can't send in stopped state`)\r\n        break\r\n      }\r\n\r\n      default: {\r\n        this.sessionState.LastSentAt = new Date()\r\n        this.transport.transmitter.send(msgType, obj)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  protected sessionLogout (): void {\r\n    const sessionState = this.sessionState\r\n    if (sessionState.logoutSentAt) {\r\n      return\r\n    }\r\n    const factory = this.config.factory\r\n    switch (sessionState.state) {\r\n      case SessionState.PeerLoggedOn: {\r\n        // this instance initiates logout\r\n        sessionState.state = SessionState.WaitingLogoutConfirm\r\n        sessionState.logoutSentAt = new Date()\r\n        const msg = `${this.me} initiate logout`\r\n        this.sessionLogger.info(msg)\r\n        this.send(this.requestLogoutType, factory.logout(this.requestLogoutType,msg))\r\n        break\r\n      }\r\n\r\n      case SessionState.ConfirmingLogout: {\r\n        // this instance responds to logout\r\n        sessionState.logoutSentAt = new Date()\r\n        const msg = `${this.me} confirming logout`\r\n        this.sessionLogger.info(msg)\r\n        this.send(this.respondLogoutType, factory.logout(this.respondLogoutType,msg))\r\n        break\r\n      }\r\n\r\n      default: {\r\n        this.sessionLogger.info(`sessionLogout ignored as in state ${sessionState.state}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  public done (): void {\r\n    switch (this.sessionState.state) {\r\n      case SessionState.PeerLoggedOn: {\r\n        this.sessionLogout()\r\n        break\r\n      }\r\n\r\n      case SessionState.Stopped:\r\n        this.sessionLogger.info(`done. session is now stopped`)\r\n        break\r\n\r\n      default: {\r\n        this.stop()\r\n        break\r\n      }\r\n    }\r\n    this.sessionLogger.info(`done. check logout sequence`)\r\n  }\r\n\r\n  public reset (): void {\r\n    this.transport = null\r\n    this.sessionState.state = SessionState.Connected\r\n    this.sessionState.lastPeerMsgSeqNum = 0\r\n  }\r\n\r\n  protected stop (): void {\r\n    if (this.sessionState.state === SessionState.Stopped) {\r\n      return\r\n    }\r\n    clearInterval(this.timer)\r\n    this.sessionLogger.info(`stop: kill transport`)\r\n    this.transport.end()\r\n    this.emitter.emit('done')\r\n    this.sessionState.state = SessionState.Stopped\r\n    this.onStopped()\r\n    this.transport = null\r\n  }\r\n\r\n  protected abstract onMsg (msgType: string, view: MsgView): void\r\n  // application responsible for writing its own log\r\n  protected abstract onDecoded (msgType: string, txt: string): void\r\n  protected abstract onEncoded (msgType: string, txt: string): void\r\n  // an application level message to be handled by implementation, unless\r\n  // manageSession = false in which case all messages will be forwarded\r\n  protected abstract onApplicationMsg (msgType: string, view: MsgView): void\r\n  // inform application peer has logged in - provide login message\r\n  protected abstract onReady (view: MsgView): void\r\n  // inform application this session has now ended - either from logout or connection dropped\r\n  protected abstract onStopped (): void\r\n  // does the application accept the inbound logon request\r\n  protected abstract onLogon (view: MsgView, user: string, password: string): boolean\r\n}\r\n"]}