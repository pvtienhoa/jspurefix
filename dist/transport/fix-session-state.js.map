{"version":3,"file":"fix-session-state.js","sourceRoot":"","sources":["../../src/transport/fix-session-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElasticBuffer } from '../buffer'\r\nimport moment = require('moment')\r\n\r\nexport enum SessionState {\r\n  Connected = 1,\r\n  PeerLoggedOn = 2,\r\n  PeerLogonRejected = 3,\r\n  WaitingLogoutConfirm = 4,\r\n  ConfirmingLogout = 5,\r\n  Stopped = 6\r\n}\r\n\r\nexport enum TickAction {\r\n  Nothing = 1,\r\n  Heartbeat = 2,\r\n  TestRequest = 3,\r\n  TerminateOnError = 4,\r\n  WaitLogoutConfirmExpired = 5,\r\n  Stop = 6\r\n}\r\n\r\nexport class FixSessionState {\r\n  public nextTickAction: TickAction = TickAction.Nothing\r\n\r\n  public lastReceivedAt: Date = null\r\n  public LastSentAt: Date = null\r\n  public lastTestRequestAt: Date = null\r\n  public logoutSentAt: Date = null\r\n  public now: Date = new Date()\r\n  public compId: string = ''\r\n  public peerCompId: string = ''\r\n  public peerHeartBeatSecs: number = 0\r\n  public lastPeerMsgSeqNum: number = 0\r\n\r\n  private secondsSinceLogoutSent: number = -1\r\n  private secondsSinceSent: number = -1\r\n  private secondsSinceReceive: number = -1\r\n\r\n  public constructor (public readonly heartBeat: number,\r\n                      public state: SessionState = SessionState.Connected,\r\n                      public readonly waitLogoutConfirmSeconds: number = 5,\r\n                      public readonly stopSeconds: number = 2) {\r\n\r\n  }\r\n\r\n  private static dateAsString (d: Date) {\r\n    if (!d) {\r\n      return 'null'\r\n    }\r\n    return moment(d).format('HH:mm:ss.SSS')\r\n  }\r\n\r\n  public toString (): string {\r\n\r\n    const buffer = new ElasticBuffer(1024)\r\n\r\n    buffer.writeString(`compId = ${this.compId}, `)\r\n    buffer.writeString(`heartBeat = ${this.heartBeat}, `)\r\n    buffer.writeString(`state = ${this.state}, `)\r\n    buffer.writeString(`nextTickAction = ${this.nextTickAction}, `)\r\n    buffer.writeString(`now = ${FixSessionState.dateAsString(this.now)}, `)\r\n    buffer.writeString(`timeToDie = ${this.timeToDie()}, `)\r\n    buffer.writeString(`timeToHeartbeat = ${this.timeToHeartbeat()}, `)\r\n    buffer.writeString(`timeToTerminate = ${this.timeToTerminate()}, `)\r\n    buffer.writeString(`timeToTestRequest = ${this.timeToTestRequest()}, `)\r\n    buffer.writeString(`lastReceivedAt = ${FixSessionState.dateAsString(this.lastReceivedAt)}, `)\r\n    buffer.writeString(`LastSentAt = ${FixSessionState.dateAsString(this.LastSentAt)}, `)\r\n    buffer.writeString(`lastTestRequestAt = ${FixSessionState.dateAsString(this.lastTestRequestAt)}, `)\r\n    buffer.writeString(`logoutSentAt = ${FixSessionState.dateAsString(this.logoutSentAt)}, `)\r\n    buffer.writeString(`peerHeartBeatSecs = ${this.peerHeartBeatSecs}, `)\r\n    buffer.writeString(`peerCompId = ${this.peerCompId}, `)\r\n    buffer.writeString(`lastPeerMsgSeqNum = ${this.lastPeerMsgSeqNum}, `)\r\n    buffer.writeString(`secondsSinceLogoutSent = ${this.secondsSinceLogoutSent}, `)\r\n    buffer.writeString(`secondsSinceSent = ${this.secondsSinceSent}, `)\r\n    buffer.writeString(`secondsSinceReceive = ${this.secondsSinceReceive}`)\r\n\r\n    return buffer.toString()\r\n  }\r\n\r\n  public calcAction (now: Date): TickAction {\r\n    this.now = now\r\n    this.calcState()\r\n\r\n    switch (this.state) {\r\n\r\n      case SessionState.PeerLogonRejected: {\r\n        if (this.secondsSinceSent >= this.stopSeconds) {\r\n          this.nextTickAction = TickAction.Stop\r\n        }\r\n        break\r\n      }\r\n\r\n      case SessionState.WaitingLogoutConfirm:\r\n      case SessionState.ConfirmingLogout: {\r\n        if (this.timeToDie()) {\r\n          this.nextTickAction = TickAction.Stop\r\n        }\r\n        break\r\n      }\r\n\r\n      case SessionState.PeerLoggedOn: {\r\n        if (this.timeToHeartbeat()) {\r\n          // have not sent anything for heartbeat period so let other side know still alive.\r\n          this.nextTickAction = TickAction.Heartbeat\r\n        } else {\r\n          // console.log(`${application.name}: secondsSinceSent = ${secondsSinceSent} secondsSinceReceive = ${secondsSinceReceive}`)\r\n          if (this.timeToTerminate()) {\r\n            this.nextTickAction = TickAction.TerminateOnError\r\n          } else if (this.timeToTestRequest()) {\r\n            if (!this.lastTestRequestAt) {\r\n              // not received anything from peer\r\n              this.nextTickAction = TickAction.TestRequest\r\n              this.lastTestRequestAt = this.now\r\n            }\r\n          }\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    return this.nextTickAction\r\n  }\r\n\r\n  public timeToDie (): boolean {\r\n    return this.secondsSinceLogoutSent > this.waitLogoutConfirmSeconds ||\r\n    this.secondsSinceLogoutSent > this.stopSeconds\r\n  }\r\n\r\n  public timeToHeartbeat (): boolean {\r\n    return this.secondsSinceSent >= this.heartBeat\r\n  }\r\n\r\n  public timeToTerminate (): boolean {\r\n    return this.secondsSinceReceive >= 2.5 * this.peerHeartBeatSecs\r\n  }\r\n\r\n  public timeToTestRequest (): boolean {\r\n    return this.secondsSinceReceive >= 1.5 * this.peerHeartBeatSecs\r\n  }\r\n\r\n  private calcState (): void {\r\n    const time = this.now.getTime()\r\n    this.nextTickAction = TickAction.Nothing\r\n    this.secondsSinceLogoutSent = this.logoutSentAt ? (time - this.logoutSentAt.getTime()) / 1000 : -1\r\n    this.secondsSinceSent = (time - this.LastSentAt.getTime()) / 1000\r\n    this.secondsSinceReceive = (time - this.lastReceivedAt.getTime()) / 1000\r\n  }\r\n}\r\n"]}