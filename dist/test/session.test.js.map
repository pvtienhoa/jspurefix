{"version":3,"file":"session.test.js","sourceRoot":"","sources":["../../src/test/session.test.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA8D;AAE9D,4CAAiI;AACjI,wCAA4D;AAE5D,sCAAqD;AACrD,8EAAyE;AAGzE,6BAA4B;AAC5B,kCAAwC;AAExC,MAAM,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;AACvD,MAAM,QAAQ,GAAW,iJAAiJ,CAAA;AAC1K,MAAM,SAAS,GAAW,mIAAmI,CAAA;AAC7J,MAAM,SAAS;IAGb,YAA6B,MAAoB,EACrB,SAAoB,IAAI,wBAAY,EAAE,EACtC,YAA0B,IAAI,wBAAY,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC;QAF5D,WAAM,GAAN,MAAM,CAAc;QACrB,WAAM,GAAN,MAAM,CAAgC;QACtC,cAAS,GAAT,SAAS,CAAoD;QAJzE,UAAK,GAAc,EAAE,CAAA;IAKrC,CAAC;CACF;AAED,IAAI,WAA2B,CAAA;AAC/B,IAAI,iBAAsC,CAAA;AAC1C,IAAI,iBAAsC,CAAA;AAC1C,IAAI,MAAiB,CAAA;AACrB,IAAI,aAAgC,CAAA;AACpC,IAAI,aAAgC,CAAA;AACpC,IAAI,MAAiB,CAAA;AAErB,SAAS,QAAQ,CAAE,GAAc,EAAE,GAAc;IAC/C,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;QACvC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACzB,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,CAAC,GAAS,EAAE;IACnB,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC,CAAA;IAC3E,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC,CAAA;IAC1E,WAAW,GAAG,MAAM,qBAAc,CAAC,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;AAC9E,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,UAAU,CAAC,GAAS,EAAE;IAEpB,aAAa,GAAG,IAAI,6BAAiB,CAAC,iBAAiB,CAAC,CAAA;IACxD,aAAa,GAAG,IAAI,6BAAiB,CAAC,iBAAiB,CAAC,CAAA;IAExD,MAAM,YAAY,GAAG,IAAI,oBAAW,CAAC,aAAa,EAAE,WAAW,EAAE,iBAAiB,EAAE,mBAAU,CAAC,IAAI,CAAC,CAAA;IACpG,MAAM,YAAY,GAAG,IAAI,oBAAW,CAAC,aAAa,EAAE,WAAW,EAAE,iBAAiB,EAAE,mBAAU,CAAC,IAAI,CAAC,CAAA;IAEpG,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAA;IACpC,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAA;IAEpC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;IACtC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;AACxC,CAAC,CAAA,CAAC,CAAA;AAEF,MAAM,aAAa;IACjB,YAA6B,KAAa,EAAkB,OAAe,EAAkB,IAAa;QAA7E,UAAK,GAAL,KAAK,CAAQ;QAAkB,YAAO,GAAP,OAAO,CAAQ;QAAkB,SAAI,GAAJ,IAAI,CAAS;IAC1G,CAAC;CACF;AAED,SAAS,8BAA8B,CAAE,IAAY,EAAE,GAAiB;IACtE,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAA;QAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAA;QAC5B,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;YACvC,MAAM,CAAC,CAAC,CAAC,CAAA;QACX,CAAC,CAAC,CAAA;QACF,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAe,EAAE,IAAa,EAAE,EAAE;YACxD,OAAO,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QACF,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;YACpC,MAAM,CAAC,CAAC,CAAC,CAAA;QACX,CAAC,CAAC,CAAA;QACF,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;QAC/B,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,IAAI,CAAC,kBAAkB,EAAE,GAAS,EAAE;IAClC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;IACxC,MAAM,GAAG,GAAkB,MAAM,8BAA8B,CAAC,cAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IAClF,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAChC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA;IACpC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAA;IAC7B,OAAO,QAAQ,CAAC,gBAAgB,CAAC,CAAA;IACjC,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AAC9B,CAAC,CAAA,CAAC,CAAA;AAEF,SAAe,YAAY,CAAE,gBAAwB,CAAC,EAAE,WAAmB,IAAI;;QAC7E,MAAM,EAAE,GAAG,IAAI,kCAAe,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;QAC5D,MAAM,EAAE,GAAG,IAAI,kCAAe,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;QAC5D,EAAE,CAAC,iBAAiB,GAAG,IAAI,CAAA;QAC3B,EAAE,CAAC,iBAAiB,GAAG,IAAI,CAAA;QAE3B,SAAS,QAAQ;YACf,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,EAAE;gBACxD,EAAE,CAAC,IAAI,EAAE,CAAA;gBACT,EAAE,CAAC,IAAI,EAAE,CAAA;aACV;QACH,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE;YAClE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;YAC/B,QAAQ,EAAE,CAAA;QACZ,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE;YAClE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;YAC/B,QAAQ,EAAE,CAAA;QACZ,CAAC,CAAC,CAAA;QAEF,IAAI,QAAQ,EAAE;YACZ,IAAI,IAAI,GAAY,KAAK,CAAA;YACzB,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBAC9C,MAAM,EAAE,GAAG,IAAI,sBAAa,EAAE,CAAA;gBAC9B,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;gBACxB,IAAI,CAAC,IAAI,EAAE;oBACT,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAA;oBAClD,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,WAAkC,CAAA;oBAC9D,EAAE,CAAC,SAAS,EAAE,CAAA;oBACd,IAAI,GAAG,IAAI,CAAA;iBACZ;YACH,CAAC,CAAC,CAAA;SACH;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC5F,UAAU,CAAC,GAAG,EAAE;oBACd,EAAE,CAAC,IAAI,EAAE,CAAA;oBACT,EAAE,CAAC,IAAI,EAAE,CAAA;oBACT,MAAM,EAAE,CAAA;gBACV,CAAC,EAAE,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;YAChC,CAAC,CAAC,CAAC,CAAC,CAAA;IACN,CAAC;CAAA;AAED,IAAI,CAAC,wBAAwB,EAAE,GAAS,EAAE;IACxC,MAAM,YAAY,EAAE,CAAA;IACpB,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAA;IAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAA;IAE3B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IAEhC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;AAClD,CAAC,CAAA,CAAC,CAAA;AAEF,SAAS,WAAW,CAAE,KAAgB;IACpC,MAAM,KAAK,GAAa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAU,EAAE,EAAE,CAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAsB,CAAC,SAAS,CAAC,CAAA;IACxH,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAA;IAC1B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,MAAc,EAAE,EAAE;QACvD,OAAO,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;IACzC,CAAC,EAAE,CAAC,CAAC,CAAA;IACL,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACrC,CAAC;AAED,IAAI,CAAC,WAAW,EAAE,GAAS,EAAE;IAC3B,MAAM,YAAY,EAAE,CAAA;IAEpB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9C,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC3B,CAAC,CAAA,CAAC,CAAA;AAEF,SAAS,WAAW,CAAE,WAAgC,EAAE,IAAY,EAAE,CAAe;IACnF,QAAQ,IAAI,EAAE;QACZ,KAAK,gBAAgB,CAAC,CAAC;YACrB,MAAM,GAAG,GAAG,CAAoB,CAAA;YAChC,IAAI,GAAG,CAAC,SAAS,KAAK,CAAC,EAAE;gBACvB,GAAG,CAAC,SAAS,GAAG,CAAC,CAAA;aAClB;YACD,MAAK;SACN;KACF;IACD,OAAO,CAAC,CAAA;AACV,CAAC;AAED,IAAI,CAAC,mBAAmB,EAAE,GAAS,EAAE;IACnC,aAAa,CAAC,OAAO,GAAG,WAAW,CAAA;IACnC,MAAM,YAAY,EAAE,CAAA;IAEpB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;AACxD,CAAC,CAAA,CAAC,CAAA;AAEF,SAAS,WAAW,CAAE,IAAY,EAAE,KAAgB;IAClD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,CAAU,EAAE,EAAE;QAC5C,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC5C,CAAC,EAAE,CAAC,CAAC,CAAA;AACP,CAAC;AAED,SAAS,8BAA8B,CAAE,WAAgC,EAAE,IAAY,EAAE,CAAe;IACtG,QAAQ,IAAI,EAAE;QACZ,KAAK,GAAG,CAAC,CAAC;YACR,MAAM,KAAK,GAAG,CAAW,CAAA;YACzB,OAAO,KAAK,CAAC,YAAY,CAAC,CAAA;YAC1B,MAAK;SACN;KACF;IACD,OAAO,CAAC,CAAA;AACV,CAAC;AAED,IAAI,CAAC,iCAAiC,EAAE,GAAS,EAAE;IACjD,aAAa,CAAC,OAAO,GAAG,8BAA8B,CAAA;IACtD,MAAM,YAAY,CAAC,CAAC,CAAC,CAAA;IAErB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,MAAM,GAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,MAAM,CAAC,mBAAmB,KAAK,0BAAmB,CAAC,kBAAkB,CAAC,CAAA;IAC7E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAA;AACnE,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAIT,IAAI,CAAC,yBAAyB,EAAE,GAAS,EAAE;IACzC,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,WAAkC,CAAA;IAC9D,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,CAAA;IAC3F,MAAM,YAAY,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;IAE9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IACvD,MAAM,MAAM,GAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,MAAM,CAAC,mBAAmB,KAAK,0BAAmB,CAAC,cAAc,CAAC,CAAA;IACzE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;AACnD,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,uBAAuB,EAAE,GAAS,EAAE;IACvC,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,WAAkC,CAAA;IAC9D,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,CAAA;IAC3F,MAAM,YAAY,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,MAAM,MAAM,GAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,MAAM,CAAC,mBAAmB,KAAK,0BAAmB,CAAC,gBAAgB,CAAC,CAAA;IAC3E,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC3B,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,+BAA+B,EAAE,GAAS,EAAE;IAC/C,MAAM,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,WAAkC,CAAA;IAC9D,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,CAAA;IAC3G,MAAM,YAAY,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;IAC9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;IACzD,MAAM,MAAM,GAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAClD,MAAM,CAAC,MAAM,CAAC,mBAAmB,KAAK,0BAAmB,CAAC,aAAa,CAAC,CAAA;IACxE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC3B,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAGT,IAAI,CAAC,6BAA6B,EAAE,GAAS,EAAE;IAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAA;IACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAA;IACxC,MAAM,YAAY,CAAC,CAAC,CAAC,CAAA;IAErB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7C,MAAM,wBAAwB,GAAG,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;IACvE,MAAM,CAAC,wBAAwB,IAAI,CAAC,IAAI,wBAAwB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACpF,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,MAAM,CAAA;AAC/C,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,6BAA6B,EAAE,GAAS,EAAE;IAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAA;IACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAA;IACxC,MAAM,YAAY,CAAC,CAAC,CAAC,CAAA;IAErB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC/C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7C,MAAM,wBAAwB,GAAG,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;IACvE,MAAM,CAAC,wBAAwB,IAAI,CAAC,IAAI,wBAAwB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACpF,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,MAAM,CAAA;AAC/C,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,yBAAyB,EAAE,GAAS,EAAE;IACzC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAA;IACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAA;IACxC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAA;IACxC,MAAM,YAAY,CAAC,CAAC,CAAC,CAAA;IAErB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7C,MAAM,wBAAwB,GAAG,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;IACvE,MAAM,wBAAwB,GAAG,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;IACvE,MAAM,CAAC,wBAAwB,IAAI,CAAC,IAAI,wBAAwB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACpF,MAAM,CAAC,wBAAwB,IAAI,CAAC,IAAI,wBAAwB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACpF,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,MAAM,CAAA;IAC7C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,GAAG,MAAM,CAAA;AAC/C,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA","sourcesContent":["import { MsgView, ElasticBuffer, AsciiChars } from '../buffer'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { ISessionDescription, MsgTransport, SessionMsgFactory, AsciiMsgTransmitter, StringDuplex, FixDuplex } from '../transport'\r\nimport { MsgType, SessionRejectReason } from '../types/enum'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { IJsFixConfig, JsFixConfig } from '../config'\r\nimport { SkeletonSession } from '../sample/tcp/skeleton/skeleton-session'\r\nimport { IStandardHeader, IReject, ILogon } from '../types/FIX4.4/repo'\r\n\r\nimport * as path from 'path'\r\nimport { getDefinitions } from '../util'\r\n\r\nconst root: string = path.join(__dirname, '../../data')\r\nconst logonMsg: string = '8=FIX4.4|9=0000136|35=A|49=init-comp|56=accept-comp|34=1|57=fix|52=20180902-12:25:28.980|98=0|108=30|141=Y|553=js-client|554=pwd-client|10=177|'\r\nconst heartbeat: string = '8=FIX4.4|9=0000123|35=0|49=init-comp|56=accept-comp|34=1|57=fix|52=20180902-12:25:59.161|112=Sun, 02 Sep 2018 12:25:59 GMT|10=95|'\r\nclass FixEntity {\r\n  public readonly views: MsgView[] = []\r\n\r\n  constructor (public readonly config: IJsFixConfig,\r\n              public readonly duplex: FixDuplex = new StringDuplex(),\r\n              public readonly transport: MsgTransport = new MsgTransport(0, config, duplex)) {\r\n  }\r\n}\r\n\r\nlet definitions: FixDefinitions\r\nlet clientDescription: ISessionDescription\r\nlet serverDescription: ISessionDescription\r\nlet client: FixEntity\r\nlet clientFactory: SessionMsgFactory\r\nlet serverFactory: SessionMsgFactory\r\nlet server: FixEntity\r\n\r\nfunction loopBack (lhs: FixDuplex, rhs: FixDuplex) {\r\n  lhs.writable.on('data', (data: Buffer) => {\r\n    rhs.readable.push(data)\r\n  })\r\n}\r\n\r\nbeforeAll(async () => {\r\n  clientDescription = require(path.join(root, 'session/test-initiator.json'))\r\n  serverDescription = require(path.join(root, 'session/test-acceptor.json'))\r\n  definitions = await getDefinitions(clientDescription.application.dictionary)\r\n}, 45000)\r\n\r\nbeforeEach(async () => {\r\n\r\n  clientFactory = new SessionMsgFactory(clientDescription)\r\n  serverFactory = new SessionMsgFactory(serverDescription)\r\n\r\n  const clientConfig = new JsFixConfig(clientFactory, definitions, clientDescription, AsciiChars.Pipe)\r\n  const serverConfig = new JsFixConfig(serverFactory, definitions, serverDescription, AsciiChars.Pipe)\r\n\r\n  client = new FixEntity(clientConfig)\r\n  server = new FixEntity(serverConfig)\r\n\r\n  loopBack(client.duplex, server.duplex)\r\n  loopBack(server.duplex, client.duplex)\r\n})\r\n\r\nclass ParsingResult {\r\n  constructor (public readonly event: string, public readonly msgType: string, public readonly view: MsgView) {\r\n  }\r\n}\r\n\r\nfunction clientToServerWaitFirstMessage (type: string, obj: ILooseObject): Promise<ParsingResult> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const clt = client.transport\r\n    const svt = server.transport\r\n    clt.transmitter.on('error', (e: Error) => {\r\n      reject(e)\r\n    })\r\n    svt.receiver.on('msg', (msgType: string, view: MsgView) => {\r\n      resolve(new ParsingResult('msg', msgType, view.clone()))\r\n    })\r\n    clt.receiver.on('error', (e: Error) => {\r\n      reject(e)\r\n    })\r\n    clt.transmitter.send(type, obj)\r\n    client.transport.end()\r\n  })\r\n}\r\n\r\ntest('end to end logon', async () => {\r\n  const lo = client.config.factory.logon()\r\n  const res: ParsingResult = await clientToServerWaitFirstMessage(MsgType.Logon, lo)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  const received = res.view.toObject()\r\n  expect(received).toBeTruthy()\r\n  delete received['StandardHeader']\r\n  delete received['StandardTrailer']\r\n  expect(received).toEqual(lo)\r\n})\r\n\r\nasync function runSkeletons (logoutSeconds: number = 1, followOn: string = null) {\r\n  const s1 = new SkeletonSession(client.config, logoutSeconds)\r\n  const s2 = new SkeletonSession(server.config, logoutSeconds)\r\n  s1.checkMsgIntegrity = true\r\n  s2.checkMsgIntegrity = true\r\n\r\n  function watchdog () {\r\n    if (client.views.length > 20 || server.views.length > 20) {\r\n      s1.done()\r\n      s2.done()\r\n    }\r\n  }\r\n\r\n  client.transport.receiver.on('msg', (type: string, view: MsgView) => {\r\n    client.views.push(view.clone())\r\n    watchdog()\r\n  })\r\n  server.transport.receiver.on('msg', (type: string, view: MsgView) => {\r\n    server.views.push(view.clone())\r\n    watchdog()\r\n  })\r\n\r\n  if (followOn) {\r\n    let sent: boolean = false\r\n    client.transport.transmitter.on('encoded', () => {\r\n      const b1 = new ElasticBuffer()\r\n      b1.writeString(followOn)\r\n      if (!sent) {\r\n        client.transport.duplex.writable.write(b1.slice())\r\n        const at = client.transport.transmitter as AsciiMsgTransmitter\r\n        at.msgSeqNum++\r\n        sent = true\r\n      }\r\n    })\r\n  }\r\n\r\n  await Promise.all([s1.run(client.transport), s2.run(server.transport), new Promise((accept) => {\r\n    setTimeout(() => {\r\n      s1.done()\r\n      s2.done()\r\n      accept()\r\n    }, (logoutSeconds + 2) * 1000)\r\n  })])\r\n}\r\n\r\ntest('session logon / logout', async () => {\r\n  await runSkeletons()\r\n  const cViews = client.views\r\n  const sViews = server.views\r\n  // both sides should now have logged on and logged off\r\n  expect(cViews.length).toEqual(2)\r\n  expect(sViews.length).toEqual(2)\r\n\r\n  expect(cViews[0].segment.name).toEqual('Logon')\r\n  expect(cViews[1].segment.name).toEqual('Logout')\r\n\r\n  expect(sViews[0].segment.name).toEqual('Logon')\r\n  expect(sViews[1].segment.name).toEqual('Logout')\r\n})\r\n\r\nfunction checkSeqNos (views: MsgView[]) {\r\n  const seqNo: number[] = views.map((v: MsgView) => (v.getView('StandardHeader').toObject() as IStandardHeader).MsgSeqNum)\r\n  expect(seqNo).toBeTruthy()\r\n  const delta = seqNo.reduce((c: number, latest: number) => {\r\n    return latest - c === 1 ? c + 1 : c - 1\r\n  }, 0)\r\n  expect(delta).toEqual(seqNo.length)\r\n}\r\n\r\ntest('seq No OK', async () => {\r\n  await runSkeletons()\r\n  // both sides should now have logged on and logged off\r\n  expect(client.views.length >= 2).toEqual(true)\r\n  expect(server.views.length >= 2).toEqual(true)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n})\r\n\r\nfunction mutateSeqNo (description: ISessionDescription, type: string, o: ILooseObject): ILooseObject {\r\n  switch (type) {\r\n    case 'StandardHeader': {\r\n      const hdr = o as IStandardHeader\r\n      if (hdr.MsgSeqNum === 2) {\r\n        hdr.MsgSeqNum = 0\r\n      }\r\n      break\r\n    }\r\n  }\r\n  return o\r\n}\r\n\r\ntest('out of seq logout', async () => {\r\n  clientFactory.mutator = mutateSeqNo\r\n  await runSkeletons()\r\n  // both sides should now have logged on but out of seq logout will terminate sessions so no logout returned\r\n  expect(client.views.length).toEqual(1)\r\n  expect(client.views[0].segment.name).toEqual('Logon')\r\n  expect(server.views.length).toEqual(2)\r\n  expect(server.views[0].segment.name).toEqual('Logon')\r\n  expect(server.views[1].segment.name).toEqual('Logout')\r\n})\r\n\r\nfunction countOfType (type: string, views: MsgView[]): number {\r\n  return views.reduce((c: number, v: MsgView) => {\r\n    return v.segment.name === type ? c + 1 : c\r\n  }, 0)\r\n}\r\n\r\nfunction mutateRemoveRequiredHeartBtInt (description: ISessionDescription, type: string, o: ILooseObject): ILooseObject {\r\n  switch (type) {\r\n    case 'A': {\r\n      const logon = o as ILogon\r\n      delete logon['HeartBtInt']\r\n      break\r\n    }\r\n  }\r\n  return o\r\n}\r\n\r\ntest('client logon reject missing 108', async () => {\r\n  clientFactory.mutator = mutateRemoveRequiredHeartBtInt\r\n  await runSkeletons(2)\r\n  // client sends logon, server rejects\r\n  expect(client.views.length === 1).toEqual(true)\r\n  expect(server.views.length === 1).toEqual(true)\r\n  expect(client.views[0].segment.name).toEqual('Reject')\r\n  expect(server.views[0].segment.name).toEqual('Logon')\r\n  const reject: IReject = client.views[0].toObject()\r\n  expect(reject.SessionRejectReason === SessionRejectReason.RequiredTagMissing)\r\n  expect(reject.Text).toEqual('msgType A missing required tag 108')\r\n}, 10000)\r\n\r\n// transport.transmitter\r\n\r\ntest('client unknown msg type', async () => {\r\n  const at = client.transport.transmitter as AsciiMsgTransmitter\r\n  const changed = logonMsg.replace('35=A', '35=ZZ').replace('34=1', `34=${at.msgSeqNum + 1}`)\r\n  await runSkeletons(2, changed)\r\n  // client sends logon, server rejects\r\n  expect(client.views.length === 3).toEqual(true)\r\n  expect(server.views.length === 3).toEqual(true)\r\n  expect(client.views[0].segment.name).toEqual('Logon')\r\n  expect(client.views[1].segment.name).toEqual('Reject')\r\n  expect(server.views[0].segment.name).toEqual('Logon')\r\n  expect(server.views[1].segment.name).toEqual('unknown')\r\n  const reject: IReject = client.views[1].toObject()\r\n  expect(reject.SessionRejectReason === SessionRejectReason.InvalidMsgType)\r\n  expect(reject.Text).toEqual('msgType ZZ unknown')\r\n}, 10000)\r\n\r\ntest('heartbeat invalid tag', async () => {\r\n  const at = client.transport.transmitter as AsciiMsgTransmitter\r\n  const changed = heartbeat.replace('112=', '999=').replace('34=1', `34=${at.msgSeqNum + 1}`)\r\n  await runSkeletons(2, changed)\r\n  expect(client.views.length === 3).toEqual(true)\r\n  expect(server.views.length === 3).toEqual(true)\r\n  expect(client.views[0].segment.name).toEqual('Logon')\r\n  expect(client.views[1].segment.name).toEqual('Reject')\r\n  expect(server.views[0].segment.name).toEqual('Logon')\r\n  expect(server.views[1].segment.name).toEqual('Heartbeat')\r\n  const reject: IReject = client.views[1].toObject()\r\n  expect(reject.SessionRejectReason === SessionRejectReason.InvalidTagNumber)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n}, 10000)\r\n\r\ntest('heartbeat invalid sender comp', async () => {\r\n  const at = client.transport.transmitter as AsciiMsgTransmitter\r\n  const changed = heartbeat.replace('49=init-comp', '49=init-not!').replace('34=1', `34=${at.msgSeqNum + 1}`)\r\n  await runSkeletons(2, changed)\r\n  expect(client.views.length === 3).toEqual(true)\r\n  expect(server.views.length === 3).toEqual(true)\r\n  expect(client.views[0].segment.name).toEqual('Logon')\r\n  expect(client.views[1].segment.name).toEqual('Reject')\r\n  expect(server.views[0].segment.name).toEqual('Logon')\r\n  expect(server.views[1].segment.name).toEqual('Heartbeat')\r\n  const reject: IReject = client.views[1].toObject()\r\n  expect(reject.SessionRejectReason === SessionRejectReason.CompIDProblem)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n}, 10000)\r\n\r\n// client will send heartbeats to server, server with 30 second heartbeat will not heartbeat\r\ntest('client heartbeats to server', async () => {\r\n  const preset = client.config.description.HeartBtInt\r\n  client.config.description.HeartBtInt = 2\r\n  await runSkeletons(6)\r\n  // both sides should now have logged on and logged off\r\n  expect(client.views.length === 2).toEqual(true)\r\n  expect(server.views.length > 2).toEqual(true)\r\n  const serverReceivesHeartbeats = countOfType('Heartbeat', server.views)\r\n  expect(serverReceivesHeartbeats >= 2 && serverReceivesHeartbeats <= 4).toEqual(true)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n  client.config.description.HeartBtInt = preset\r\n}, 10000)\r\n\r\ntest('server heartbeats to client', async () => {\r\n  const preset = server.config.description.HeartBtInt\r\n  server.config.description.HeartBtInt = 2\r\n  await runSkeletons(6)\r\n  // both sides should now have logged on and logged off\r\n  expect(server.views.length === 2).toEqual(true)\r\n  expect(client.views.length > 2).toEqual(true)\r\n  const clientReceivesHeartbeats = countOfType('Heartbeat', client.views)\r\n  expect(clientReceivesHeartbeats >= 2 && clientReceivesHeartbeats <= 4).toEqual(true)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n  server.config.description.HeartBtInt = preset\r\n}, 10000)\r\n\r\ntest('client server heartbeat', async () => {\r\n  const preset = server.config.description.HeartBtInt\r\n  server.config.description.HeartBtInt = 2\r\n  client.config.description.HeartBtInt = 2\r\n  await runSkeletons(6)\r\n  // both sides should now have logged on and logged off\r\n  expect(server.views.length > 2).toEqual(true)\r\n  expect(client.views.length > 2).toEqual(true)\r\n  const clientReceivesHeartbeats = countOfType('Heartbeat', client.views)\r\n  const serverReceivesHeartbeats = countOfType('Heartbeat', server.views)\r\n  expect(clientReceivesHeartbeats >= 2 && clientReceivesHeartbeats <= 4).toEqual(true)\r\n  expect(serverReceivesHeartbeats >= 2 && serverReceivesHeartbeats <= 4).toEqual(true)\r\n  checkSeqNos(client.views)\r\n  checkSeqNos(server.views)\r\n  server.config.description.HeartBtInt = preset\r\n  client.config.description.HeartBtInt = preset\r\n}, 10000)\r\n"]}