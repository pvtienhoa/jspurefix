{"version":3,"file":"ascii-segment.test.js","sourceRoot":"","sources":["../../src/test/ascii-segment.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsciiParser, AsciiChars, MsgView, SegmentDescription } from '../buffer'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { ISessionDescription, StringDuplex } from '../transport'\r\nimport { ILogon } from '../types/FIX4.4/repo'\r\nimport { getDefinitions, JsonHelper } from '../util'\r\nimport * as path from 'path'\r\n\r\nlet definitions: FixDefinitions\r\nlet jsonHelper: JsonHelper\r\nconst root: string = path.join(__dirname, '../../data')\r\nconst logon: string = '8=FIX4.4|9=0000208|35=A|49=sender-10|56=target-20|34=1|57=sub-a|52=20180610-10:39:01.621|98=2|108=62441|95=20|96=VgfoSqo56NqSVI1fLdlI|141=Y|789=4886|383=20|384=1|372=ipsum|385=R|464=N|553=sit|554=consectetur|10=49|'\r\n\r\nbeforeAll(async () => {\r\n  const sessionDescription: ISessionDescription = require(path.join(root, 'session/test-initiator.json'))\r\n  definitions = await getDefinitions(sessionDescription.application.dictionary)\r\n  jsonHelper = new JsonHelper(definitions)\r\n}, 45000)\r\n\r\nclass ParsingResult {\r\n  constructor (public readonly event: string,\r\n               public readonly msgType: string,\r\n               public readonly view: MsgView,\r\n               public readonly contents: string,\r\n               public readonly parser: AsciiParser) {\r\n  }\r\n}\r\n\r\nfunction toParse (text: string, chunks: boolean = false): Promise<ParsingResult> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const parser = new AsciiParser(definitions, new StringDuplex(text, chunks).readable, AsciiChars.Pipe)\r\n    parser.on('error', (e: Error) => {\r\n      reject(e)\r\n    })\r\n    parser.on('msg', (msgType: string, view: MsgView) => {\r\n      resolve(new ParsingResult('msg', msgType, view.clone(), parser.state.elasticBuffer.toString(), parser))\r\n    })\r\n    parser.on('done', () => {\r\n      resolve(new ParsingResult('done', null,null, parser.state.elasticBuffer.toString(), parser))\r\n    })\r\n  })\r\n}\r\n\r\ntest('0 gaps', async () => {\r\n  const res: ParsingResult = await toParse(logon)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  const unknowns: SegmentDescription[] = res.view.structure.layout['.undefined']\r\n  expect(unknowns).toBeFalsy()\r\n  const o: ILogon = res.view.toObject()\r\n  expect(o).toBeTruthy()\r\n  expect(o.Password).toEqual('consectetur')\r\n  expect(o.Username).toEqual('sit')\r\n})\r\n\r\ntest('1 gap', async () => {\r\n  const gap = logon.replace('108=62441|', '108=62441|9999=im not here')\r\n  const res: ParsingResult = await toParse(gap)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  const unknown: SegmentDescription = res.view.structure.layout['.undefined']\r\n  expect(unknown).toBeTruthy()\r\n  expect(unknown.startTag).toEqual(9999)\r\n  expect(unknown.startPosition).toEqual(10)\r\n  const o: ILogon = res.view.toObject()\r\n  expect(o).toBeTruthy()\r\n  expect(o.Password).toEqual('consectetur')\r\n  expect(o.Username).toEqual('sit')\r\n})\r\n\r\ntest('1 gap next to 1 gap', async () => {\r\n  const gap = logon.replace('108=62441|', '108=62441|1=gap|2=gap|')\r\n  const res: ParsingResult = await toParse(gap)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  const unknowns: SegmentDescription[] = res.view.structure.layout['.undefined']\r\n  expect(unknowns).toBeTruthy()\r\n  expect(Array.isArray(unknowns)).toEqual(true)\r\n  expect(unknowns[0].startTag).toEqual(1)\r\n  expect(unknowns[0].startPosition).toEqual(10)\r\n  expect(unknowns[1].startTag).toEqual(2)\r\n  expect(unknowns[1].startPosition).toEqual(11)\r\n  const o: ILogon = res.view.toObject()\r\n  expect(o).toBeTruthy()\r\n  expect(o.Password).toEqual('consectetur')\r\n  expect(o.Username).toEqual('sit')\r\n})\r\n\r\ntest('1 gap undefined msg', async () => {\r\n  const gap = logon.replace('108=62441|', '108=62441|9999=im not here')\r\n  const res: ParsingResult = await toParse(gap)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  expect(res.view.getUndefined()).toBeTruthy()\r\n  expect(res.view.undefinedForMsg()).toEqual('undefined tag = 9999')\r\n})\r\n\r\ntest('2 gap undefined msg', async () => {\r\n  const gap = logon.replace('108=62441|', '108=62441|1=gap|2=gap|')\r\n  const res: ParsingResult = await toParse(gap)\r\n  expect(res.event).toEqual('msg')\r\n  expect(res.msgType).toEqual('A')\r\n  expect(res.view.getUndefined()).toBeTruthy()\r\n  expect(res.view.undefinedForMsg()).toEqual('undefined tags = 1, 2')\r\n})\r\n"]}