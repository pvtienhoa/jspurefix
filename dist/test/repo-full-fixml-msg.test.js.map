{"version":3,"file":"repo-full-fixml-msg.test.js","sourceRoot":"","sources":["../../src/test/repo-full-fixml-msg.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { ISessionDescription, StringDuplex } from '../transport'\r\nimport { JsFixConfig } from '../config'\r\nimport { MsgView, ElasticBuffer, MsgParser, AsciiChars, FixmlEncoder, FiXmlParser } from '../buffer'\r\nimport { getDefinitions, JsonHelper } from '../util'\r\n\r\nlet definitions: FixDefinitions\r\nlet jsonHelper: JsonHelper\r\nlet sessionDescription: ISessionDescription\r\nconst root: string = path.join(__dirname, '../../data')\r\n\r\nbeforeAll(async () => {\r\n  sessionDescription = require(path.join(root, 'session/test-initiator.json'))\r\n  definitions = await getDefinitions('repofixml')\r\n  jsonHelper = new JsonHelper(definitions)\r\n}, 45000)\r\n\r\nasync function testEncodeDecode (asObj: ILooseObject, msgType: string): Promise<ILooseObject> {\r\n  // encode to FIXML format from provided object.\r\n  return new Promise(async (resolve, reject) => {\r\n    const fe = new FixmlEncoder(new ElasticBuffer(), definitions)\r\n    fe.encode(asObj, msgType)\r\n    const fixml: string = fe.buffer.toString()\r\n    const config = new JsFixConfig(null, definitions, sessionDescription, AsciiChars.Pipe)\r\n    const xmlParser: MsgParser = new FiXmlParser(config, new StringDuplex(fixml).readable)\r\n    if (asObj.Batch) {\r\n      xmlParser.on('batch', (msgType: string, v: MsgView) => {\r\n        const o: ILooseObject = v.toObject()\r\n        resolve(o)\r\n      })\r\n    } else {\r\n      xmlParser.on('msg', (msgType: string, v: MsgView) => {\r\n        const o: ILooseObject = v.toObject()\r\n        resolve(o)\r\n      })\r\n    }\r\n\r\n    xmlParser.on('error', (e) => {\r\n      reject(e)\r\n    })\r\n  })\r\n}\r\n\r\ntest('MktDataFull settle fixml object', async () => {\r\n  const msgType: string = 'MktDataFull'\r\n  const file: string = path.join(root,'examples/FIXML/cme/md/settle')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('AllocInstrctn fixml object', async () => {\r\n  const msgType: string = 'AllocInstrctn'\r\n  const file: string = path.join(root,'examples/FIXML/cme/alloc/Claiming Firm Requests Sub-allocation with Allocation Instructions/')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('AllocRpt fixml object', async () => {\r\n  const msgType: string = 'AllocRpt'\r\n  const file: string = path.join(root,'examples/FIXML/cme/alloc/Clearing System Notifies Allocation to the Claiming Firm - Cross-Exchange/')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('TrdCaptRpt fixml object', async () => {\r\n  const msgType: string = 'TrdCaptRpt'\r\n  const file: string = path.join(root,'examples/FIXML/cme/tc/Delivery Fixed Commodity Swap')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('MktDataFull fixml object', async () => {\r\n  const msgType: string = 'MktDataFull'\r\n  const file: string = path.join(root,'examples/FIXML/cme/md/futures')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('UserReq logon fixml object', async () => {\r\n  const msgType: string = 'UserReq'\r\n  const file: string = path.join(root,'examples/FIXML/cme/ur/logon')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('UserReq logoff fixml object', async () => {\r\n  const msgType: string = 'UserReq'\r\n  const file: string = path.join(root,'examples/FIXML/cme/ur/logoff')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('TrdCaptRpt 2 fixml object', async () => {\r\n  const msgType: string = 'TrdCaptRpt'\r\n  const file: string = path.join(root,'examples/FIXML/cme/tc/Initial Single Side Submission')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('TrdCaptRpt 3 fixml object', async () => {\r\n  const msgType: string = 'TrdCaptRpt'\r\n  const file: string = path.join(root,'examples/FIXML/cme/tc/Accepted Unmatched')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('TrdCaptRptReq fixml object', async () => {\r\n  const msgType: string = 'TrdCaptRptReq'\r\n  const file: string = path.join(root,'examples/FIXML/cme/tc/Trading Firm Continued Subscription')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('Order fixml object', async () => {\r\n  const msgType: string = 'Order'\r\n  const file: string = path.join(root,'examples/FIXML/om/nso')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n\r\ntest('ExecRpt fixml object', async () => {\r\n  const msgType: string = 'ExecRpt'\r\n  const file: string = path.join(root,'examples/FIXML/om/er')\r\n  const asObj: ILooseObject = jsonHelper.fromJson(`${file}/object.json`, msgType)\r\n  const o: ILooseObject = await testEncodeDecode(asObj, msgType)\r\n  expect(o).toEqual(asObj)\r\n}, 1000)\r\n"]}