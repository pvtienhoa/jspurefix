{"version":3,"file":"to-views.js","sourceRoot":"","sources":["../../src/test/to-views.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA4B;AAG5B,sCAAuC;AACvC,sCAAuE;AAEvE,kCAAwC;AAExC,MAAa,OAAO;IAMlB,YAA6B,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;QAJ/B,UAAK,GAAc,EAAE,CAAA;QAC9B,UAAK,GAAY,IAAI,CAAA;QACX,SAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;IAGlE,CAAC;IAEY,IAAI,CAAE,OAAe,WAAW;;YAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;YACtB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;YAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YACxB,IAAI,CAAC,WAAW,GAAG,MAAM,qBAAc,CAAC,IAAI,CAAC,CAAA;YAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;YACpC,MAAM,EAAE,GAAQ,OAAO,CAAC,IAAI,CAAC,CAAA;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,UAAU,UAAU,CAAC,CAAA;YACzD,MAAM,UAAU,GAAe,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;YAC5D,MAAM,kBAAkB,GAAwB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC,CAAA;YACvG,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,mBAAU,CAAC,IAAI,CAAC,CAAA;YACtF,MAAM,SAAS,GAAc,IAAI,oBAAW,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;YAChE,OAAO,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;gBACpC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAe,EAAE,CAAU,EAAE,EAAE;oBAClD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAA;gBACvB,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,OAAe,EAAE,CAAU,EAAE,EAAE;oBACpD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;gBACxB,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBACzB,MAAM,EAAE,CAAA;gBACV,CAAC,CAAC,CAAA;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;oBACjC,MAAM,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;CACF;AApCD,0BAoCC","sourcesContent":["import * as path from 'path'\r\nimport { ReadStream } from 'fs'\r\nimport { ISessionDescription } from '../transport'\r\nimport { JsFixConfig } from '../config'\r\nimport { MsgParser, MsgView, AsciiChars, FiXmlParser } from '../buffer'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { getDefinitions } from '../util'\r\n\r\nexport class ToViews {\r\n  public definitions: FixDefinitions\r\n  public readonly views: MsgView[] = []\r\n  public batch: MsgView = null\r\n  private readonly root: string = path.join(__dirname, '../../data')\r\n\r\n  constructor (public readonly testFolder: string) {\r\n  }\r\n\r\n  public async load (file: string = 'repofixml'): Promise<any> {\r\n    const root = this.root\r\n    const testFolder = this.testFolder\r\n    const views = this.views\r\n    this.definitions = await getDefinitions(file)\r\n    const definitions = this.definitions\r\n    const fs: any = require('fs')\r\n    const fullName = path.join(root, `${testFolder}/fix.xml`)\r\n    const readStream: ReadStream = fs.createReadStream(fullName)\r\n    const sessionDescription: ISessionDescription = require(path.join(root, 'session/test-initiator.json'))\r\n    const config = new JsFixConfig(null, definitions, sessionDescription, AsciiChars.Pipe)\r\n    const xmlParser: MsgParser = new FiXmlParser(config, readStream)\r\n    return new Promise((accept, reject) => {\r\n      xmlParser.on('msg', (msgType: string, v: MsgView) => {\r\n        views.push(v.clone())\r\n      })\r\n      xmlParser.on('batch', (msgType: string, v: MsgView) => {\r\n        this.batch = v.clone()\r\n      })\r\n      xmlParser.on('close', () => {\r\n        accept()\r\n      })\r\n      xmlParser.on('error', (e: Error) => {\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}