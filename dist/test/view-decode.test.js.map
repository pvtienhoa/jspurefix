{"version":3,"file":"view-decode.test.js","sourceRoot":"","sources":["../../src/test/view-decode.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\r\nimport { Structure, AsciiChars, MsgView } from '../buffer'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { FixDefinitions } from '../dictionary'\r\nimport { ISessionDescription, AsciiMsgTransmitter } from '../transport'\r\nimport { JsFixConfig } from '../config'\r\nimport { IInstrumentLeg } from '../types/FIX4.4/quickfix'\r\nimport { getDefinitions, replayFixFile } from '../util'\r\n\r\nconst root: string = path.join(__dirname, '../../data')\r\n\r\nlet definitions: FixDefinitions\r\nlet session: AsciiMsgTransmitter\r\nlet views: MsgView[]\r\nlet structure: Structure\r\nlet view: MsgView\r\n\r\nbeforeAll(async () => {\r\n  const sessionDescription: ISessionDescription = require(path.join(root, 'session/qf-fix44.json'))\r\n  definitions = await getDefinitions(sessionDescription.application.dictionary)\r\n  const config = new JsFixConfig(null, definitions, sessionDescription, AsciiChars.Pipe)\r\n  session = new AsciiMsgTransmitter(config)\r\n  views = await replayFixFile(definitions, sessionDescription, path.join(root, 'examples/FIX.4.4/quickfix/md-data-snapshot/fix.txt'), AsciiChars.Pipe)\r\n  if (views && views.length > 0) {\r\n    view = views[0]\r\n    structure = view.structure\r\n  }\r\n}, 45000)\r\n\r\ntest('expect a structure from fix msg', () => {\r\n  expect(structure).toBeTruthy()\r\n})\r\n\r\ntest('get NoMDEntries directly - expect an array', () => {\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  expect(noMDEntriesView).toBeTruthy()\r\n  const noMDEntries: ILooseObject[] = noMDEntriesView.toObject()\r\n  expect(Array.isArray(noMDEntries)).toEqual(true)\r\n  expect(noMDEntries.length).toEqual(2)\r\n})\r\n\r\ntest('get NoMDEntries via MDFullGrp - array within a component', () => {\r\n  const mdFullGrp: MsgView = view.getView('MDFullGrp')\r\n  expect(mdFullGrp).toBeTruthy()\r\n  const mdFullGrpAsObject: ILooseObject = mdFullGrp.toObject()\r\n  const noMDEntries: ILooseObject[] = mdFullGrpAsObject.NoMDEntries\r\n  expect(Array.isArray(noMDEntries)).toEqual(true)\r\n  expect(noMDEntries.length).toEqual(2)\r\n})\r\n\r\nfunction getMdEntriesObjects (): ILooseObject[] {\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  expect(noMDEntriesView).toBeTruthy()\r\n  const noMDEntries: ILooseObject[] = noMDEntriesView.toObject()\r\n  expect(Array.isArray(noMDEntries)).toEqual(true)\r\n  expect(noMDEntries.length).toEqual(2)\r\n  return noMDEntries\r\n}\r\n\r\n//  <field number='272' name='MDEntryDate' type='UTCDATEONLY' />\r\n\r\ntest('get UTCDATEONLY from NoMDEntries instance 1', () => {\r\n  const noMdEntriesAsObjects: ILooseObject[] = getMdEntriesObjects()\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  const mmEntryView: MsgView = noMDEntriesView.getGroupInstance(1)\r\n\r\n  const instance: ILooseObject = noMdEntriesAsObjects[1]\r\n  const mmEntryDateAsString: string = mmEntryView.getString('MDEntryDate')\r\n  expect(mmEntryDateAsString).toEqual('20180608')\r\n  expect(mmEntryView.getString(272)).toEqual('20180608')\r\n  const asUtc: Date = new Date(Date.UTC(2018, 5, 8))\r\n  expect(instance.MDEntryDate).toEqual(asUtc)\r\n})\r\n\r\n// <field number='273' name='MDEntryTime' type='UTCTIMEONLY' />\r\n\r\ntest('get UTCTIMEONLY from NoMDEntries instance 1', () => {\r\n  const noMdEntriesAsObjects: ILooseObject[] = getMdEntriesObjects()\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  const mmEntryView: MsgView = noMDEntriesView.getGroupInstance(1)\r\n\r\n  const instance: ILooseObject = noMdEntriesAsObjects[1]\r\n  const mmEntryTimeAsString: string = mmEntryView.getString('MDEntryTime')\r\n  expect(mmEntryTimeAsString).toEqual('20:53:14.717')\r\n  expect(mmEntryView.getString(273)).toEqual('20:53:14.717')\r\n  const asUtc: Date = new Date(Date.UTC(0, 0, 0, 20, 53, 14, 717))\r\n  expect(instance.MDEntryTime).toEqual(asUtc)\r\n})\r\n\r\n//   <field number='126' name='ExpireTime' type='UTCTIMESTAMP' />\r\n\r\ntest('get UTCTIMESTAMP from NoMDEntries instance 1', () => {\r\n  const noMdEntriesAsObjects: ILooseObject[] = getMdEntriesObjects()\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  const mmEntryView: MsgView = noMDEntriesView.getGroupInstance(1)\r\n\r\n  const instance: ILooseObject = noMdEntriesAsObjects[1]\r\n  const mmEntryExpireTimeAsString: string = mmEntryView.getString('ExpireTime')\r\n  expect(mmEntryExpireTimeAsString).toEqual('20180608-20:53:14.000')\r\n  expect(mmEntryView.getString(126)).toEqual('20180608-20:53:14.000')\r\n  const asUtc: Date = new Date(Date.UTC(2018, 5, 8, 20, 53, 14, 0))\r\n  const d: Date = instance.ExpireTime\r\n  expect(d).toEqual(asUtc)\r\n})\r\n\r\n//   <field number='110' name='MinQty' type='QTY' />\r\n\r\ntest('get MinQty from NoMDEntries instance 1', () => {\r\n  const noMdEntriesAsObjects: ILooseObject[] = getMdEntriesObjects()\r\n  const noMDEntriesView: MsgView = view.getView('NoMDEntries')\r\n  const mmEntryView: MsgView = noMDEntriesView.getGroupInstance(1)\r\n\r\n  const instance: ILooseObject = noMdEntriesAsObjects[1]\r\n  const mmEntryMinQtyAsString: string = mmEntryView.getString('MinQty')\r\n  expect(mmEntryMinQtyAsString).toEqual('53495')\r\n  expect(mmEntryView.getString(110)).toEqual('53495')\r\n  expect(instance.MinQty).toEqual(53495)\r\n})\r\n\r\ntest('get selection tags one call - tag ids', () => {\r\n  const [a, b, c, d] = view.getTypedTags([8, 9, 35, 49])\r\n  expect(a).toEqual('FIX4.4')\r\n  expect(b).toEqual(2955)\r\n  expect(c).toEqual('W')\r\n  expect(d).toEqual('sender-10')\r\n})\r\n\r\n/*\r\n[0] 8 (BeginString) = FIX4.4, [1] 9 (BodyLength) = 0002955\r\n[2] 35 (MsgType) = W[MARKET_DATA_SNAPSHOT_FULL_REFRESH], [3] 49 (SenderCompID) = sender-10\r\n[4] 56 (TargetCompID) = target-20, [5] 34 (MsgSeqNum) = 1\r\n[6] 57 (TargetSubID) = sub-a, [7] 52 (SendingTime) = 20180608-21:10:59.047\r\n[8] 262 (MDReqID) = ipsum, [9] 55 (Symbol) = sit\r\n */\r\n\r\ntest('get selection tags one call - tag names', () => {\r\n  const [a, b, c, d, e, f] = view.getTypedTags([\r\n    'BeginString',\r\n    'BodyLength',\r\n    'MsgType',\r\n    'MsgSeqNum',\r\n    'MDReqID',\r\n    'Symbol'])\r\n  expect(a).toEqual('FIX4.4')\r\n  expect(b).toEqual(2955)\r\n  expect(c).toEqual('W')\r\n  expect(d).toEqual(1)\r\n  expect(e).toEqual('ipsum')\r\n  expect(f).toEqual('sit')\r\n})\r\n\r\ntest('nested view fetch' , () => {\r\n  const legGrpView = view.getView('InstrmtLegGrp.NoLegs')\r\n  expect(legGrpView).toBeTruthy()\r\n  const legGrp: IInstrumentLeg[] = legGrpView.toObject()\r\n  expect(legGrp).toBeTruthy()\r\n  expect(Array.isArray(legGrp))\r\n  expect(legGrp.length).toEqual(2)\r\n})\r\n"]}