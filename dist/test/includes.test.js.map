{"version":3,"file":"includes.test.js","sourceRoot":"","sources":["../../src/test/includes.test.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4EAAuE;AACvE,6BAA4B;AAE5B,IAAI,QAAsB,CAAA;AAC1B,MAAM,GAAG,GAAW,SAAS,CAAA;AAC7B,MAAM,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kDAAkD,CAAC,CAAA;AAC7F,MAAM,SAAS,GAAW,mBAAmB,GAAG,MAAM,CAAA;AACtD,MAAM,UAAU,GAAW,qBAAqB,GAAG,MAAM,CAAA;AACzD,MAAM,UAAU,GAAW,qBAAqB,GAAG,MAAM,CAAA;AACzD,MAAM,cAAc,GAAW,yBAAyB,GAAG,MAAM,CAAA;AACjE,MAAM,cAAc,GAAW,yBAAyB,GAAG,MAAM,CAAA;AAEjE,MAAM,IAAI,GAAW,cAAc,GAAG,MAAM,CAAA;AAE5C,SAAS,CAAC,GAAS,EAAE;IACnB,QAAQ,GAAG,IAAI,4BAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IACvC,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAA;AACxB,CAAC,CAAA,EAAE,KAAK,CAAC,CAAA;AAET,IAAI,CAAC,0CAA0C,EAAE,GAAS,EAAE;IAC1D,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAA;AAC1D,CAAC,CAAA,EAAE,IAAI,CAAC,CAAA;AAER,IAAI,CAAC,8CAA8C,EAAE,GAAS,EAAE;IAC9D,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAA;AACvE,CAAC,CAAA,EAAE,IAAI,CAAC,CAAA;AAER,IAAI,CAAC,gDAAgD,EAAE,GAAS,EAAE;IAChE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAA;AACnF,CAAC,CAAA,EAAE,IAAI,CAAC,CAAA;AAER,IAAI,CAAC,uDAAuD,EAAE,GAAS,EAAE;IACvE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,CAAC,CAAC,CAAA;AACvG,CAAC,CAAA,EAAE,IAAI,CAAC,CAAA;AAER,IAAI,CAAC,2DAA2D,EAAE,GAAS,EAAE;IAC3E,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC,CAAA;AACvH,CAAC,CAAA,EAAE,IAAI,CAAC,CAAA","sourcesContent":["import { IncludeGraph } from '../dictionary/parser/fixml/include-graph'\r\nimport * as path from 'path'\r\n\r\nlet includes: IncludeGraph\r\nconst ver: string = '5-0-SP2'\r\nconst root: string = path.join(__dirname, `../../data/fix_repo/fixmlschema_FIX.5.0SP2_EP228`)\r\nconst dataTypes: string = `fixml-datatypes-${ver}.xsd`\r\nconst fieldsBase: string = `fixml-fields-base-${ver}.xsd`\r\nconst fieldsImpl: string = `fixml-fields-impl-${ver}.xsd`\r\nconst componentsBase: string = `fixml-components-base-${ver}.xsd`\r\nconst componentsImpl: string = `fixml-components-impl-${ver}.xsd`\r\n\r\nconst main: string = `fixml-main-${ver}.xsd`\r\n\r\nbeforeAll(async () => {\r\n  includes = new IncludeGraph(root, main)\r\n  await includes.build()\r\n}, 45000)\r\n\r\ntest('test resolving node with no dependencies', async () => {\r\n  expect(includes.resolve(dataTypes)).toEqual([dataTypes])\r\n}, 1000)\r\n\r\ntest('test resolving fields base with 1 dependency', async () => {\r\n  expect(includes.resolve(fieldsBase)).toEqual([dataTypes, fieldsBase])\r\n}, 1000)\r\n\r\ntest('test resolving fields impl with 2 dependencies', async () => {\r\n  expect(includes.resolve(fieldsImpl)).toEqual([dataTypes, fieldsBase, fieldsImpl])\r\n}, 1000)\r\n\r\ntest('test resolving components base depends on fields impl', async () => {\r\n  expect(includes.resolve(componentsBase)).toEqual([dataTypes, fieldsBase, fieldsImpl, componentsBase])\r\n}, 1000)\r\n\r\ntest('test resolving components impl depends on components base', async () => {\r\n  expect(includes.resolve(componentsImpl)).toEqual([dataTypes, fieldsBase, fieldsImpl, componentsBase, componentsImpl])\r\n}, 1000)\r\n"]}