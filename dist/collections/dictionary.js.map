{"version":3,"file":"dictionary.js","sourceRoot":"","sources":["../../src/collections/dictionary.ts"],"names":[],"mappings":";;AAEA,MAAa,UAAU;IAAvB;QAEU,cAAS,GAAyB,EAAE,CAAA;IAoD9C,CAAC;IAlDQ,KAAK;QACV,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAClD,OAAO,IAAI,CAAC,MAAM,CAAA;IACpB,CAAC;IAEM,MAAM;QACX,MAAM,EAAE,GAAQ,EAAE,CAAA;QAClB,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAClD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC/C,OAAO,EAAE,CAAA;IACX,CAAC;IAEM,IAAI;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACpC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,OAAe,EAAE,EAAE;YACvD,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;YACtC,OAAO,CAAC,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAA;QAClE,CAAC,EAAE,EAAE,CAAC,CAAA;IACR,CAAC;IAEM,WAAW,CAAE,GAAW;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAA;IACpC,CAAC;IAEM,GAAG,CAAE,GAAW,EAAE,CAAI;QAC3B,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YACzB,MAAM,GAAG,GAAW,iBAAiB,GAAG,EAAE,CAAA;YAC1C,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;SACrB;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAEM,SAAS,CAAE,GAAW,EAAE,CAAI;QACjC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAEM,MAAM,CAAE,GAAW;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,CAAC;IAEM,GAAG,CAAE,GAAW;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,CAAC;IAEM,OAAO,CAAE,EAAsB;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9E,CAAC;CACF;AAtDD,gCAsDC","sourcesContent":["import { IDictIteratorCb } from './collection'\r\n\r\nexport class Dictionary<T> {\r\n\r\n  private container: { [id: string]: T; } = {}\r\n\r\n  public count (): number {\r\n    const keys: string[] = Object.keys(this.container)\r\n    return keys.length\r\n  }\r\n\r\n  public values (): T[] {\r\n    const va: T[] = []\r\n    const keys: string[] = Object.keys(this.container)\r\n    keys.forEach((k) => va.push(this.container[k]))\r\n    return va\r\n  }\r\n\r\n  public keys (): string[] {\r\n    return Object.keys(this.container)\r\n  }\r\n\r\n  public toString (): string {\r\n    return this.keys().reduce((a: string, current: string) => {\r\n      const token = a.length > 0 ? ', ' : ''\r\n      return a + `${token}${this.container[current].toString() || ''}`\r\n    }, '')\r\n  }\r\n\r\n  public containsKey (key: string): boolean {\r\n    return this.container[key] != null\r\n  }\r\n\r\n  public add (key: string, v: T): void {\r\n    if (this.containsKey(key)) {\r\n      const msg: string = `duplicate key ${key}`\r\n      throw new Error(msg)\r\n    }\r\n    this.container[key] = v\r\n  }\r\n\r\n  public addUpdate (key: string, v: T): void {\r\n    this.container[key] = v\r\n  }\r\n\r\n  public remove (key: string): void {\r\n    delete this.container[key]\r\n  }\r\n\r\n  public get (key: string): T {\r\n    return this.container[key]\r\n  }\r\n\r\n  public forEach (cb: IDictIteratorCb<T>): void {\r\n    Object.keys(this.container).forEach((k: string) => cb(k, this.container[k]))\r\n  }\r\n}\r\n"]}