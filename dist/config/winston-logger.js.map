{"version":3,"file":"winston-logger.js","sourceRoot":"","sources":["../../src/config/winston-logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsFixLogger } from './js-fix-logger'\r\nimport { Logger } from 'winston'\r\nconst { createLogger, format, transports } = require('winston')\r\nrequire('winston-daily-rotate-file')\r\nconst { combine, timestamp, printf, colorize } = format\r\n\r\nexport class WinstonLogger {\r\n  public static readonly appFormat = printf((info: any) => {\r\n    return `${info.timestamp} [${info.type}] ${info.level}: ${info.message}`\r\n  })\r\n  public static readonly plainTimeStampFormat = printf((info: any) => {\r\n    return `${info.timestamp} - ${info.message}`\r\n  })\r\n  public static readonly plainFormat = printf((info: any) => {\r\n    return `${info.message}`\r\n  })\r\n  private readonly appLogger: Logger\r\n\r\n  constructor(public readonly options: any = WinstonLogger.consoleOptions()) {\r\n    this.appLogger = createLogger(options)\r\n  }\r\n\r\n  public static consoleOptions(level: string = 'debug'): any {\r\n    return {\r\n      format: combine(\r\n        colorize(),\r\n        timestamp(),\r\n        WinstonLogger.appFormat\r\n      ),\r\n      level: level,\r\n      transports: [\r\n        new transports.Console()\r\n      ]\r\n    }\r\n  }\r\n\r\n  public static fileOptions(fileName: string, level: string = 'debug', maxSize: number = 50 * 1024 * 1024, format: any = combine(\r\n    timestamp(),\r\n    WinstonLogger.appFormat\r\n  )): any {\r\n    return {\r\n      format: format,\r\n      level: level,\r\n      transports: [\r\n        new transports.File({\r\n          filename: fileName,\r\n          maxsize: maxSize\r\n        })\r\n      ]\r\n    }\r\n  }\r\n\r\n  public plain(fileName: string, maxSize: number = 100 * 1024 * 1024, haveTimeStamp: boolean = false, isZipped: boolean = true, maxFile:number = 7): IJsFixLogger {\r\n    var trans = new (transports.DailyRotateFile)({\r\n      filename: `${fileName}.%DATE%.log`,\r\n      datePattern: 'YYYYMMDD',\r\n      zippedArchive: isZipped,\r\n      maxSize: maxSize,\r\n      maxFiles: maxFile\r\n    });\r\n    var txtLogger: Logger;\r\n    if (haveTimeStamp) {\r\n      txtLogger = createLogger({\r\n        format: combine(\r\n          timestamp(),\r\n          WinstonLogger.plainTimeStampFormat\r\n        ),\r\n        level: 'info',\r\n        transports: [\r\n          trans\r\n        ]\r\n      })\r\n    } else {\r\n      txtLogger = createLogger({\r\n        format: WinstonLogger.plainFormat,\r\n        level: 'info',\r\n        transports: [\r\n          trans\r\n        ]\r\n      })\r\n    };\r\n    return {\r\n      log: function (txt: string) {\r\n        txtLogger.info({\r\n          type: 'info',\r\n          message: txt\r\n        })\r\n      },\r\n\r\n      info: function (msg: string): void {\r\n        this.log(msg)\r\n      },\r\n      debug: function (msg: string): void {\r\n        this.log(msg)\r\n      },\r\n      warning: function (msg: string): void {\r\n        this.log(msg)\r\n      },\r\n      error: function (): void {\r\n        // nothing\r\n      }\r\n    } as IJsFixLogger\r\n  }\r\n\r\n  public make(type: string): IJsFixLogger {\r\n    const logger = this.appLogger\r\n    return {\r\n      info: function (msg: string): void {\r\n        logger.info({\r\n          type: type,\r\n          message: msg\r\n        })\r\n      },\r\n      debug: function (msg: string): void {\r\n        logger.debug({\r\n          type: type,\r\n          message: msg\r\n        })\r\n      },\r\n      warning: function (msg: string): void {\r\n        logger.warn({\r\n          type: type,\r\n          message: msg\r\n        })\r\n      },\r\n      error: function (e: Error): void {\r\n        logger.error({\r\n          type: type,\r\n          message: `${e.message} : ${e.stack}`\r\n        })\r\n      }\r\n    } as IJsFixLogger\r\n  }\r\n}\r\n"]}