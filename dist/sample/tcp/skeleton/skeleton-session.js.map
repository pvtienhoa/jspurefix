{"version":3,"file":"skeleton-session.js","sourceRoot":"","sources":["../../../../src/sample/tcp/skeleton/skeleton-session.ts"],"names":[],"mappings":";;AACA,kDAAiD;AAGjD,MAAa,eAAgB,SAAQ,wBAAY;IAG/C,YAA6B,MAAoB,EACpB,gBAAwB,EAAE;QACrD,KAAK,CAAC,MAAM,CAAC,CAAA;QAFc,WAAM,GAAN,MAAM,CAAc;QACpB,kBAAa,GAAb,aAAa,CAAa;QAErD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,QAAQ,OAAO,EAAE;YACf,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,EAAE,CAAC,CAAA;gBACpD,MAAK;aACN;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IAC7C,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;QAC7C,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;QACxC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAA;QAClD,QAAQ,CAAC,EAAE;YACT,KAAK,WAAW,CAAC,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;gBACtD,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,IAAI,EAAE,CAAA;gBACb,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC,CAAA;gBACxB,MAAK;aACN;YAED,KAAK,UAAU,CAAC,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAA;gBAClD,MAAK;aACN;YAED,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;gBACxC,MAAK;aACN;SACF;IACH,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF;AAhED,0CAgEC","sourcesContent":["import { MsgView } from '../../../buffer'\r\nimport { AsciiSession } from '../../../transport'\r\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\r\n\r\nexport class SkeletonSession extends AsciiSession {\r\n  private readonly logger: IJsFixLogger\r\n  private readonly fixLog: IJsFixLogger\r\n  constructor (public readonly config: IJsFixConfig,\r\n               public readonly logoutSeconds: number = 45) {\r\n    super(config)\r\n    this.logReceivedMsgs = true\r\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\r\n    this.logger = config.logFactory.logger(`${this.me}`)\r\n  }\r\n\r\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\r\n    // dispatch messages\r\n    switch (msgType) {\r\n      default: {\r\n        this.logger.info(`received message type ${msgType}`)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // use msgType for example to persist only trade capture messages to database\r\n  protected onDecoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  // no delimiter substitution on transmit messages\r\n  protected onEncoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(AsciiSession.asPiped(txt))\r\n  }\r\n\r\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\r\n    this.logger.info(`peer logs in user ${user}`)\r\n    return true\r\n  }\r\n\r\n  protected onReady (view: MsgView): void {\r\n    this.logger.info('onReady')\r\n    const logoutSeconds = this.logoutSeconds\r\n    const t = this.config.description.application.type\r\n    switch (t) {\r\n      case 'initiator': {\r\n        this.logger.info(`will logout after ${logoutSeconds}`)\r\n        setTimeout(() => {\r\n          this.done()\r\n        }, logoutSeconds * 1000)\r\n        break\r\n      }\r\n\r\n      case 'acceptor': {\r\n        this.logger.info(`acceptor is ready for requests`)\r\n        break\r\n      }\r\n\r\n      default: {\r\n        this.logger.warning(`unknown type ${t}`)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onStopped (): void {\r\n    this.logger.info('stopped')\r\n  }\r\n}\r\n"]}