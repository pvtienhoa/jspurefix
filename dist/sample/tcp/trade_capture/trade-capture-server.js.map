{"version":3,"file":"trade-capture-server.js","sourceRoot":"","sources":["../../../../src/sample/tcp/trade_capture/trade-capture-server.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgView } from '../../../buffer'\r\nimport { AsciiSession } from '../../../transport'\r\nimport { MsgType } from '../../../types/enum'\r\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\r\n// interfaces generated by compiler to make messages easy in an IDE\r\nimport { ITradeCaptureReportRequest, ITradeCaptureReport, MsgTag, SessionRejectReason, SubscriptionRequestType, TradeRequestStatus } from '../../../types/FIX4.4/repo'\r\nimport { TradeFactory } from './trade-factory'\r\n\r\nexport class TradeCaptureServer extends AsciiSession {\r\n  private readonly logger: IJsFixLogger\r\n  private readonly fixLog: IJsFixLogger\r\n  private readonly tradeFactory: TradeFactory = new TradeFactory()\r\n  private timerHandle: NodeJS.Timer = null\r\n\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    super(config)\r\n    this.logReceivedMsgs = true\r\n    this.logger = config.logFactory.logger(`${this.me}:TradeCaptureServer`)\r\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\r\n  }\r\n\r\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\r\n    this.logger.info(`${view.toJson()}`)\r\n    switch (msgType) {\r\n      case MsgType.TradeCaptureReportRequest: {\r\n        this.tradeCaptureReportRequest(view.toObject())\r\n        break\r\n      }\r\n\r\n      default: {\r\n        const seqNum = view.getTyped(MsgTag.MsgSeqNum)\r\n        this.send(msgType, this.config.factory.reject(msgType, seqNum, `${this.me}: unexpected msg type '${msgType}'`, SessionRejectReason.InvalidMsgType))\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onReady (view: MsgView): void {\r\n    // server waits for client to make a request\r\n    this.logger.info('ready for requests.')\r\n  }\r\n\r\n  protected onStopped (): void {\r\n    this.logger.info('stopped')\r\n    if (this.timerHandle) {\r\n      clearInterval(this.timerHandle)\r\n    }\r\n  }\r\n\r\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\r\n    return true\r\n  }\r\n\r\n  // use msgType for example to persist only trade capture messages to database\r\n  protected onDecoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  // no delimiter substitution on transmit messages\r\n  protected onEncoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(AsciiSession.asPiped(txt))\r\n  }\r\n\r\n  private tradeCaptureReportRequest (tcr: ITradeCaptureReportRequest): void {\r\n    this.logger.info(`received tcr ${tcr.TradeRequestID}`)\r\n    // send back an ack.\r\n    this.send(MsgType.TradeCaptureReportRequestAck, TradeFactory.tradeCaptureReportRequestAck(tcr, TradeRequestStatus.Accepted))\r\n    // send some trades\r\n    const batch: ITradeCaptureReport[] = this.tradeFactory.batchOfTradeCaptureReport()\r\n    batch.forEach((tc: ITradeCaptureReport) => {\r\n      this.send(MsgType.TradeCaptureReport, tc)\r\n    })\r\n    this.send(MsgType.TradeCaptureReportRequestAck, TradeFactory.tradeCaptureReportRequestAck(tcr, TradeRequestStatus.Completed))\r\n    // start sending the odd 'live' trade\r\n    switch (tcr.SubscriptionRequestType) {\r\n      case SubscriptionRequestType.SnapshotAndUpdates: {\r\n        this.timerHandle = setInterval(() => {\r\n          if (Math.random() < 0.4) {\r\n            const tc: ITradeCaptureReport = this.tradeFactory.singleTradeCaptureReport()\r\n            this.send(MsgType.TradeCaptureReport, tc)\r\n          }\r\n        }, 5000)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}