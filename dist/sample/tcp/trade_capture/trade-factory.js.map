{"version":3,"file":"trade-factory.js","sourceRoot":"","sources":["../../../../src/sample/tcp/trade_capture/trade-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  OrdStatus,\r\n  SubscriptionRequestType,\r\n  TradeReportType,\r\n  TradeRequestResult,\r\n  TradeRequestStatus,\r\n  TradeRequestType,\r\n  TrdType,\r\n  ITradeCaptureReportRequestAck,\r\n  ITradeCaptureReport,\r\n  ITradeCaptureReportRequest\r\n} from '../../../types/FIX4.4/repo'\r\n\r\nimport { TradeReportTransType } from '../../../types/FIXML50SP2/enum'\r\n\r\nexport class TradeFactory {\r\n  private nextTradeId: number = 100000\r\n  private nextExecId: number = 600000\r\n  private readonly securities: string[] =\r\n    [\r\n      'Gold',\r\n      'Silver',\r\n      'Platinum',\r\n      'Magnesium',\r\n      'Steel'\r\n    ]\r\n\r\n  public static tradeCaptureReportRequestAck (tcr: ITradeCaptureReportRequest, status: TradeRequestStatus): ITradeCaptureReportRequestAck {\r\n    // send back an ack.\r\n    return {\r\n      TradeRequestID: tcr.TradeRequestID,\r\n      TradeRequestType: tcr.TradeRequestType,\r\n      TradeRequestStatus: status,\r\n      TradeRequestResult: TradeRequestResult.Successful\r\n    } as ITradeCaptureReportRequestAck\r\n  }\r\n\r\n  public static tradeCaptureReportRequest (requestId: string, tradeDate: Date): ITradeCaptureReportRequest {\r\n    return {\r\n      TradeRequestID: 'all-trades',\r\n      TradeRequestType: TradeRequestType.AllTrades,\r\n      SubscriptionRequestType: SubscriptionRequestType.SnapshotAndUpdates,\r\n      TrdCapDtGrp: [\r\n        {\r\n          TradeDate: tradeDate\r\n        }\r\n      ]\r\n    } as ITradeCaptureReportRequest\r\n  }\r\n\r\n  private static getRandomInt (min: number, max: number) {\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(Math.random() * (max - min)) + min\r\n  }\r\n\r\n  public batchOfTradeCaptureReport (toMake?: number): ITradeCaptureReport[] {\r\n    if (!toMake) {\r\n      toMake = TradeFactory.getRandomInt(4, 8)\r\n    }\r\n    const arr: ITradeCaptureReport[] = []\r\n    for (let i: number = 0; i < toMake; ++i) {\r\n      const tc: ITradeCaptureReport = this.singleTradeCaptureReport()\r\n      arr.push(tc)\r\n    }\r\n    return arr\r\n  }\r\n\r\n  public singleTradeCaptureReport (): ITradeCaptureReport {\r\n    const tradeReportId = this.nextTradeId++\r\n    const qty: number = TradeFactory.getRandomInt(100, 200)\r\n    const price: number = Math.round(Math.random() * 100 * 100) / 100\r\n    const instrument: number = TradeFactory.getRandomInt(0, this.securities.length - 1)\r\n    const securities = this.securities\r\n    const execId = this.nextExecId++\r\n    return {\r\n      TradeReportID: tradeReportId.toString(),\r\n      TradeReportTransType: TradeReportTransType.New,\r\n      TradeReportType: TradeReportType.Submit,\r\n      TrdType: TrdType.RegularTrade,\r\n      TransactTime: new Date(),\r\n      ExecID: execId.toString(),\r\n      PreviouslyReported: false,\r\n      OrdStatus: OrdStatus.Filled,\r\n      Instrument: {\r\n        SecurityID: `${securities[instrument]}.INC`,\r\n        Symbol: `${securities[instrument]}`\r\n      },\r\n      TradeDate: new Date(),\r\n      LastQty: qty,\r\n      LastPx: price\r\n\r\n    } as ITradeCaptureReport\r\n  }\r\n}\r\n"]}