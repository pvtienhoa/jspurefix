{"version":3,"file":"trade-capture-client.js","sourceRoot":"","sources":["../../../../src/sample/tcp/trade_capture/trade-capture-client.ts"],"names":[],"mappings":";;AACA,kDAAiD;AACjD,8CAA6C;AAG7C,sDAAiD;AACjD,mDAA8C;AAE9C,MAAa,kBAAmB,SAAQ,wBAAY;IAKlD,YAA6B,MAAoB;QAC/C,KAAK,CAAC,MAAM,CAAC,CAAA;QADc,WAAM,GAAN,MAAM,CAAc;QAE/C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,wBAAU,EAAuB,CAAA;QACpD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,qBAAqB,CAAC,CAAA;IACzE,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;QACpC,QAAQ,OAAO,EAAE;YACf,KAAK,cAAO,CAAC,kBAAkB,CAAC,CAAC;gBAE/B,MAAM,EAAE,GAAwB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC/C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,EAAE,CAAC,CAAA;gBAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,0BAA0B,EAAE,CAAC,MAAM,qBAAqB,EAAE,CAAC,aAAa,aAAa,EAAE,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,CAAC,OAAO,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,CAAA;gBAC3L,MAAK;aACN;YAED,KAAK,cAAO,CAAC,4BAA4B,CAAC,CAAC;gBACzC,MAAM,EAAE,GAAkC,IAAI,CAAC,QAAQ,EAAE,CAAA;gBACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,cAAc,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAA;gBAClF,MAAK;aACN;SACF;IACH,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IAC7C,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACzB,MAAM,GAAG,GAA+B,4BAAY,CAAC,yBAAyB,CAAC,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,CAAA;QAExG,IAAI,CAAC,IAAI,CAAC,cAAO,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAA;QACjD,MAAM,aAAa,GAAG,EAAE,CAAA;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;QACtD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,IAAI,EAAE,CAAA;QACb,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC,CAAA;IAC1B,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;CACF;AA7DD,gDA6DC","sourcesContent":["import { MsgView } from '../../../buffer'\r\nimport { AsciiSession } from '../../../transport'\r\nimport { MsgType } from '../../../types/enum'\r\nimport { ITradeCaptureReport, ITradeCaptureReportRequest, ITradeCaptureReportRequestAck } from '../../../types/FIX4.4/repo'\r\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\r\nimport { Dictionary } from '../../../collections'\r\nimport { TradeFactory } from './trade-factory'\r\n\r\nexport class TradeCaptureClient extends AsciiSession {\r\n  private readonly logger: IJsFixLogger\r\n  private readonly fixLog: IJsFixLogger\r\n  private reports: Dictionary<ITradeCaptureReport>\r\n\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    super(config)\r\n    this.logReceivedMsgs = true\r\n    this.reports = new Dictionary<ITradeCaptureReport>()\r\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\r\n    this.logger = config.logFactory.logger(`${this.me}:TradeCaptureClient`)\r\n  }\r\n\r\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\r\n    this.logger.info(`${view.toJson()}`)\r\n    switch (msgType) {\r\n      case MsgType.TradeCaptureReport: {\r\n        // create an object and cast to the interface\r\n        const tc: ITradeCaptureReport = view.toObject()\r\n        this.reports.addUpdate(tc.TradeReportID, tc)\r\n        this.logger.info(`[reports: ${this.reports.count()}] received tc ExecID = ${tc.ExecID} TradeReportID  = ${tc.TradeReportID} Symbol = ${tc.Instrument.Symbol} ${tc.LastQty} @ ${tc.LastPx}`)\r\n        break\r\n      }\r\n\r\n      case MsgType.TradeCaptureReportRequestAck: {\r\n        const tc: ITradeCaptureReportRequestAck = view.toObject()\r\n        this.logger.info(`received tcr ack ${tc.TradeRequestID} ${tc.TradeRequestStatus}`)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onStopped (): void {\r\n    this.logger.info('stopped')\r\n  }\r\n\r\n  // use msgType for example to persist only trade capture messages to database\r\n  protected onDecoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  // no delimiter substitution on transmit messages\r\n  protected onEncoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(AsciiSession.asPiped(txt))\r\n  }\r\n\r\n  protected onReady (view: MsgView): void {\r\n    this.logger.info('ready')\r\n    const tcr: ITradeCaptureReportRequest = TradeFactory.tradeCaptureReportRequest('all-trades', new Date())\r\n    // send request to server\r\n    this.send(MsgType.TradeCaptureReportRequest, tcr)\r\n    const logoutSeconds = 32\r\n    this.logger.info(`will logout after ${logoutSeconds}`)\r\n    setTimeout(() => {\r\n      this.done()\r\n    }, logoutSeconds * 1000)\r\n  }\r\n\r\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\r\n    return true\r\n  }\r\n}\r\n"]}