{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../../src/sample/launcher.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA4B;AAC5B,sCAA6F;AAC7F,4CAA4D;AAE5D,MAAM,IAAI,GAAG,QAAQ,CAAA;AACrB,MAAM,UAAU,GAAG,IAAI,+BAAsB,CAAC,sBAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAA;AAEnF,MAAsB,QAAQ;IAE5B,YAAuC,eAAuB,EAAkB,cAAsB;QAA/D,oBAAe,GAAf,eAAe,CAAQ;QAAkB,mBAAc,GAAd,cAAc,CAAQ;QACpG,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;IAC7C,CAAC;IAKM,GAAG;QACR,OAAO,IAAI,OAAO,CAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACrB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACtB,MAAM,EAAE,CAAA;YACV,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACpB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEa,KAAK;;YACjB,MAAM,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAA;YACxE,MAAM,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAA;YACvE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAChC,MAAM,YAAY,GAAG,MACrB,sBAAU,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,6BAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAA;YACnF,MAAM,YAAY,GAAG,MACrB,sBAAU,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,6BAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAA;YACnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;YACpC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAClC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;QACtC,CAAC;KAAA;CACF;AAtCD,4BAsCC","sourcesContent":["import * as path from 'path'\r\nimport { WinstonLogger, IJsFixConfig, JsFixWinstonLogFactory, IJsFixLogger } from '../config'\r\nimport { SessionMsgFactory, makeConfig } from '../transport'\r\n\r\nconst root = '../../'\r\nconst logFactory = new JsFixWinstonLogFactory(WinstonLogger.consoleOptions('info'))\r\n\r\nexport abstract class Launcher {\r\n  private readonly logger: IJsFixLogger\r\n  protected constructor (public readonly initiatorConfig: string, public readonly acceptorConfig: string) {\r\n    this.logger = logFactory.logger('launcher')\r\n  }\r\n\r\n  protected abstract getInitiator (config: IJsFixConfig): Promise<any>\r\n  protected abstract getAcceptor (config: IJsFixConfig): Promise<any>\r\n\r\n  public run () {\r\n    return new Promise<any>((accept, reject) => {\r\n      const logger = this.logger\r\n      logger.info('launching ..')\r\n      this.setup().then(() => {\r\n        logger.info('.. done')\r\n        accept()\r\n      }).catch((e: Error) => {\r\n        logger.error(e)\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n\r\n  private async setup () {\r\n    const clientDescription = require(path.join(root, this.initiatorConfig))\r\n    const serverDescription = require(path.join(root, this.acceptorConfig))\r\n    this.logger.info('launching ..')\r\n    const clientConfig = await\r\n    makeConfig(clientDescription, logFactory, new SessionMsgFactory(clientDescription))\r\n    const serverConfig = await\r\n    makeConfig(serverDescription, logFactory, new SessionMsgFactory(serverDescription))\r\n    this.logger.info('create acceptor')\r\n    const server = this.getAcceptor(serverConfig)\r\n    this.logger.info('create initiator')\r\n    const client = this.getInitiator(clientConfig)\r\n    this.logger.info('launching ....')\r\n    return Promise.all([server, client])\r\n  }\r\n}\r\n"]}