{"version":3,"file":"http-server.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/http-server.ts"],"names":[],"mappings":";;AACA,oDAAuD;AAGvD,+CAA0C;AAE1C,MAAa,UAAW,SAAQ,oBAAY;IAI1C,YAA6B,MAAoB;QAC/C,KAAK,CAAC,MAAM,CAAC,CAAA;QADc,WAAM,GAAN,MAAM,CAAc;QADhC,YAAO,GAAe,IAAI,wBAAU,CAAC,QAAQ,CAAC,CAAA;QAG7D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;QAC/B,QAAQ,OAAO,EAAE;YACf,KAAK,OAAO,CAAC,CAAC;gBACZ,MAAM,KAAK,GAAoB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAA;gBACtD,MAAM,IAAI,GAAqB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;gBAC5D,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAA;aACnC;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF;AA5CD,gCA4CC","sourcesContent":["import { MsgView } from '../../../buffer'\r\nimport { FixmlSession } from '../../../transport/fixml'\r\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\r\nimport { INewOrderSingle, IExecutionReport } from '../../../types/FIXML50SP2'\r\nimport { OmsFactory } from './oms-factory'\r\n\r\nexport class HttpServer extends FixmlSession {\r\n  private readonly logger: IJsFixLogger\r\n  private readonly fixLog: IJsFixLogger\r\n  private readonly factory: OmsFactory = new OmsFactory('server')\r\n  constructor (public readonly config: IJsFixConfig) {\r\n    super(config)\r\n    this.logReceivedMsgs = true\r\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\r\n    this.logger = config.logFactory.logger(`${this.me}`)\r\n  }\r\n\r\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\r\n    // dispatch messages\r\n    this.logger.info(view.toJson())\r\n    switch (msgType) {\r\n      case 'Order': {\r\n        const order: INewOrderSingle = view.toObject()\r\n        this.logger.info(`received order id ${order.ClOrdID}`)\r\n        const fill: IExecutionReport = this.factory.fillOrder(order)\r\n        this.send('ExecutionReport', fill)\r\n      }\r\n    }\r\n  }\r\n\r\n  // use msgType for example to persist only trade capture messages to database\r\n  protected onDecoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  protected onEncoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\r\n    return true\r\n  }\r\n\r\n  protected onReady (view: MsgView): void {\r\n    this.logger.info('onReady')\r\n  }\r\n\r\n  protected onStopped (): void {\r\n    this.logger.info('stopped')\r\n  }\r\n}\r\n"]}