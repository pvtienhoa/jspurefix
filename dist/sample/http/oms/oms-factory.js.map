{"version":3,"file":"oms-factory.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/oms-factory.ts"],"names":[],"mappings":";;AAAA,0DAWkC;AAElC,MAAa,UAAU;IAGrB,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAFpC,OAAE,GAAW,CAAC,CAAA;QACd,WAAM,GAAW,CAAC,CAAA;IAE1B,CAAC;IAEM,WAAW,CAAE,MAAc,EAAE,IAAU,EAAE,GAAW,EAAE,KAAa;QACxE,MAAM,EAAE,GAAW,IAAI,CAAC,EAAE,EAAE,CAAA;QAC5B,OAAO;YACL,OAAO,EAAE,MAAM,EAAE,EAAE;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,oBAAO,CAAC,KAAK;YACtB,YAAY,EAAE;gBACZ,QAAQ,EAAE,GAAG;aACG;YAClB,UAAU,EAAE;gBACV,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,WAAW;gBACvB,gBAAgB,EAAE,6BAAgB,CAAC,UAAU;aAC/B;YAChB,WAAW,EAAE,wBAAW,CAAC,iBAAiB;SACxB,CAAA;IACtB,CAAC;IAEM,SAAS,CAAE,KAAsB;QACtC,MAAM,EAAE,GAAW,IAAI,CAAC,MAAM,EAAE,CAAA;QAChC,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,YAAY,EAAE,IAAI,IAAI,EAAE;YACxB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE,KAAK,CAAC,KAAK;YACnB,QAAQ,EAAE,qBAAQ,CAAC,WAAW;YAC9B,SAAS,EAAE,sBAAS,CAAC,MAAM;YAC3B,MAAM,EAAE,OAAO,EAAE,EAAE;YACnB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK,CAAC,YAAY,CAAC,QAAQ;aACrB;YAClB,UAAU,EAAE;gBACV,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM;gBAC/B,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,UAAU;gBACvC,gBAAgB,EAAE,6BAAgB,CAAC,UAAU;aAC/B;SACG,CAAA;IACvB,CAAC;CACF;AAlDD,gCAkDC","sourcesContent":["import {\r\n  INewOrderSingle,\r\n  ExecType,\r\n  OrdStatus,\r\n  OrdType,\r\n  SecurityIDSource,\r\n  Side,\r\n  TimeInForce,\r\n  IOrderQtyData,\r\n  IInstrument,\r\n  IExecutionReport\r\n} from '../../../types/FIXML50SP2'\r\n\r\nexport class OmsFactory {\r\n  private id: number = 1\r\n  private execId: number = 1\r\n  constructor (public readonly account: string) {\r\n  }\r\n\r\n  public createOrder (symbol: string, side: Side, qty: number, price: number): INewOrderSingle {\r\n    const id: number = this.id++\r\n    return {\r\n      ClOrdID: `Cli${id}`,\r\n      Account: this.account,\r\n      Side: side,\r\n      Price: price,\r\n      OrdType: OrdType.Limit,\r\n      OrderQtyData: {\r\n        OrderQty: qty\r\n      } as IOrderQtyData,\r\n      Instrument: {\r\n        Symbol: symbol,\r\n        SecurityID: '459200101',\r\n        SecurityIDSource: SecurityIDSource.IsinNumber\r\n      } as IInstrument,\r\n      TimeInForce: TimeInForce.GoodTillCancelGtc\r\n    } as INewOrderSingle\r\n  }\r\n\r\n  public fillOrder (order: INewOrderSingle): IExecutionReport {\r\n    const id: number = this.execId++\r\n    return {\r\n      ClOrdID: order.ClOrdID,\r\n      OrdType: order.OrdType,\r\n      TransactTime: new Date(),\r\n      AvgPx: order.Price,\r\n      LeavesQty: 0,\r\n      LastPx: order.Price,\r\n      ExecType: ExecType.OrderStatus,\r\n      OrdStatus: OrdStatus.Filled,\r\n      ExecID: `exec${id}`,\r\n      Side: order.Side,\r\n      Price: order.Price,\r\n      OrderQtyData: {\r\n        OrderQty: order.OrderQtyData.OrderQty\r\n      } as IOrderQtyData,\r\n      Instrument: {\r\n        Symbol: order.Instrument.Symbol,\r\n        SecurityID: order.Instrument.SecurityID,\r\n        SecurityIDSource: SecurityIDSource.IsinNumber\r\n      } as IInstrument\r\n    } as IExecutionReport\r\n  }\r\n}\r\n"]}