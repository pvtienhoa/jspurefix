{"version":3,"file":"http-client.js","sourceRoot":"","sources":["../../../../src/sample/http/oms/http-client.ts"],"names":[],"mappings":";;AAAA,oDAAuD;AAGvD,+CAA0C;AAC1C,0DAAkE;AAElE,MAAa,UAAW,SAAQ,oBAAY;IAI1C,YAA6B,MAAoB,EACpB,gBAAwB,EAAE;QACrD,KAAK,CAAC,MAAM,CAAC,CAAA;QAFc,WAAM,GAAN,MAAM,CAAc;QACpB,kBAAa,GAAb,aAAa,CAAa;QAFtC,YAAO,GAAe,IAAI,wBAAU,CAAC,YAAY,CAAC,CAAA;QAIjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;IACtD,CAAC;IAES,gBAAgB,CAAE,OAAe,EAAE,IAAa;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;QAC/B,QAAQ,OAAO,EAAE;YACf,KAAK,WAAW,CAAC,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;gBACzC,MAAK;aACN;YAED,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,IAAI,GAAqB,IAAI,CAAC,QAAQ,EAAE,CAAA;gBAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,6BAA6B,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAA;gBAC5F,MAAK;aACN;SACF;IACH,CAAC;IAGS,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,SAAS,CAAE,OAAe,EAAE,GAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAES,OAAO,CAAE,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC9D,OAAO,IAAI,CAAA;IACb,CAAC;IAES,OAAO,CAAE,IAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,iBAAI,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;QACpE,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAA;QAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,aAAa,EAAE,CAAC,CAAA;QACtD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,IAAI,EAAE,CAAA;QACb,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;IACf,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAC7B,CAAC;CACF;AAxDD,gCAwDC","sourcesContent":["import { FixmlSession } from '../../../transport/fixml'\r\nimport { MsgView } from '../../../buffer'\r\nimport { IJsFixLogger, IJsFixConfig } from '../../../config'\r\nimport { OmsFactory } from './oms-factory'\r\nimport { IExecutionReport, Side } from '../../../types/FIXML50SP2'\r\n\r\nexport class HttpClient extends FixmlSession {\r\n  private readonly logger: IJsFixLogger\r\n  private readonly fixLog: IJsFixLogger\r\n  private readonly factory: OmsFactory = new OmsFactory('TradersRUs')\r\n  constructor (public readonly config: IJsFixConfig,\r\n               public readonly logoutSeconds: number = 45) {\r\n    super(config)\r\n    this.logReceivedMsgs = true\r\n    this.fixLog = config.logFactory.plain(`jsfix.${config.description.application.name}.txt`)\r\n    this.logger = config.logFactory.logger(`${this.me}`)\r\n  }\r\n\r\n  protected onApplicationMsg (msgType: string, view: MsgView): void {\r\n    // dispatch messages\r\n    this.logger.info(view.toJson())\r\n    switch (msgType) {\r\n      case 'BizMsgRej': {\r\n        this.logger.warning('received rejection')\r\n        break\r\n      }\r\n\r\n      case 'ExecRpt': {\r\n        const fill: IExecutionReport = view.toObject()\r\n        this.logger.warning(`received execution report ${fill.OrderQtyData.OrderQty}@${fill.Price}`)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // use msgType for example to persist only trade capture messages to database\r\n  protected onDecoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  protected onEncoded (msgType: string, txt: string): void {\r\n    this.fixLog.info(txt)\r\n  }\r\n\r\n  protected onLogon (view: MsgView, user: string, password: string): boolean {\r\n    return true\r\n  }\r\n\r\n  protected onReady (view: MsgView): void {\r\n    this.logger.info('onReady')\r\n    const logoutSeconds = this.logoutSeconds\r\n    const req = this.factory.createOrder('IBM', Side.Buy, 10000, 100.12)\r\n    this.send('NewOrderSingle', req)\r\n    this.logger.info(`will logout after ${logoutSeconds}`)\r\n    setTimeout(() => {\r\n      this.done()\r\n    }, 11 * 1000)\r\n  }\r\n\r\n  protected onStopped (): void {\r\n    this.logger.info('stopped')\r\n  }\r\n}\r\n"]}