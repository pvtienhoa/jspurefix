{"version":3,"file":"dictionary-definitions.js","sourceRoot":"","sources":["../../src/util/dictionary-definitions.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,8CAAmH;AACnH,sCAA2D;AAC3D,6BAA4B;AAC5B,yBAAwB;AAOxB,MAAM,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;AAEnD,SAAgB,WAAW,CAAE,CAAS;IACpC,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC,CAAA;IACnE,OAAO,UAAU,CAAC,CAAC,CAAC,CAAA;AACtB,CAAC;AAHD,kCAGC;AAED,SAAsB,cAAc,CAAE,IAAY,EAAE,YAA4B,wBAAe;;QAC7F,IAAI,MAAiB,CAAA;QACrB,MAAM,EAAE,GAAoB,WAAW,CAAC,IAAI,CAAC,CAAA;QAC7C,IAAI,EAAE,EAAE;YACN,IAAI,GAAG,EAAE,CAAC,IAAI,CAAA;SACf;QACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAA;QACjB,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClE,MAAM,GAAG,IAAI,yBAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SAC3C;aAAM,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;YAC3C,MAAM,GAAG,IAAI,gCAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SAClD;aAAM;YACL,MAAM,GAAG,IAAI,kCAAqB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SACpD;QACD,OAAO,MAAM,CAAC,KAAK,EAAE,CAAA;IACvB,CAAC;CAAA;AAfD,wCAeC;AAED,SAAS,IAAI,CAAE,CAAS;IACtB,IAAI,CAAC,GAAW,CAAC,CAAA;IACjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;QACvB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;KACvB;IACD,OAAO,CAAC,CAAA;AACV,CAAC","sourcesContent":["import { FixXsdParser, FixDefinitions, FixParser, QuickFixXmlFileParser, RepositoryXmlParser } from '../dictionary'\r\nimport { GetJsFixLogger, makeEmptyLogger } from '../config'\r\nimport * as path from 'path'\r\nimport * as fs from 'fs'\r\n\r\nexport interface IDictionaryPath {\r\n  output: string,\r\n  dict: string\r\n}\r\n\r\nconst root: string = path.join(__dirname, '../../')\r\n\r\nexport function getDictPath (p: string): IDictionaryPath {\r\n  const dictionary = require(path.join(root, 'data/dictionary.json'))\r\n  return dictionary[p]\r\n}\r\n\r\nexport async function getDefinitions (path: string, getLogger: GetJsFixLogger = makeEmptyLogger): Promise<FixDefinitions> {\r\n  let parser: FixParser\r\n  const dp: IDictionaryPath = getDictPath(path)\r\n  if (dp) {\r\n    path = dp.dict\r\n  }\r\n  path = norm(path)\r\n  if (fs.lstatSync(path).isDirectory() && path.indexOf('fixml') >= 0) {\r\n    parser = new FixXsdParser(path, getLogger)\r\n  } else if (fs.lstatSync(path).isDirectory()) {\r\n    parser = new RepositoryXmlParser(path, getLogger)\r\n  } else {\r\n    parser = new QuickFixXmlFileParser(path, getLogger)\r\n  }\r\n  return parser.parse()\r\n}\r\n\r\nfunction norm (p: string): string {\r\n  let f: string = p\r\n  if (!path.isAbsolute(p)) {\r\n    f = path.join(root, f)\r\n  }\r\n  return f\r\n}\r\n"]}