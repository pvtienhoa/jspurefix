{"version":3,"file":"json-helper.js","sourceRoot":"","sources":["../../src/util/json-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { TagType } from '../buffer'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { ContainedSimpleField, ContainedFieldSet, ContainedGroupField, ContainedComponentField, dispatchFields, IFieldDispatcher, FixDefinitions, MessageDefinition } from '../dictionary'\r\nimport moment = require('moment')\r\n\r\nexport class JsonHelper {\r\n  constructor (public readonly definitions: FixDefinitions) {\r\n  }\r\n\r\n  private static patchSimple (object: ILooseObject, field: ContainedSimpleField) {\r\n    let name: string = field.definition.name\r\n    let v: any = object[name]\r\n    if (v == null) {\r\n      v = object[field.name]\r\n      if (v !== null) {\r\n        name = field.name\r\n      }\r\n    }\r\n    if (v == null) {\r\n      return\r\n    }\r\n    switch (field.definition.tagType) {\r\n      case TagType.RawData: {\r\n        object[name] = Buffer.from(v, 'utf8')\r\n        break\r\n      }\r\n\r\n      case TagType.UtcTimestamp:\r\n        const m = moment(v)\r\n        const d = m.toDate()\r\n        object[name] = d\r\n        break\r\n\r\n      case TagType.UtcDateOnly: {\r\n        const m = moment(v)\r\n        object[name] = m.toDate()\r\n        break\r\n      }\r\n\r\n      case TagType.UtcTimeOnly: {\r\n        const m = moment(v)\r\n        object[name] = m.toDate()\r\n        break\r\n      }\r\n\r\n      case TagType.LocalDate: {\r\n        const m = moment(v)\r\n        object[name] = m.toDate()\r\n        break\r\n      }\r\n\r\n      case TagType.Float: {\r\n        object[name] = parseFloat(v)\r\n        break\r\n      }\r\n\r\n      case TagType.Int:\r\n      case TagType.Length: {\r\n        object[name] = parseInt(v, 10)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  public fromJson (fileName: string, msgType: string): ILooseObject {\r\n    const msg: ILooseObject = require(fileName)\r\n    const def: MessageDefinition = this.definitions.message.get(msgType)\r\n    if (!def) {\r\n      return msg\r\n    }\r\n    if (msg.Batch) {\r\n      msg.Batch.forEach((m: ILooseObject) => {\r\n        this.patchJsonFields(def, m)\r\n      })\r\n    } else {\r\n      this.patchJsonFields(def, msg)\r\n    }\r\n    return msg\r\n  }\r\n\r\n  public patchJsonFields (set: ContainedFieldSet, object: ILooseObject): void {\r\n    if (!object) {\r\n      return\r\n    }\r\n\r\n    const dispatcher: IFieldDispatcher = {\r\n      simple: (field: ContainedSimpleField) => JsonHelper.patchSimple(object, field),\r\n      group: (gf: ContainedGroupField) => this.patchGroup(object, gf),\r\n      component: (cf: ContainedComponentField) => this.patchComponent(object, cf)\r\n    }\r\n\r\n    dispatchFields(set.localAttribute, dispatcher)\r\n    dispatchFields(set.fields, dispatcher)\r\n  }\r\n\r\n  private patchComponent (object: ILooseObject, cf: ContainedComponentField) {\r\n    const c = object[cf.name] || object[cf.definition.name]\r\n    if (c) {\r\n      this.patchJsonFields(cf.definition, c)\r\n    }\r\n  }\r\n\r\n  private patchGroup (object: ILooseObject, gf: ContainedGroupField) {\r\n    const arr: ILooseObject[] = object[gf.definition.name] || object[gf.name]\r\n    if (arr) {\r\n      arr.forEach((o) => {\r\n        this.patchJsonFields(gf.definition, o)\r\n      })\r\n    }\r\n  }\r\n}\r\n"]}