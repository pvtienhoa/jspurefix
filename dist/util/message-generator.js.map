{"version":3,"file":"message-generator.js","sourceRoot":"","sources":["../../src/util/message-generator.ts"],"names":[],"mappings":"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","sourcesContent":["import { TagType } from '../buffer'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { ContainedComponentField, ContainedGroupField, ContainedFieldSet, ContainedSimpleField, FixDefinitions, MessageDefinition, SimpleFieldDefinition, reduceSet } from '../dictionary'\r\n\r\nexport class MessageGenerator {\r\n  private word: number = 0\r\n  private length: number = 0\r\n\r\n  constructor (public readonly words: string[], public readonly definitions: FixDefinitions) {\r\n  }\r\n\r\n  public static getRandomEnum (field: SimpleFieldDefinition) {\r\n    const tagType: TagType = field.tagType\r\n    const keys: string[] = field.enums.keys()\r\n    const choice: string = keys[Math.floor(Math.random() * keys.length)]\r\n    switch (tagType) {\r\n      case TagType.Int: {\r\n        return parseInt(choice, 10)\r\n      }\r\n      case TagType.Float: {\r\n        return parseFloat(choice)\r\n      }\r\n      case TagType.Boolean: {\r\n        return choice === 'Y'\r\n      }\r\n      default: {\r\n        return choice\r\n      }\r\n    }\r\n  }\r\n\r\n  private static randomIntFromInterval (min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n\r\n  private static makeRandomString (len: number): string {\r\n    let text: string = ''\r\n    const possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n\r\n    for (let i: number = 0; i < len; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n\r\n    return text\r\n  }\r\n\r\n  private static makeBuffer (len: number): Buffer {\r\n    return Buffer.from(MessageGenerator.makeRandomString(len))\r\n  }\r\n\r\n  public generate (msgType: string, density?: number, repeatGroups: boolean = true): ILooseObject {\r\n    if (!density) {\r\n      density = 1.0\r\n    }\r\n    density = Math.max(0.2, density)\r\n    density = Math.min(1.0, density)\r\n    const def: MessageDefinition = this.definitions.message.get(msgType)\r\n    if (!def) {\r\n      throw new Error(`definitions do not contain type ${msgType}`)\r\n    }\r\n    return this.toObject(def, density, repeatGroups)\r\n  }\r\n\r\n  private toObject (set: ContainedFieldSet, density: number, repeatGroups: boolean): ILooseObject {\r\n    return reduceSet<ILooseObject>(set, {\r\n      simple: (a: ILooseObject, sf: ContainedSimpleField) => {\r\n        const tag: number = sf.definition.tag\r\n        let include = tag === set.firstSimple.definition.tag || this.length > 0 || Math.random() <= density\r\n        if (include) {\r\n          const val: any = sf.definition.isEnum() ? MessageGenerator.getRandomEnum(sf.definition) : this.createSimple(sf)\r\n          if (val != null) {\r\n            a[sf.name] = val\r\n          }\r\n        }\r\n      },\r\n      component: (a: ILooseObject, cf: ContainedComponentField) => {\r\n        if (cf.name !== 'StandardHeader' && cf.name !== 'StandardTrailer') {\r\n          a[cf.name] = this.toObject(cf.definition, density, repeatGroups)\r\n        }\r\n      },\r\n      group: (a: ILooseObject, gf: ContainedGroupField) => {\r\n        if (repeatGroups) {\r\n          const numberGroups: number = MessageGenerator.randomIntFromInterval(1, 3)\r\n          const arr: ILooseObject[] = new Array(numberGroups)\r\n          a[gf.name] = arr\r\n          for (let j: number = 0; j < numberGroups; ++j) {\r\n            arr[j] = this.toObject(gf.definition, density, repeatGroups)\r\n          }\r\n        }\r\n      }\r\n    }, {})\r\n  }\r\n\r\n  private createSimple (field: ContainedSimpleField): any {\r\n    const tagType: TagType = field.definition.tagType\r\n    switch (tagType) {\r\n\r\n      case TagType.String: {\r\n        return this.nextString()\r\n      }\r\n\r\n      case TagType.Float: {\r\n        this.length = 0\r\n        const sign = MessageGenerator.randomIntFromInterval(1, 10) <= 5 ? 1 : -1\r\n        const num = sign * MessageGenerator.randomIntFromInterval(1, 100000)\r\n        const raised = MessageGenerator.randomIntFromInterval(1, 8)\r\n        const r = num * Math.pow(10, -1 * raised)\r\n        // console.log(`sign = ${sign} num = ${num} raised = ${raised} r = ${r} ret = ${ret}`)\r\n        return Math.round(r * 1e7) / 1e7\r\n      }\r\n\r\n      case TagType.Int: {\r\n        this.length = 0\r\n        return MessageGenerator.randomIntFromInterval(1, 100000)\r\n      }\r\n\r\n      case TagType.Length: {\r\n        this.length = MessageGenerator.randomIntFromInterval(5, 20)\r\n        return this.length\r\n      }\r\n\r\n      case TagType.Boolean: {\r\n        this.length = 0\r\n        return MessageGenerator.randomIntFromInterval(1, 2) === 1\r\n      }\r\n\r\n      case TagType.UtcDateOnly: {\r\n        this.length = 0\r\n        const now: Date = new Date()\r\n        return new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()\r\n                    , 0, 0, 0, 0))\r\n      }\r\n\r\n      case TagType.UtcTimeOnly: {\r\n        this.length = 0\r\n        const s: Date = new Date()\r\n        return new Date(Date.UTC(0, 0, 0, s.getUTCHours(), s.getUTCMinutes(),\r\n                    s.getUTCSeconds(), s.getUTCMilliseconds()))\r\n      }\r\n\r\n      case TagType.UtcTimestamp: {\r\n        this.length = 0\r\n        const now: Date = new Date()\r\n        return new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),\r\n                    now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()))\r\n      }\r\n\r\n      case TagType.LocalDate: {\r\n        const now = new Date()\r\n        return new Date(now.getFullYear(), now.getMonth(), now.getDate()\r\n          , 0, 0, 0, 0)\r\n      }\r\n\r\n      case TagType.RawData: {\r\n        const length = this.length\r\n        this.length = 0\r\n        return length > 0 ? MessageGenerator.makeBuffer(length) : null\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`cannot manage type ${tagType}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  private nextString (): string {\r\n    const words: string[] = this.words\r\n    const w: string = words[this.word++]\r\n    if (this.word === words.length) {\r\n      this.word = 0\r\n    }\r\n    return w\r\n  }\r\n}\r\n"]}