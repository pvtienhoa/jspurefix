{"version":3,"file":"structure.js","sourceRoot":"","sources":["../../src/buffer/structure.ts"],"names":[],"mappings":";;AAEA,uDAAkD;AAGlD,MAAa,SAAS;IAGpB,YAA6B,IAAU,EACV,QAA8B;QAD9B,SAAI,GAAJ,IAAI,CAAM;QACV,aAAQ,GAAR,QAAQ,CAAsB;QAH3C,WAAM,GAAiB,IAAI,CAAA;QAIzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;IAClC,CAAC;IAEM,GAAG;QAER,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IAChD,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAqB,EAAE,EAAE,CAAC,gCAAc,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1F,CAAC;IAEM,oBAAoB,CAAE,IAAY,EAAE,OAA2B;QACpE,MAAM,GAAG,GAA8C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACxE,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,CAAA;SACZ;QACD,IAAI,GAAG,GAAuB,IAAI,CAAA;QAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,QAAQ,GAAuB,GAAG,CAAA;YACxC,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAA;SACnD;aAAM;YACL,KAAK,MAAM,QAAQ,IAAI,GAAG,EAAE;gBAC1B,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAA;gBAClD,IAAI,GAAG,EAAE;oBACP,MAAK;iBACN;aACF;SACF;QACD,OAAO,GAAG,CAAA;IACZ,CAAC;IAEM,WAAW,CAAE,OAA4B;QAC9C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAe,EAAE,OAA2B,EAAE,EAAE;YAC3E,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACzC,OAAO,CAAC,CAAA;aACT;YACD,MAAM,IAAI,GAAW,OAAO,CAAC,IAAI,CAAA;YACjC,MAAM,MAAM,GAA8C,CAAC,CAAC,IAAI,CAAC,CAAA;YACjE,IAAI,CAAC,MAAM,EAAE;gBACX,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,CAAA;aAClB;iBAAM;gBACL,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAC1B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;iBAC5B;qBAAM;oBACL,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,OAAO,CAAA;iBAChC;aACF;YACD,OAAO,CAAC,CAAA;QACV,CAAC,EAAE,EAAE,CAAC,CAAA;IACR,CAAC;CACF;AAxDD,8BAwDC","sourcesContent":["import { ILooseObject } from '../collections/collection'\r\nimport { SegmentDescription } from './segment-description'\r\nimport { SegmentSummary } from './segment-summary'\r\nimport { Tags } from './tags'\r\n\r\nexport class Structure {\r\n  public readonly layout: ILooseObject = null\r\n\r\n  constructor (public readonly tags: Tags,\r\n               public readonly segments: SegmentDescription[]) {\r\n    this.layout = this.boundLayout()\r\n  }\r\n\r\n  public msg (): SegmentDescription {\r\n        // trailer = -1, msg = -2\r\n    return this.segments[this.segments.length - 2]\r\n  }\r\n\r\n  public summary (): SegmentSummary[] {\r\n    return this.segments.map(((s: SegmentDescription) => SegmentSummary.fromDescription(s)))\r\n  }\r\n\r\n  public firstContainedWithin (name: string, segment: SegmentDescription): SegmentDescription {\r\n    const all: SegmentDescription | SegmentDescription[] = this.layout[name]\r\n    if (!all) {\r\n      return null\r\n    }\r\n    let ret: SegmentDescription = null\r\n    if (!Array.isArray(all)) {\r\n      const instance: SegmentDescription = all\r\n      ret = segment.contains(instance) ? instance : null\r\n    } else {\r\n      for (const instance of all) {\r\n        ret = segment.contains(instance) ? instance : null\r\n        if (ret) {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return ret\r\n  }\r\n\r\n  public boundLayout (segment?: SegmentDescription): ILooseObject {\r\n    return this.segments.reduce((a: ILooseObject, current: SegmentDescription) => {\r\n      if (segment && !segment.contains(current)) {\r\n        return a\r\n      }\r\n      const name: string = current.name\r\n      const member: SegmentDescription | SegmentDescription[] = a[name]\r\n      if (!member) {\r\n        a[name] = current\r\n      } else {\r\n        if (!Array.isArray(member)) {\r\n          a[name] = [member, current]\r\n        } else {\r\n          member[member.length] = current\r\n        }\r\n      }\r\n      return a\r\n    }, {})\r\n  }\r\n}\r\n"]}