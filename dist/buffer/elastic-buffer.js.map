{"version":3,"file":"elastic-buffer.js","sourceRoot":"","sources":["../../src/buffer/elastic-buffer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsciiChars } from './ascii-chars'\r\n\r\nexport class ElasticBuffer {\r\n  private buffer: Buffer\r\n  private ptr: number = 0\r\n  private stretched: number\r\n\r\n  constructor (public readonly size: number = 6 * 1024, public readonly returnTo: number = 6 * 1024) {\r\n    this.size = Math.max(1, this.size)\r\n    this.buffer = Buffer.allocUnsafe(this.size)\r\n    this.returnTo = Math.max(this.size, this.returnTo)\r\n    this.stretched = this.size\r\n  }\r\n\r\n  private static precisionRound (n: number, precision: number): number {\r\n    const factor: number = Math.pow(10, precision)\r\n    return Math.round(n * factor) / factor\r\n  }\r\n\r\n  private static HowManyDigits (v: number): number {\r\n    v = Math.abs(v)\r\n    let digits: number = 0\r\n    let w: number = v\r\n    while (w > 0) {\r\n      ++digits\r\n      w = Math.floor(w / 10)\r\n    }\r\n    return Math.max(digits, 1)\r\n  }\r\n\r\n  public currentSize (): number {\r\n    return this.stretched\r\n  }\r\n\r\n  public getPos (): number {\r\n    return this.ptr\r\n  }\r\n\r\n  public get (pos: number): number {\r\n    return this.buffer[pos]\r\n  }\r\n\r\n  public writeBoolean (v: boolean): number {\r\n    this.writeChar(v ? AsciiChars.Y : AsciiChars.N)\r\n    return this.ptr\r\n  }\r\n\r\n  public switchChar (c: number): number {\r\n    this.buffer[this.ptr - 1] = c\r\n    return this.ptr\r\n  }\r\n\r\n  public saveChar (c: number): number {\r\n    this.buffer[this.ptr++] = c\r\n    return this.ptr\r\n  }\r\n\r\n  public writeChar (c: number): number {\r\n    if (c > 255) throw new Error(`can't write ${c} to a byte`)\r\n    this.checkGrowBuffer(1)\r\n    this.buffer[this.ptr++] = c\r\n    return this.ptr\r\n  }\r\n\r\n  public writeString (s: string): number {\r\n    const begin = this.ptr\r\n    this.checkGrowBuffer(s.length)\r\n    const buffer = this.buffer\r\n    this.ptr += buffer.write(s, begin, s.length, 'ascii')\r\n    return this.ptr\r\n  }\r\n\r\n  public writeBuffer (v: Buffer): number {\r\n    const begin = this.ptr\r\n    this.checkGrowBuffer(v.length)\r\n    const buffer = this.buffer\r\n    const srcLen: number = v.length\r\n    this.ptr += v.copy(buffer, begin, 0, srcLen)\r\n    return this.ptr\r\n  }\r\n\r\n  public writeWholeNumber (n: number): number {\r\n    const digits: number = ElasticBuffer.HowManyDigits(n)\r\n    let reserve = digits\r\n    const sign: number = Math.sign(n)\r\n    let p: number = Math.pow(10, digits - 1)\r\n    let v: number = Math.abs(n)\r\n    if (sign < 0) {\r\n      reserve++\r\n    }\r\n    this.checkGrowBuffer(reserve)\r\n    const buffer = this.buffer\r\n    if (sign < 0) {\r\n      buffer[this.ptr++] = AsciiChars.Minus\r\n    }\r\n    while (p >= 1) {\r\n      const d: number = Math.floor(v / p)\r\n      v -= d * p\r\n      p /= 10\r\n      buffer[this.ptr++] = AsciiChars.Zero + d\r\n    }\r\n\r\n    return this.ptr\r\n  }\r\n\r\n  public writeNumber (v: number, places: number = 13) {\r\n    const rounded: number = Math.floor(v)\r\n    const fraction: number = ElasticBuffer.precisionRound(v - rounded, places)\r\n    if (fraction === 0) {\r\n      // integer\r\n      return this.writeWholeNumber(v)\r\n    } else {\r\n      const math = require('mathjs')\r\n      // decimal with fraction turn to string\r\n      const s: string = math.format(v, { notation: 'fixed' })\r\n      return this.writeString(s)\r\n    }\r\n  }\r\n\r\n  public reset (): boolean {\r\n    this.ptr = 0\r\n    const shrink = this.stretched > this.returnTo\r\n    if (shrink) {\r\n      this.buffer = Buffer.allocUnsafe(this.returnTo)\r\n      this.stretched = this.size\r\n    }\r\n    return shrink\r\n  }\r\n\r\n  public slice (): Buffer {\r\n    return this.buffer.slice(0, this.ptr)\r\n  }\r\n\r\n  public clone (): ElasticBuffer {\r\n    const cloned = new ElasticBuffer(this.ptr)\r\n    this.buffer.copy(cloned.buffer, 0, 0, this.ptr)\r\n    return cloned\r\n  }\r\n\r\n  public writePaddedHundreds (v: number): number {\r\n    if (v > 999) throw new Error(`can't write ${v} as hundreds padding`)\r\n    this.checkGrowBuffer(3)\r\n    const buffer = this.buffer\r\n    const zero: number = AsciiChars.Zero\r\n    const units: number = v % 10 + zero\r\n    v = v / 10\r\n    const tens: number = v % 10 + zero\r\n    v = v / 10\r\n    buffer[this.ptr++] = v % 10 + zero\r\n    buffer[this.ptr++] = tens\r\n    buffer[this.ptr++] = units\r\n    return this.ptr\r\n  }\r\n\r\n  public writePaddedTensUnits (v: number): number {\r\n    if (v > 99) throw new Error(`can't write ${v} as hundreds padding`)\r\n    this.checkGrowBuffer(2)\r\n    const buffer = this.buffer\r\n    const zero: number = AsciiChars.Zero\r\n    const units: number = v % 10 + zero\r\n    v = v / 10\r\n    buffer[this.ptr++] = v % 10 + zero\r\n    buffer[this.ptr++] = units\r\n    return this.ptr\r\n  }\r\n\r\n  public patchPaddedNumberAtPos (ptr: number, numToWrite: number, padding: number): void {\r\n    let digits: number = ElasticBuffer.HowManyDigits(numToWrite)\r\n    const saved: number = this.ptr\r\n    this.ptr = ptr\r\n    const buffer = this.buffer\r\n    while (digits++ < padding) {\r\n      buffer[this.ptr++] = AsciiChars.Zero\r\n    }\r\n    this.writeWholeNumber(numToWrite)\r\n    this.ptr = saved\r\n  }\r\n\r\n  public toString (ptr: number = this.ptr): string {\r\n    return this.buffer.toString('ascii', 0, ptr)\r\n  }\r\n\r\n  public checksum (ptr: number = this.ptr): number {\r\n    const cks: number = this.sum(ptr)\r\n    return cks % 256\r\n  }\r\n\r\n  public sum (ptr: number = this.ptr): number {\r\n    let total: number = 0\r\n    ptr = Math.min(ptr, this.ptr)\r\n    const buffer = this.buffer\r\n    for (let idx: number = 0; idx < ptr; idx++) {\r\n      total += buffer[idx]\r\n    }\r\n    return total\r\n  }\r\n\r\n  public getWholeNumber (start: number, vend: number): number {\r\n    const buffer = this.buffer\r\n    let sign = 1\r\n    let raised = vend - start\r\n    switch (buffer[start]) {\r\n      case AsciiChars.Minus: {\r\n        --raised\r\n        sign = -1\r\n        ++start\r\n        break\r\n      }\r\n      case AsciiChars.Plus: {\r\n        --raised\r\n        ++start\r\n        break\r\n      }\r\n    }\r\n    let i: number = Math.pow(10, raised)\r\n    let num: number = 0\r\n    let scan: number = start\r\n\r\n    while (scan <= vend) {\r\n      const p: number = buffer[scan++]\r\n      const d: number = p - AsciiChars.Zero\r\n      num += d * i\r\n      i /= 10\r\n    }\r\n\r\n    return num * sign\r\n  }\r\n\r\n  public getString (start: number, end: number): string {\r\n    return this.buffer.toString('ascii', start, end)\r\n  }\r\n\r\n  public getBuffer (start: number, end: number): Buffer {\r\n    return this.buffer.slice(start, end)\r\n  }\r\n\r\n  public getBoolean (start: number): boolean {\r\n    const b: number = this.buffer[start]\r\n    return b === AsciiChars.Y\r\n  }\r\n\r\n  public getFloat (start: number, vend: number): number {\r\n    let n: number = 0\r\n    let digits: number = 0\r\n    let dotPosition: number = 0\r\n    const buffer = this.buffer\r\n    let sign = 1\r\n    switch (buffer[start]) {\r\n      case AsciiChars.Minus: {\r\n        sign = -1\r\n        start++\r\n        break\r\n      }\r\n      case AsciiChars.Plus: {\r\n        start++\r\n        break\r\n      }\r\n    }\r\n    const len = vend - start\r\n    let i: number = Math.pow(10, len - 1)\r\n    for (let j: number = start; j <= vend; ++j) {\r\n      const p: number = buffer[j]\r\n      if (p >= AsciiChars.Zero && p <= AsciiChars.Nine) {\r\n        const d: number = p - AsciiChars.Zero\r\n        ++digits\r\n        n += d * i\r\n        i /= 10\r\n      } else if (p === AsciiChars.Dot) {\r\n        if (dotPosition > 0) {\r\n          return null\r\n        }\r\n        dotPosition = j - start\r\n      } else if (digits > 0) {\r\n        return null\r\n      }\r\n    }\r\n    const power: number = dotPosition === 0 ? 0 : len - dotPosition\r\n    const raised = dotPosition === 0 ? 10 : Math.pow(10, -1 * power)\r\n    const round = dotPosition === 0 ? 1 : Math.pow(10, power)\r\n    const val = n * raised * sign\r\n    return Math.round(val * round) / round\r\n  }\r\n\r\n  public checkGrowBuffer (required: number): void {\r\n    let buffer = this.buffer\r\n    let size = buffer.length\r\n    const ptr = this.ptr\r\n    if (size - ptr >= required) {\r\n      return\r\n    }\r\n    while (size - ptr < required) {\r\n      size *= 2\r\n    }\r\n    const old = buffer\r\n    buffer = Buffer.allocUnsafe(size)\r\n    old.copy(buffer, 0, 0, this.ptr)\r\n    this.buffer = buffer\r\n    this.stretched = size\r\n  }\r\n}\r\n"]}