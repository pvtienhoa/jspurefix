{"version":3,"file":"fixml-view.js","sourceRoot":"","sources":["../../../src/buffer/fixml/fixml-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { MsgView } from '../msg-view'\r\nimport { SimpleFieldDefinition } from '../../dictionary'\r\nimport { Structure } from '../structure'\r\nimport { SegmentDescription } from '../segment-description'\r\nimport { TagType } from '../tags'\r\nimport { AsciiChars } from '../ascii-chars'\r\nimport * as moment from 'moment'\r\n\r\nexport class FixmlView extends MsgView {\r\n\r\n  constructor (public readonly segment: SegmentDescription,\r\n               public readonly values: string[],\r\n               public readonly structure: Structure) {\r\n    super(segment, structure)\r\n  }\r\n\r\n  private static getTimestamp (s: string, useUtc: boolean): Date {\r\n    let m = moment(s)\r\n    return useUtc ? m.utc(true).toDate() : m.toDate()\r\n  }\r\n\r\n  // 01:00:08.201\r\n  private static getTimeOnly (s: string, useUtc: boolean): Date {\r\n    let m = moment(s, [moment.HTML5_FMT.TIME_MS, moment.HTML5_FMT.TIME_SECONDS])\r\n    return useUtc ? m.utc(true).toDate() : m.toDate()\r\n  }\r\n\r\n  private static getDateOnly (s: string, useUtc: boolean): Date {\r\n    let m = moment(s)\r\n    let d: Date\r\n    if (useUtc) {\r\n      d = m.utc(true).toDate()\r\n    } else {\r\n      d = m.toDate()\r\n    }\r\n    return d\r\n  }\r\n\r\n  // if the view is to be kept beyond the event on which it arrives, must be cloned\r\n  public clone (): MsgView {\r\n    return new FixmlView(this.segment, this.values, new Structure(this.structure.tags.clone(), this.structure.segments))\r\n  }\r\n\r\n  public checksum (): number {\r\n    return 0\r\n  }\r\n\r\n  protected create (singleton: SegmentDescription) {\r\n    return new FixmlView(singleton,\r\n      this.values,\r\n      this.structure)\r\n  }\r\n\r\n  protected stringAtPosition (position: number): string {\r\n    if (position < 0 || position >= this.values.length) {\r\n      throw new Error(`illegal position ${position}`)\r\n    }\r\n    return this.values[position]\r\n  }\r\n\r\n  protected toTyped (field: SimpleFieldDefinition): any {\r\n    const position: number = this.getPosition(field.tag)\r\n    if (position >= 0) {\r\n      const s: string = this.values[position]\r\n      switch (field.tagType) {\r\n        case TagType.String : {\r\n          return this.stringAtPosition(position)\r\n        }\r\n\r\n        case TagType.Int:\r\n        case TagType.Length: {\r\n          return parseInt(s, 10)\r\n        }\r\n\r\n        case TagType.Float: {\r\n          return parseFloat(s)\r\n        }\r\n\r\n        case TagType.Boolean: {\r\n          return s && s.length > 0 && AsciiChars.firstChar(s) === AsciiChars.Y\r\n        }\r\n\r\n        case TagType.UtcTimestamp: {\r\n          // 20150417-01:00:08.201\r\n          return FixmlView.getTimestamp(s, true)\r\n        }\r\n        // 01:00:08.201\r\n        case TagType.UtcTimeOnly: {\r\n          return FixmlView.getTimeOnly(s, true)\r\n        }\r\n\r\n        case TagType.UtcDateOnly: {\r\n          return FixmlView.getDateOnly(s, true)\r\n        }\r\n\r\n        case TagType.LocalDate: {\r\n          return FixmlView.getDateOnly(s, true)\r\n        }\r\n\r\n        case TagType.RawData: {\r\n          return Buffer.alloc(s.length, s, 'utf8')\r\n        }\r\n\r\n        default: {\r\n          return this.stringAtPosition(position)\r\n        }\r\n      }\r\n    }\r\n    return this.stringAtPosition(position)\r\n  }\r\n}\r\n"]}