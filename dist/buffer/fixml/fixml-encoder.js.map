{"version":3,"file":"fixml-encoder.js","sourceRoot":"","sources":["../../../src/buffer/fixml/fixml-encoder.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILooseObject } from '../../collections/collection'\r\nimport { ContainedFieldSet, ContainedField, ContainedGroupField, ContainedComponentField, ContainedSimpleField, FixDefinitions, dispatchFields, IFieldDispatcher } from '../../dictionary'\r\nimport { AsciiChars } from '../ascii-chars'\r\nimport { TagType } from '../tags'\r\nimport { MsgEncoder } from '../msg-encoder'\r\nimport { ElasticBuffer } from '../elastic-buffer'\r\nimport moment = require('moment')\r\n\r\ninterface IPopulatedAttributes {\r\n  fields: ContainedSimpleField[],\r\n  values: any[]\r\n}\r\n\r\nexport class FixmlEncoder extends MsgEncoder {\r\n  public attributePerLine: boolean = false\r\n  public readonly eol: string = require('os').EOL\r\n  private readonly beginDoc: string = `<FIXML>${this.eol}`\r\n  private readonly endDoc: string = '</FIXML>'\r\n  private readonly beginBatch: string = `<Batch>${this.eol}`\r\n  private readonly endBatch: string = '</Batch>'\r\n\r\n  public constructor (public readonly buffer: ElasticBuffer, public readonly definitions: FixDefinitions) {\r\n    super(definitions)\r\n  }\r\n\r\n  private static asString (sf: ContainedSimpleField, v: any): string {\r\n    switch (sf.definition.tagType) {\r\n      case TagType.String: {\r\n        return v as string\r\n      }\r\n\r\n      case TagType.Int:\r\n      case TagType.Float:\r\n      case TagType.Length: {\r\n        return v.toString()\r\n      }\r\n\r\n      case TagType.Boolean: {\r\n        return v ? 'Y' : 'N'\r\n      }\r\n\r\n      case TagType.UtcTimestamp: {\r\n        const d: Date = v as Date\r\n        return moment(d).utc().format('YYYY-MM-DDTHH:mm:ss.SSS')\r\n      }\r\n\r\n      case TagType.UtcTimeOnly: {\r\n        const d: Date = v as Date\r\n        return moment.utc(d).format('HH:mm:ss.SSS')\r\n      }\r\n\r\n      case TagType.LocalDate: {\r\n        const d: Date = v as Date\r\n        return moment(d).format('YYYY-MM-DD')\r\n      }\r\n\r\n      case TagType.UtcDateOnly: {\r\n        const d: Date = v as Date\r\n        return moment(d).utc(true).format('YYYY-MM-DD')\r\n      }\r\n    }\r\n  }\r\n\r\n  public encodeSet (o: ILooseObject, set: ContainedFieldSet): void {\r\n    const batch: ILooseObject[] = o.Batch\r\n    const toWrite: ILooseObject[] = batch || [o]\r\n    let depth = batch ? 1 : 0\r\n    const buffer = this.buffer\r\n    const begin = this.beginDoc\r\n    const indent: string = '\\t'\r\n    const endBatch = batch ? this.endBatch : ''\r\n    const eol = this.eol\r\n    buffer.reset()\r\n    buffer.writeString(begin)\r\n    if (batch) {\r\n      this.batchStart(o, set, depth)\r\n    }\r\n    toWrite.forEach((next: ILooseObject) => {\r\n      this.toXml(next, set.abbreviation, set, depth + 1)\r\n      buffer.writeString(eol)\r\n    })\r\n    if (batch) {\r\n      buffer.writeString(`${indent}${endBatch}`)\r\n    }\r\n\r\n    buffer.writeString(this.endDoc)\r\n  }\r\n\r\n  private batchStart (o: ILooseObject, set: ContainedFieldSet, depth: number) {\r\n    const buffer = this.buffer\r\n    const indent: string = '\\t'\r\n    const beginBatch = this.beginBatch\r\n    const hdr = o.StandardHeader\r\n    const eol = this.eol\r\n    buffer.writeString(`${indent}${beginBatch}`)\r\n    if (hdr) {\r\n      const h = set.fields[0] as ContainedComponentField\r\n      this.toXml(hdr, h.name, h.definition, depth + 1)\r\n      buffer.writeString(eol)\r\n    }\r\n  }\r\n\r\n  private toXml (o: ILooseObject, name: string, set: ContainedFieldSet, depth: number): void {\r\n\r\n    const buffer = this.buffer\r\n    const selfClose: string = '/>'\r\n    const close: string = '>'\r\n    const open: string = '<'\r\n    const indent: string = '\\t'.repeat(depth)\r\n    const newLine = this.eol\r\n    const fields: ContainedField[] = this.getPopulatedFields(set, o)\r\n    const eol: string = fields.length === 0 ? selfClose : close\r\n    buffer.writeString(`${indent}${open}`)\r\n    buffer.writeString(`${name} `)\r\n    this.attributes(o, set, depth, this.attributePerLine)\r\n    buffer.writeString(`${eol}`)\r\n    dispatchFields(fields, {\r\n      group: (g: ContainedGroupField) => this.complexGroup(o, g, depth),\r\n      component: (c: ContainedComponentField) => this.complexComponent(o, c, depth)\r\n    } as IFieldDispatcher)\r\n    if (fields.length) {\r\n      const end: string = `${newLine}${indent}</${name}>`\r\n      buffer.writeString(`${end}`)\r\n    }\r\n  }\r\n\r\n  private getPopulatedFields (set: ContainedFieldSet, o: ILooseObject): ContainedField[] {\r\n    const keys: string[] = Object.keys(o)\r\n    const fields: ContainedField[] = keys.reduce((a: ContainedField[], current: string) => {\r\n      const field: ContainedField = set.localNameToField.get(current)\r\n      if (field && !set.nameToLocalAttribute.containsKey(current)) {\r\n        a.push(field)\r\n      }\r\n      return a\r\n    }, [])\r\n    fields.sort((a: ContainedField, b: ContainedField) => a.position - b.position)\r\n    return fields\r\n  }\r\n\r\n  private encodeAttribute (name: string, val: string): void {\r\n    if (val == null) {\r\n      return\r\n    }\r\n    const buffer = this.buffer\r\n    buffer.writeString(name)\r\n    buffer.writeChar(AsciiChars.Equal)\r\n    buffer.writeChar(AsciiChars.Dq)\r\n    buffer.writeString(val)\r\n    buffer.writeChar(AsciiChars.Dq)\r\n  }\r\n\r\n  private attributes (o: ILooseObject, set: ContainedFieldSet, depth: number, attributePerLine: boolean): void {\r\n    const newLine = this.eol\r\n    const indent: string = '\\t'.repeat(depth + 1)\r\n    const attributes = set.localAttribute\r\n    const buffer = this.buffer\r\n    if (attributes.length && attributePerLine) {\r\n      buffer.writeString(newLine)\r\n      buffer.writeString(indent)\r\n    }\r\n    const populatedAttributes: IPopulatedAttributes = this.getPopulatedAttributes(o, attributes)\r\n    for (let a = 0; a < populatedAttributes.values.length; ++a) {\r\n      const last = a === populatedAttributes.values.length - 1\r\n      const f = populatedAttributes.fields[a]\r\n      if (a || this.attributePerLine) buffer.writeChar(AsciiChars.Space)\r\n      this.encodeAttribute(f.name, FixmlEncoder.asString(f, populatedAttributes.values[a]))\r\n      if (!last && attributePerLine) {\r\n        buffer.writeString(newLine)\r\n        buffer.writeString(indent)\r\n      }\r\n    }\r\n  }\r\n\r\n  private getPopulatedAttributes (o: ILooseObject, attributes: ContainedSimpleField[]): IPopulatedAttributes {\r\n    return attributes.reduce((a: IPopulatedAttributes, f: ContainedSimpleField) => {\r\n      let v: any = o[f.definition.name]\r\n      if (v == null) {\r\n        v = o[f.name]\r\n      }\r\n      if (v != null) {\r\n        a.values.push(v)\r\n        a.fields.push(f)\r\n      }\r\n      return a\r\n    }, {\r\n      values: [],\r\n      fields: []\r\n    } as IPopulatedAttributes)\r\n  }\r\n\r\n  private complexGroup (o: ILooseObject, field: ContainedField, depth: number) {\r\n    const gf: ContainedGroupField = field as ContainedGroupField\r\n    const elements: ILooseObject[] = o[gf.definition.name]\r\n    if (elements) {\r\n      if (Array.isArray(elements)) {\r\n        for (const e of elements) {\r\n          this.buffer.writeString(this.eol)\r\n          this.toXml(e, gf.name, gf.definition,depth + 1)\r\n        }\r\n      } else {\r\n        throw new Error(`expected array for member ${gf.definition.name}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  private complexComponent (o: ILooseObject, field: ContainedField, depth: number) {\r\n    const cf: ContainedComponentField = field as ContainedComponentField\r\n    const def = cf.definition\r\n    const instance: ILooseObject = o[def.name]\r\n    if (instance) {\r\n      this.buffer.writeString(this.eol)\r\n      this.toXml(instance, cf.name, def, depth + 1)\r\n    }\r\n  }\r\n}\r\n"]}