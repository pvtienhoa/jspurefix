{"version":3,"file":"msg-view.js","sourceRoot":"","sources":["../../src/buffer/msg-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { TagPos } from './tag-pos'\r\nimport { SegmentDescription } from './segment-description'\r\nimport { Structure } from './structure'\r\nimport { Dictionary } from '../collections'\r\nimport { Tags } from './tags'\r\nimport { ContainedGroupField, ContainedComponentField, ContainedField, ContainedFieldSet, ContainedSimpleField, SimpleFieldDefinition, GroupFieldDefinition, ITypeDispatcher, reduceSet, ContainedSetType } from '../dictionary'\r\nimport { ILooseObject } from '../collections/collection'\r\nimport { ElasticBuffer } from './elastic-buffer'\r\n\r\nexport abstract class MsgView {\r\n  protected sortedTagPosForwards: TagPos[]\r\n  protected sortedTagPosBackwards: TagPos[]\r\n\r\n  protected constructor (public readonly segment: SegmentDescription, public readonly structure: Structure) {\r\n  }\r\n\r\n  protected static asVerbose (field: SimpleFieldDefinition, val: string, i: number, count: number, tp: TagPos): string {\r\n    const newLine = require('os').EOL\r\n    let desc: string\r\n    let name: string\r\n    if (field) {\r\n      name = field.name || 'unknown'\r\n      if (field.isEnum()) {\r\n        desc = `${val}[${field.resolveEnum(val)}]${newLine}\\t${field.description || ''}${newLine}${newLine}`\r\n      } else {\r\n        desc = `${val}${newLine}t${field.description || ''}${newLine}${newLine}`\r\n      }\r\n    } else {\r\n      name = 'unknown'\r\n    }\r\n    return `[${i}] ${tp.tag} (${name}) = ${desc}`\r\n  }\r\n\r\n  protected static asToken (field: SimpleFieldDefinition, val: string, i: number, count: number, tp: TagPos): string {\r\n    const perLine: number = 2\r\n    const newLine = require('os').EOL\r\n    // [280] 814 (ApplQueueResolution) = 2[OverlayLast][281] 10 (CheckSum) = 80\r\n    let desc: string\r\n    let name: string\r\n    if (field) {\r\n      name = field.name || 'unknown'\r\n      if (field.isEnum()) {\r\n        desc = `${val}[${field.resolveEnum(val)}]`\r\n      } else {\r\n        desc = `${val}`\r\n      }\r\n    } else {\r\n      desc = `${val}`\r\n      name = 'unknown'\r\n    }\r\n    let delimiter: string\r\n    if (i === 1 || (i < count && i % perLine - 1 === 0)) {\r\n      delimiter = newLine\r\n    } else {\r\n      delimiter = i < count ? ', ' : ''\r\n    }\r\n    return `[${i}] ${tp.tag} (${name}) = ${desc}${delimiter}`\r\n  }\r\n\r\n  // return list of any tags parsed that are not valid\r\n  public invalid (): number[] {\r\n    const invalidTags: number[] = []\r\n    const set = this.segment.set\r\n    const tags = this.structure.tags\r\n    for (let i = 0; i < tags.nextTagPos; ++i) {\r\n      const tag = tags.tagPos[i].tag\r\n      if (tag <= 0 || !set.containedTag[tag]) {\r\n        invalidTags[invalidTags.length] = tag\r\n      }\r\n    }\r\n    return invalidTags\r\n  }\r\n\r\n  // list of tags that must be present\r\n  public missing (): number[] {\r\n    return this.missingRequired(this.segment.set, [])\r\n  }\r\n\r\n  public contains (tagOrName: number | string): boolean {\r\n    const tag: number = this.resolveTag(tagOrName)\r\n    const position: number = this.getPosition(tag)\r\n    return position >= 0\r\n  }\r\n\r\n  public getGroupInstance (i: number): MsgView {\r\n    const instance: SegmentDescription = this.segment.getInstance(i)\r\n    if (!instance) {\r\n      return null\r\n    }\r\n    return this.create(instance)\r\n  }\r\n\r\n  public getUndefined (): SegmentDescription | SegmentDescription[] {\r\n    return this.structure.layout['.undefined']\r\n  }\r\n\r\n  public undefinedForMsg (): string {\r\n    let msg: string = null\r\n    const undefinedTags = this.getUndefined()\r\n    if (undefinedTags) {\r\n      if (Array.isArray(undefinedTags)) {\r\n        msg = `undefined tags = ` + undefinedTags.map((e: SegmentDescription) => e.startTag.toString()).join(', ')\r\n      } else {\r\n        msg = `undefined tag = ${undefinedTags.startTag}`\r\n      }\r\n    }\r\n    return msg\r\n  }\r\n\r\n  public groupCount (): number {\r\n    const positions = this.segment.delimiterPositions\r\n    return positions ? positions.length : 0\r\n  }\r\n\r\n  public getString (tagOrName: number | string): string {\r\n    const tag: number = this.resolveTag(tagOrName)\r\n    if (tag == null) {\r\n      return null\r\n    }\r\n    const position: number = this.getPosition(tag)\r\n    if (position < 0) {\r\n      return null\r\n    }\r\n    return this.stringAtPosition(position)\r\n  }\r\n\r\n  public getStrings (tagOrName: number | string = -1): string[] {\r\n    if (tagOrName < 0) {\r\n      return this.allStrings()\r\n    }\r\n    const tag: number = this.resolveTag(tagOrName)\r\n    if (tag == null) {\r\n      return null\r\n    }\r\n    const positions: number[] = this.getPositions(tag)\r\n    if (positions == null) {\r\n      return null\r\n    }\r\n    return positions.map((position: number) => {\r\n      return this.stringAtPosition(position)\r\n    })\r\n  }\r\n\r\n  public getTyped (tagOrName: number | string): any {\r\n    const tag: number = this.resolveTag(tagOrName)\r\n    if (tag == null) {\r\n      return null\r\n    }\r\n    const field: SimpleFieldDefinition = this.structure.tags.definitions.tagToSimple[tag]\r\n    if (field == null) {\r\n      return null\r\n    }\r\n    return this.toTyped(field)\r\n  }\r\n\r\n  public getTypedTags (tagOrName: any[]): any[] {\r\n    return tagOrName.map((s) => this.getTyped(s))\r\n  }\r\n\r\n  public toObject (): any {\r\n    const segment: SegmentDescription = this.segment\r\n    if (segment.delimiterTag) {\r\n      switch (segment.set.type) {\r\n        case ContainedSetType.Group: {\r\n          return this.asInstances((segment.set as GroupFieldDefinition).name)\r\n        }\r\n        case ContainedSetType.Msg: {\r\n          // this is a batch of messages\r\n          const hdrView = this.getView('Hdr')\r\n          const batch: ILooseObject = {}\r\n          if (hdrView) {\r\n            batch[hdrView.segment.set.name] = hdrView.toObject()\r\n          }\r\n          batch[segment.name] = this.asInstances(segment.name)\r\n          return batch\r\n        }\r\n      }\r\n    }\r\n    return this.asLoose(segment.set)\r\n  }\r\n\r\n  public toString (): string {\r\n    return this.stringify(MsgView.asToken)\r\n  }\r\n\r\n  public toVerbose (): string {\r\n    return this.stringify(MsgView.asVerbose)\r\n  }\r\n\r\n  public toJson (): string {\r\n    return JSON.stringify(this.toObject(), null, 4)\r\n  }\r\n\r\n  public getView (name: string): MsgView {\r\n    const parts: string[] = name.split('.')\r\n    return parts.reduce((a: MsgView, current: string) => {\r\n      if (!a) {\r\n        return a\r\n      }\r\n      const structure = a.structure\r\n      const singleton: SegmentDescription = structure.firstContainedWithin(current, a.segment)\r\n      if (singleton) {\r\n        return a.create(singleton)\r\n      }\r\n      // is this a full name where abbreviation exists\r\n      const component: ContainedField = a.segment.set.localNameToField.get(current)\r\n      if (component) {\r\n        const abbreviated: SegmentDescription = structure.firstContainedWithin(component.name, a.segment)\r\n        if (abbreviated) {\r\n          return a.create(abbreviated)\r\n        }\r\n      }\r\n      return null\r\n    }, this as MsgView)\r\n  }\r\n\r\n  public abstract checksum (): number\r\n\r\n  public abstract clone (): MsgView\r\n\r\n  protected abstract create (singleton: SegmentDescription): MsgView\r\n\r\n  protected abstract stringAtPosition (position: number): string\r\n\r\n  protected abstract toTyped (field: SimpleFieldDefinition): any\r\n\r\n  protected resolveTag (tagOrName: number | string): number {\r\n    let tag: number\r\n    if (typeof(tagOrName) === 'string') {\r\n      let cf = this.segment.set.simple.get(tagOrName)\r\n      const f: SimpleFieldDefinition = cf ? cf.definition : this.structure.tags.definitions.simple.get(tagOrName)\r\n      if (f == null) {\r\n        return null\r\n      }\r\n      tag = f.tag\r\n    } else {\r\n      tag = tagOrName\r\n    }\r\n    return tag\r\n  }\r\n\r\n  // fetch all positions of a particular tag.\r\n  protected getPositions (tag: number): number[] {\r\n    const forwards: TagPos[] = this.sortedTagPosForwards\r\n    const backwards: TagPos[] = this.sortedTagPosBackwards\r\n    const position: number = this.binarySearch(tag)\r\n    if (position < 0) {\r\n      return null\r\n    }\r\n\r\n    const count: number = forwards.length\r\n    const last: number = count - 1\r\n    let end: number = position\r\n    while (end <= last) {\r\n      if (tag !== forwards[end].tag) {\r\n        break\r\n      }\r\n      ++end\r\n    }\r\n    // avoid backtracking over an array by scan forwards on a reversed copy\r\n    let start: number = last - position\r\n    while (start <= last) {\r\n      if (tag !== backwards[start].tag) {\r\n        break\r\n      }\r\n      ++start\r\n    }\r\n    const begin: number = last - (start - 1)\r\n    const len: number = end - begin\r\n    const positions: number[] = new Array(len)\r\n    for (let i: number = begin; i < end; ++i) {\r\n      positions[i - begin] = forwards[i].position\r\n    }\r\n    return positions\r\n  }\r\n\r\n  protected getPosition (tag: number): number {\r\n    const pos: number = this.binarySearch(tag)\r\n    if (pos >= 0) {\r\n      return this.sortedTagPosForwards[pos].position\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n\r\n  private allStrings (): string[] {\r\n    const segment: SegmentDescription = this.segment\r\n    const range: number[] = []\r\n    for (let i: number = segment.startPosition; i <= segment.endPosition; ++i) {\r\n      range[range.length] = i\r\n    }\r\n    return range.map((i: number) => this.stringAtPosition(i))\r\n  }\r\n\r\n  private asInstances (name: string): ILooseObject[] {\r\n    const groupView: MsgView = this.getView(name)\r\n    if (groupView == null) {\r\n      return\r\n    }\r\n    const groupArray: ILooseObject[] = new Array(groupView.groupCount())\r\n    const count: number = groupView.groupCount()\r\n    for (let j: number = 0; j < count; ++j) {\r\n      const instance: MsgView = groupView.getGroupInstance(j)\r\n      groupArray[j] = instance.toObject()\r\n    }\r\n    return groupArray\r\n  }\r\n\r\n  private asLoose (def: ContainedFieldSet): ILooseObject {\r\n    return reduceSet<ILooseObject>(def, {\r\n      group: (a: ILooseObject, field: ContainedGroupField) => this.asLooseGroup(a, field),\r\n      simple: (a: ILooseObject, field: ContainedSimpleField) => this.asLooseSimple(a, field),\r\n      component: (a: ILooseObject, field: ContainedComponentField) => this.asLooseComponent(a, field)\r\n    } as ITypeDispatcher<ILooseObject>, def.localAttribute.reduce((a: ILooseObject, sf: ContainedSimpleField) => {\r\n      const def = sf.definition\r\n      const position: number = this.getPosition(def.tag)\r\n      if (position >= 0) {\r\n        a[def.name] = this.toTyped(def)\r\n      }\r\n      return a\r\n    }, {} as ILooseObject))\r\n  }\r\n\r\n  private missingRequired (def: ContainedFieldSet, tags: number []): number[] {\r\n    return reduceSet<number[]>(def, {\r\n      group: (a: number[], field: ContainedGroupField) => this.missingGroup(def, field, a),\r\n      simple: (a: number[], field: ContainedSimpleField) => this.missingSimple(field, a),\r\n      component: (a: number[], field: ContainedComponentField) => this.missingComponent(field, a)\r\n    } as ITypeDispatcher<number[]>, tags)\r\n  }\r\n\r\n  private missingSimple (sf: ContainedSimpleField, a: number[]) {\r\n    if (sf.required && this.getPosition(sf.definition.tag) < 0) {\r\n      a.push(sf.definition.tag)\r\n    }\r\n  }\r\n\r\n  private missingComponent (cf: ContainedComponentField, a: number[]) {\r\n    const view: MsgView = this.getView(cf.name)\r\n    if (view) {\r\n      view.missingRequired(cf.definition, a)\r\n    }\r\n  }\r\n\r\n  private missingGroup (def: ContainedFieldSet, gf: ContainedGroupField, tags: number []) {\r\n    const name = gf.definition.noOfField ? gf.definition.noOfField.name : def.name\r\n    const groupView: MsgView = this.getView(name) || this.getView(gf.definition.name)\r\n    if (groupView == null) {\r\n      return\r\n    }\r\n    const count: number = groupView.groupCount()\r\n    for (let j: number = 0; j < count; ++j) {\r\n      const instance: MsgView = groupView.getGroupInstance(j)\r\n      instance.missingRequired(gf.definition, tags)\r\n    }\r\n  }\r\n\r\n  private asLooseComponent (a: ILooseObject, cf: ContainedComponentField) {\r\n    const view: MsgView = this.getView(cf.name)\r\n    if (view) {\r\n      const component = view.toObject()\r\n      if (component) {\r\n        a[cf.definition.name] = component\r\n      }\r\n    }\r\n  }\r\n\r\n  private asLooseSimple (a: ILooseObject, sf: ContainedSimpleField) {\r\n    const def = sf.definition\r\n    const position: number = this.getPosition(def.tag)\r\n    if (position >= 0) {\r\n      const asSimple: any = this.toTyped(def)\r\n      if (asSimple != null) { // beware, may be false value\r\n        a[sf.name] = asSimple\r\n      }\r\n    }\r\n  }\r\n\r\n  private asLooseGroup (a: ILooseObject, gf: ContainedGroupField) {\r\n    const def = gf.definition\r\n    const name = def.noOfField ? def.noOfField.name : def.name\r\n    const instances: ILooseObject = this.asInstances(name) || this.asInstances(def.name)\r\n    if (instances) {\r\n      a[def.name] = instances\r\n    }\r\n  }\r\n\r\n  private binarySearch (tag: number): number {\r\n    let forwards = this.sortedTagPosForwards\r\n    if (!forwards) {\r\n      const segment = this.segment\r\n      forwards = this.sortedTagPosForwards = this.structure.tags.tagPos.slice(segment.startPosition, segment.endPosition + 1)\r\n      forwards.sort(TagPos.compare)\r\n      this.sortedTagPosBackwards = forwards.slice().reverse()\r\n    }\r\n    return TagPos.binarySearch(forwards, tag)\r\n  }\r\n\r\n  private stringify (getToken: (field: SimpleFieldDefinition, val: string, i: number, count: number, tp: TagPos) => string): string {\r\n    const structure = this.structure\r\n    const buffer: ElasticBuffer = new ElasticBuffer()\r\n    const segment: SegmentDescription = this.segment\r\n    const tags: Tags = structure.tags\r\n    const count: number = segment.endPosition - segment.startPosition\r\n    const simple: Dictionary<SimpleFieldDefinition> = tags.definitions.simple\r\n\r\n    for (let i: number = segment.startPosition; i <= segment.endPosition; ++i) {\r\n      const tagPos: TagPos = tags.tagPos[i]\r\n      const field: SimpleFieldDefinition = simple.get(tagPos.tag.toString())\r\n      const val: string = this.getString(tagPos.tag)\r\n      const token = getToken(field, val, i, count, tagPos)\r\n      buffer.writeString(token)\r\n    }\r\n\r\n    return buffer.toString()\r\n  }\r\n}\r\n"]}