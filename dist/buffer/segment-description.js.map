{"version":3,"file":"segment-description.js","sourceRoot":"","sources":["../../src/buffer/segment-description.ts"],"names":[],"mappings":"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","sourcesContent":["import { INumericKeyed } from '../collections/collection'\r\nimport { ContainedField, ContainedFieldSet, GroupFieldDefinition } from '../dictionary'\r\n\r\nexport enum SegmentType {\r\n    Component = 0,\r\n    Group = 1,\r\n    Msg = 2,\r\n    Gap = 3,\r\n    Batch = 4,\r\n    Unknown = 5\r\n}\r\n\r\nexport class SegmentDescription {\r\n  public index: number\r\n  public endTag: number = 0\r\n  public endPosition: number = 0\r\n  public delimiterTag: number = 0\r\n  public delimiterPositions: number[]\r\n  public currentField: ContainedField\r\n  public containedDelimiterPositions: INumericKeyed<boolean>\r\n\r\n  constructor (\r\n               public name: string,\r\n               public startTag: number,\r\n               public set: ContainedFieldSet,\r\n               public startPosition: number,\r\n               public readonly depth: number,\r\n               public readonly type: SegmentType) {\r\n  }\r\n\r\n  public contains (segment: SegmentDescription): boolean {\r\n    return segment.startPosition >= this.startPosition && segment.endPosition <= this.endPosition\r\n  }\r\n\r\n  public getInstance (instance: number): SegmentDescription {\r\n    const delimiters: number[] = this.delimiterPositions\r\n    if (!delimiters) {\r\n      return null\r\n    }\r\n    if (instance < 0 || instance >= delimiters.length) {\r\n      return null\r\n    }\r\n    const start: number = delimiters[instance]\r\n    const end: number = instance < delimiters.length - 1 ?\r\n            delimiters[instance + 1] - 1 :\r\n            this.endPosition\r\n    const name = this.type === SegmentType.Batch ? this.set.abbreviation : this.name\r\n    const d: SegmentDescription = new SegmentDescription(name, this.startTag, this.set, start, this.depth, this.type)\r\n    d.endPosition = end\r\n    d.endTag = this.endTag\r\n    return d\r\n  }\r\n\r\n  public startGroup (tag: number): void {\r\n    this.delimiterTag = tag\r\n    this.delimiterPositions = []\r\n    this.containedDelimiterPositions = {}\r\n  }\r\n\r\n  public addDelimiterPosition (position: number): boolean {\r\n    if (this.containedDelimiterPositions[position]) {\r\n      return false\r\n    }\r\n    this.delimiterPositions[this.delimiterPositions.length] = position\r\n    this.containedDelimiterPositions[position] = true\r\n    return true\r\n  }\r\n\r\n  public setCurrentField (tag: number): void {\r\n    this.currentField = this.set.localTag[tag] || this.set.tagToField[tag]\r\n  }\r\n\r\n  public groupAddDelimiter (tag: number, position: number): boolean {\r\n    let delimiter: boolean = false\r\n    if (this.set instanceof GroupFieldDefinition) {\r\n      if (this.delimiterTag && tag === this.delimiterTag) {\r\n        delimiter = this.addDelimiterPosition(position)\r\n      }\r\n    }\r\n    return delimiter\r\n  }\r\n\r\n  public end (i: number, pos: number, endTag: number): void {\r\n    this.index = i\r\n    this.currentField = null\r\n    this.endPosition = pos\r\n    this.endTag = endTag\r\n  }\r\n}\r\n"]}