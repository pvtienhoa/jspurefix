{"version":3,"file":"tags.js","sourceRoot":"","sources":["../../src/buffer/tags.ts"],"names":[],"mappings":"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","sourcesContent":["import { FixDefinitions, ContainedSimpleField } from '../dictionary'\r\nimport { TagPos } from './tag-pos'\r\nimport { MsgTag } from '../types/enum'\r\n\r\nexport enum TagType {\r\n    String = 1,\r\n    Int = 2,\r\n    Float = 3,\r\n    Boolean = 4,\r\n    UtcTimestamp = 5,\r\n    UtcDateOnly = 6,\r\n    UtcTimeOnly = 7,\r\n    LocalDate = 8,\r\n    RawData = 9,\r\n    Length = 10,\r\n    Unknown = 11\r\n}\r\n\r\nexport class Tags {\r\n  public static readonly BeginString: number = MsgTag.BeginString\r\n  public static readonly BodyLengthTag: number = MsgTag.BodyLength\r\n  public static readonly CheckSumTag: number = MsgTag.CheckSum\r\n  public static readonly MsgTag: number = MsgTag.MsgType\r\n\r\n  public tagPos: TagPos[] = new Array(this.startingLength)\r\n  public nextTagPos: number = 0\r\n\r\n  constructor (public readonly definitions: FixDefinitions, public readonly startingLength: number = 30 * 1000) {\r\n  }\r\n\r\n  public static toJSType (simple: ContainedSimpleField): string {\r\n    switch (simple.definition.tagType) {\r\n      case TagType.String:\r\n        return 'string'\r\n\r\n      case TagType.Int:\r\n      case TagType.Float:\r\n      case TagType.Length:\r\n        return 'number'\r\n\r\n      case TagType.RawData:\r\n        return 'Buffer'\r\n\r\n      case TagType.Boolean:\r\n        return 'boolean'\r\n\r\n      case TagType.UtcTimestamp:\r\n      case TagType.UtcDateOnly:\r\n      case TagType.UtcTimeOnly:\r\n      case TagType.LocalDate:\r\n        return 'Date'\r\n\r\n      default:\r\n        return 'string'\r\n    }\r\n  }\r\n\r\n  public static toType (type: string): TagType {\r\n    if (type === 'Currency') {\r\n      type = 'string'\r\n    }\r\n    type = type || 'string'\r\n    switch (type.toLowerCase()) {\r\n      case 'string':\r\n      case 'char': {\r\n        return TagType.String\r\n      }\r\n\r\n      case 'int':\r\n      case 'numingroup':\r\n      case 'seqnum': {\r\n        return TagType.Int\r\n      }\r\n\r\n      case 'currency':\r\n      case 'qty':\r\n      case 'percentage':\r\n      case 'amt':\r\n      case 'price':\r\n      case 'priceoffset':\r\n      case 'float': {\r\n        return TagType.Float\r\n      }\r\n\r\n      case 'length': {\r\n        return TagType.Length\r\n      }\r\n\r\n      case 'boolean': {\r\n        return TagType.Boolean\r\n      }\r\n\r\n      case 'utctimestamp': {\r\n        return TagType.UtcTimestamp\r\n      }\r\n\r\n      case 'localmktdate': {\r\n        return TagType.LocalDate\r\n      }\r\n\r\n      case 'utcdateonly': {\r\n        return TagType.UtcDateOnly\r\n      }\r\n\r\n      case 'utctimeonly': {\r\n        return TagType.UtcTimeOnly\r\n      }\r\n\r\n      case 'data': {\r\n        return TagType.RawData\r\n      }\r\n\r\n      default: {\r\n        return TagType.String\r\n      }\r\n    }\r\n  }\r\n\r\n  public clone (): Tags {\r\n    const next: number = this.nextTagPos\r\n    const cloned: Tags = new Tags(this.definitions, next)\r\n    cloned.nextTagPos = next\r\n    for (let i = 0; i < next; ++i) {\r\n      cloned.tagPos[i] = this.tagPos[i].clone()\r\n    }\r\n    return cloned\r\n  }\r\n\r\n  public reset (): void {\r\n    this.nextTagPos = 0\r\n  }\r\n\r\n  public store (start: number, len: number, tag: number): void {\r\n    const tagPtr: number = this.nextTagPos\r\n    if (tagPtr === this.tagPos.length) {\r\n      this.expand()\r\n    }\r\n    const tp: TagPos = this.tagPos[tagPtr]\r\n    if (tp) {\r\n      tp.assign(tagPtr, tag, start, len)\r\n    } else {\r\n      this.tagPos[tagPtr] = new TagPos(tagPtr, tag, start, len)\r\n    }\r\n    this.nextTagPos++\r\n  }\r\n\r\n  private expand (): void {\r\n    const size = this.tagPos.length * 2\r\n    const tagPos = new Array(size)\r\n    for (let i = 0; i < this.tagPos.length; ++i) {\r\n      tagPos[i] = this.tagPos[i]\r\n    }\r\n    this.tagPos = tagPos\r\n  }\r\n}\r\n"]}