{"version":3,"file":"simple-field-definition.js","sourceRoot":"","sources":["../../../src/dictionary/definition/simple-field-definition.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dictionary } from '../../collections'\r\nimport { FieldEnum } from '../field-enum'\r\nimport { Tags, TagType, AsciiChars } from '../../buffer'\r\nimport * as _ from 'lodash'\r\n\r\nexport class SimpleFieldDefinition {\r\n  public readonly tag: number\r\n  public readonly tagType: TagType\r\n  public enums: Dictionary<FieldEnum>\r\n  public enumVals: Dictionary<boolean>\r\n\r\n  constructor (public readonly num: string,\r\n                public readonly name: string,\r\n                public readonly abbreviation: string,\r\n                public readonly baseCategory: string,\r\n                public readonly baseCategoryAbbreviation: string,\r\n                public readonly type: string,\r\n                public readonly description: string) {\r\n    this.tag = parseInt(num, 10)\r\n    this.tagType = Tags.toType(type)\r\n  }\r\n\r\n  public isEnum (): boolean {\r\n    return this.enums != null\r\n  }\r\n\r\n  public containsEnum (key: string): boolean {\r\n    const enums = this.enums\r\n    if (!enums) {\r\n      return false\r\n    }\r\n    return enums.get(key) != null\r\n  }\r\n\r\n  public resolveEnum (key: string): string {\r\n    const enums = this.enums\r\n    if (!enums) {\r\n      return key\r\n    }\r\n    const e: FieldEnum = enums.get(key)\r\n    if (e) {\r\n      return e.val\r\n    }\r\n    return key\r\n  }\r\n\r\n  public patchEnumValue (v: string): string {\r\n    let converted = _.upperFirst(_.camelCase(v))\r\n    const charAtPos = converted.charCodeAt(0)\r\n    const zero: number = AsciiChars.Zero\r\n    const nine: number = AsciiChars.Nine\r\n    const atDigit: boolean = charAtPos >= zero && charAtPos <= nine\r\n    if (atDigit) {\r\n      converted = `E${converted}`\r\n    }\r\n    if (this.enumVals.containsKey(converted)) {\r\n      converted = `${converted}2`\r\n    }\r\n    return converted\r\n  }\r\n\r\n  public addEnum (key: string, val: string, description?: string): void {\r\n    let enums = this.enums\r\n    let enumVals = this.enumVals\r\n    if (enums == null) {\r\n      this.enums = enums = new Dictionary<FieldEnum>()\r\n      this.enumVals = enumVals = new Dictionary<boolean>()\r\n    }\r\n    val = this.patchEnumValue(val)\r\n    enums.add(key, new FieldEnum(key, val, description))\r\n    enumVals.add(val, true)\r\n  }\r\n\r\n  public toString (): string {\r\n    let abbreviation: string = ''\r\n    if (this.abbreviation && this.name !== this.abbreviation) {\r\n      abbreviation = `(${this.abbreviation})`\r\n    }\r\n    let baseCategoryAbbreviation: string = ''\r\n    if (this.baseCategoryAbbreviation && this.baseCategoryAbbreviation !== this.name) {\r\n      baseCategoryAbbreviation = this.baseCategoryAbbreviation\r\n    }\r\n    if (baseCategoryAbbreviation.length > 0 && this.baseCategory) {\r\n      baseCategoryAbbreviation = `${this.baseCategory} ${baseCategoryAbbreviation}`\r\n    }\r\n    return `${this.num} ${this.name} ${abbreviation} ${baseCategoryAbbreviation} ${this.type} ${this.description || ''} ${this.enums ? `enumerated = [ ${this.enums.toString()} ]` : ''}`\r\n  }\r\n}\r\n"]}