{"version":3,"file":"set-reduce.js","sourceRoot":"","sources":["../../src/dictionary/set-reduce.ts"],"names":[],"mappings":";;AAAA,2CAAuJ;AAQvJ,SAAS,WAAW,CAAK,CAAI,EAAE,KAAqB,EAAE,UAA8B;IAClF,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,8BAAkB,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,UAAU,CAAC,KAAK,EAAE;gBACpB,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAA4B,CAAC,CAAA;aAClD;YACD,MAAK;SACN;QAED,KAAK,8BAAkB,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,KAA6B,CAAC,CAAA;aACpD;YACD,MAAK;SACN;QAED,KAAK,8BAAkB,CAAC,SAAS,CAAC,CAAC;YACjC,IAAI,UAAU,CAAC,SAAS,EAAE;gBACxB,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,KAAgC,CAAC,CAAA;aAC1D;YACD,MAAK;SACN;QAED;YACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;KAChD;AACH,CAAC;AAED,SAAgB,SAAS,CAAK,GAAsB,EAAE,UAA8B,EAAE,IAAO;IAC3F,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,KAAqB,EAAE,EAAE;QACzD,WAAW,CAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAA;QACpC,OAAO,CAAC,CAAA;IACV,CAAC,EAAE,IAAI,CAAC,CAAA;AACV,CAAC;AALD,8BAKC","sourcesContent":["import { ContainedField, ContainedFieldType, ContainedFieldSet, ContainedGroupField, ContainedSimpleField, ContainedComponentField } from './contained'\r\n\r\nexport interface ITypeDispatcher<T> {\r\n  group?: { (a: T, field: ContainedGroupField): void }\r\n  simple?: { (a: T, field: ContainedSimpleField): void }\r\n  component?: { (a: T, field: ContainedComponentField): void }\r\n}\r\n\r\nfunction reduceField<T> (a: T, field: ContainedField, dispatcher: ITypeDispatcher<T>): void {\r\n  switch (field.type) {\r\n    case ContainedFieldType.Group: {\r\n      if (dispatcher.group) {\r\n        dispatcher.group(a, field as ContainedGroupField)\r\n      }\r\n      break\r\n    }\r\n\r\n    case ContainedFieldType.Simple: {\r\n      if (dispatcher.simple) {\r\n        dispatcher.simple(a, field as ContainedSimpleField)\r\n      }\r\n      break\r\n    }\r\n\r\n    case ContainedFieldType.Component: {\r\n      if (dispatcher.component) {\r\n        dispatcher.component(a, field as ContainedComponentField)\r\n      }\r\n      break\r\n    }\r\n\r\n    default:\r\n      throw new Error(`unknown type ${field.type}`)\r\n  }\r\n}\r\n\r\nexport function reduceSet<T> (def: ContainedFieldSet, dispatcher: ITypeDispatcher<T>, init: T): T {\r\n  return def.fields.reduce((a: any, field: ContainedField) => {\r\n    reduceField<T>(a, field, dispatcher)\r\n    return a\r\n  }, init)\r\n}\r\n"]}