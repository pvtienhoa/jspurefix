{"version":3,"file":"contained-field-dispatch.js","sourceRoot":"","sources":["../../../src/dictionary/contained/contained-field-dispatch.ts"],"names":[],"mappings":";;AAGA,uDAAsE;AAQtE,SAAgB,sBAAsB,CAAE,KAAqB,EAAE,UAAqC;IAClG,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,oCAAkB,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,UAAU,CAAC,KAAK,EAAE;gBACpB,UAAU,CAAC,KAAK,CAAC,KAA4B,CAAC,CAAA;aAC/C;YACD,MAAK;SACN;QAED,KAAK,oCAAkB,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,UAAU,CAAC,MAAM,CAAC,KAA6B,CAAC,CAAA;aACjD;YACD,MAAK;SACN;QAED,KAAK,oCAAkB,CAAC,SAAS,CAAC,CAAC;YACjC,IAAI,UAAU,CAAC,SAAS,EAAE;gBACxB,UAAU,CAAC,SAAS,CAAC,KAAgC,CAAC,CAAA;aACvD;YACD,MAAK;SACN;QAED;YACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;KAChD;AACH,CAAC;AA1BD,wDA0BC","sourcesContent":["import { ContainedGroupField } from './contained-group-field'\r\nimport { ContainedSimpleField } from './contained-simple-field'\r\nimport { ContainedComponentField } from './contained-component-field'\r\nimport { ContainedField, ContainedFieldType } from './contained-field'\r\n\r\nexport interface IContainedFieldDispatcher {\r\n  group?: { (field: ContainedGroupField): void }\r\n  simple?: { (field: ContainedSimpleField): void }\r\n  component?: { (field: ContainedComponentField): void }\r\n}\r\n\r\nexport function dispatchContainedField (field: ContainedField, dispatcher: IContainedFieldDispatcher): void {\r\n  switch (field.type) {\r\n    case ContainedFieldType.Group: {\r\n      if (dispatcher.group) {\r\n        dispatcher.group(field as ContainedGroupField)\r\n      }\r\n      break\r\n    }\r\n\r\n    case ContainedFieldType.Simple: {\r\n      if (dispatcher.simple) {\r\n        dispatcher.simple(field as ContainedSimpleField)\r\n      }\r\n      break\r\n    }\r\n\r\n    case ContainedFieldType.Component: {\r\n      if (dispatcher.component) {\r\n        dispatcher.component(field as ContainedComponentField)\r\n      }\r\n      break\r\n    }\r\n\r\n    default:\r\n      throw new Error(`unknown type ${field.type}`)\r\n  }\r\n}\r\n"]}