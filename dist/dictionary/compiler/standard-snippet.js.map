{"version":3,"file":"standard-snippet.js","sourceRoot":"","sources":["../../../src/dictionary/compiler/standard-snippet.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICompilerSettings } from './compiler-settings'\r\nimport * as _ from 'lodash'\r\n\r\nexport class StandardSnippet {\r\n  constructor (public readonly settings: ICompilerSettings) {\r\n  }\r\n\r\n  private static rhsJustify (txt: string, width: number) {\r\n    let align = require('align-text')\r\n    return align(txt, width)\r\n  }\r\n\r\n  // import { camelName } from './component/name_underscore'\r\n  public import (name: string, isMsg: boolean, indent: number): string {\r\n    const spaces: string = this.spaces(indent)\r\n    const fileName = _.snakeCase(name)\r\n    const path = isMsg ? `./set/${fileName}` : `./${fileName}`\r\n    return `${spaces}import { I${name} } from '${path}'`\r\n  }\r\n\r\n  public interface (name: string, indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}export interface I${name}`\r\n  }\r\n\r\n  public startBlockComment (indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}/*`\r\n  }\r\n\r\n  public endBlockComment (indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}*/`\r\n  }\r\n\r\n  public startBlock (indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}{`\r\n  }\r\n\r\n  public endBlock (indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}}`\r\n  }\r\n\r\n  public group (name: string, type: string, required: boolean, indent: number): string {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}${name}${required ? '' : '?'}: I${type}[]`\r\n  }\r\n\r\n  public component (name: string, required: boolean, indent: number): string {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}${name}${required ? '' : '?'}: I${name}`\r\n  }\r\n\r\n  public simple (name: string, type: string, required: boolean, indent: number): string {\r\n    const spaces: string = this.spaces(indent)\r\n    return `${spaces}${name}${required ? '' : '?'}: ${type}`\r\n  }\r\n\r\n  public enum (name: string, indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    return `export ${spaces}enum ${name}`\r\n  }\r\n\r\n  public enumValue (name: string, val: any, indent: number) {\r\n    const spaces: string = this.spaces(indent)\r\n    if (typeof(val) === 'string') {\r\n      return `${spaces}${name} = '${val}'`\r\n    }\r\n    return `${spaces}${name} = ${val}`\r\n  }\r\n\r\n  public spaces (indent: number) {\r\n    return ' '.repeat(this.settings.spaces * indent)\r\n  }\r\n\r\n  public commentLine (line: string, justify: number) {\r\n    return StandardSnippet.rhsJustify(`// ${line}`, justify)\r\n  }\r\n\r\n  public commentBox (str: string) {\r\n\r\n    let wrap = require('word-wrap')\r\n    let text = wrap(str, {\r\n      width: 60,\r\n      indent: ' '}\r\n      )\r\n    let lines = text.split('\\n').map((a: string) => a.trim())\r\n    let max = this.longest(lines).length + 2\r\n    const newLine = require('os').EOL\r\n    lines = lines.map(function (line: string) {\r\n      line = ` ${line} `\r\n      let diff = max - line.length\r\n      return '*' + line + ' '.repeat(diff) + '*'\r\n    })\r\n    let stars = '*'.repeat(lines[0].length)\r\n    return stars + newLine\r\n      + lines.join(newLine)\r\n      + newLine\r\n      + stars\r\n  }\r\n\r\n  private longest (arr: string[]) {\r\n    return arr.reduce(function (a, b) {\r\n      return a.length > b.length ? a : b\r\n    })\r\n  }\r\n}\r\n"]}