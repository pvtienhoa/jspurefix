{"version":3,"file":"enum-compiler.js","sourceRoot":"","sources":["../../../src/dictionary/compiler/enum-compiler.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,yDAAoD;AACpD,yCAAqD;AAGrD,yBAAwB;AACxB,6BAA4B;AAC5B,6BAA4B;AAC5B,4BAA2B;AAE3B,MAAa,YAAY;IAKvB,YAA6B,WAA2B,EAAkB,QAA2B;QAAxE,gBAAW,GAAX,WAAW,CAAgB;QAAkB,aAAQ,GAAR,QAAQ,CAAmB;QAJpF,WAAM,GAAkB,IAAI,sBAAa,EAAE,CAAA;QAC3C,iBAAY,GAAkB,IAAI,sBAAa,EAAE,CAAA;QAIhE,IAAI,CAAC,QAAQ,GAAG,IAAI,kCAAe,CAAC,QAAQ,CAAC,CAAA;IAC/C,CAAC;IAUY,QAAQ,CAAE,YAAoB,IAAI;;YAC7C,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAS,EAAE;gBAC7C,MAAM,IAAI,GAA4B,IAAI,CAAC,IAAI,EAAE,CAAA;gBACjD,IAAI,CAAC,OAAO,CAAC,CAAO,KAA4B,EAAE,EAAE;oBAClD,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;gBACtC,CAAC,CAAA,CAAC,CAAA;gBACF,IAAI,SAAS,EAAE;oBACb,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;iBACjC;YACH,CAAC,CAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACpB,MAAM,CAAC,CAAA;YACT,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;IAEY,OAAO,CAAE,KAA4B,EAAE,SAAiB;;YACnE,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAA;YACjC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;YACpC,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;oBACjD,MAAM,CAAC,CAAA;gBACT,CAAC,CAAC,CAAA;aACH;iBAAM;gBACL,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;gBAClC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;aACvC;QACH,CAAC;KAAA;IAEM,YAAY,CAAE,KAA4B;QAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,wBAAwB,CAAC,CAAA;SACjE;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,sBAAsB,CAAC,CAAA;SACrD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE;YACrD,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAA;YACjC,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,MAAc,EAAE,CAAS,EAAE,GAAa,EAAE,EAAE;gBACvF,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;gBACjC,IAAI,CAAC,GAAQ,MAAM,CAAA;gBACnB,QAAQ,KAAK,CAAC,OAAO,EAAE;oBACrB,KAAK,gBAAO,CAAC,GAAG,CAAC,CAAC;wBAChB,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;wBACxB,MAAK;qBACN;iBACF;gBAED,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBACpD,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;oBACtB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;iBACxB;gBACD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;gBAC3B,OAAO,CAAC,CAAA;YACV,CAAC,EAAE,CAAC,CAAC,CAAA;QACP,CAAC,CAAC,CAAA;IACJ,CAAC;IAEY,eAAe,CAAE,IAAY;;YACxC,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAA;YACjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE;gBACvC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;gBAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,MAAc,EAAE,CAAS,EAAE,GAAa,EAAE,EAAE;oBACtF,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;oBAChC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA;oBACpB,IAAI,EAAE,EAAE;wBACN,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC,WAAW,EAAE;4BAC3C,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,CAAC,CAAA;yBAClC;wBACD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;wBACvD,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;yBACxB;wBACD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;qBAC5B;oBACD,OAAO,CAAC,CAAA;gBACV,CAAC,EAAE,CAAC,CAAC,CAAA;YACP,CAAC,CAAC,CAAA;YACF,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;QACjC,CAAC;KAAA;IAEO,IAAI;QACV,MAAM,IAAI,GAAiB,EAAE,CAAA;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAA0B,EAAE,MAA6B,EAAE,EAAE;YAC3G,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;gBACxB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;aACf;YACD,OAAO,CAAC,CAAA;QACV,CAAC,EAAE,EAAE,CAAC,CAAA;IACR,CAAC;IAEa,UAAU,CAAE,SAAiB;;YACzC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA;YAC3C,MAAM,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE;gBACpD,QAAQ,EAAE,MAAM;aACjB,CACA,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACnB,MAAM,CAAC,CAAA;YACT,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;IAEO,YAAY,CAAE,OAAe;QACnC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAA;QACjC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;QACjD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAC3B,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAA;QAChD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAC3B,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAA;QAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IAC7B,CAAC;IAEa,SAAS,CAAE,IAAY,EAAE,GAAW;;YAChD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;YACvC,MAAM,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE;gBAC1B,QAAQ,EAAE,MAAM;aAAC,CAClB,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBACnB,MAAM,CAAC,CAAA;YACT,CAAC,CAAC,CAAA;QACJ,CAAC;KAAA;IAEO,WAAW,CAAE,IAAY;QAC/B,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,MAAM,QAAQ,GAAG,GAAG,KAAK,KAAK,CAAA;QAC9B,IAAI,IAAI,GAAW,GAAG,QAAQ,CAAC,MAAM,QAAQ,CAAA;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;IAClC,CAAC;IAEO,MAAM,CAAE,IAAY,EAAE,WAAmB,EAAE,eAAyB;QAC1E,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAA;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAE9B,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,WAAW,EAAE;YACxC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAA;SAC/B;QACD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAC1C,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;QACvB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAC3B,eAAe,EAAE,CAAA;QACjB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;QACxC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAC3B,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAA;IAC1B,CAAC;CACF;AAxKD,oCAwKC","sourcesContent":["import { FixDefinitions, SimpleFieldDefinition } from '../definition'\r\nimport { ICompilerSettings } from './compiler-settings'\r\nimport { StandardSnippet } from './standard-snippet'\r\nimport { TagType, ElasticBuffer } from '../../buffer'\r\nimport { ILooseObject } from '../../collections/collection'\r\n\r\nimport * as fs from 'fs'\r\nimport * as util from 'util'\r\nimport * as Path from 'path'\r\nimport * as _ from 'lodash'\r\n\r\nexport class EnumCompiler {\r\n  private readonly buffer: ElasticBuffer = new ElasticBuffer()\r\n  private readonly consolidated: ElasticBuffer = new ElasticBuffer()\r\n  private readonly snippets: StandardSnippet\r\n\r\n  constructor (public readonly definitions: FixDefinitions, public readonly settings: ICompilerSettings) {\r\n    this.snippets = new StandardSnippet(settings)\r\n  }\r\n\r\n  /*\r\n  enum MessageTypes {\r\n  Logon = 'A',\r\n  Heartbeat = '0',\r\n  TestRequest = '1'\r\n}\r\n   */\r\n\r\n  public async generate (asOneFile: string = null) {\r\n    this.generateTagEnum('MsgTag').then(async () => {\r\n      const toDo: SimpleFieldDefinition[] = this.toDo()\r\n      toDo.forEach(async (field: SimpleFieldDefinition) => {\r\n        await this.oneEnum(field, asOneFile)\r\n      })\r\n      if (asOneFile) {\r\n        await this.writeAsOne(asOneFile)\r\n      }\r\n    }).catch((e: Error) => {\r\n      throw e\r\n    })\r\n  }\r\n\r\n  public async oneEnum (field: SimpleFieldDefinition, asOneFile: string) {\r\n    const newLine = require('os').EOL\r\n    const api = this.generateEnum(field)\r\n    if (!asOneFile) {\r\n      await this.writeFile(name, api).catch((e: Error) => {\r\n        throw e\r\n      })\r\n    } else {\r\n      this.consolidated.writeString(api)\r\n      this.consolidated.writeString(newLine)\r\n    }\r\n  }\r\n\r\n  public generateEnum (field: SimpleFieldDefinition): string {\r\n    const buffer = this.buffer\r\n    if (field == null) {\r\n      throw new Error(`no simple field ${name} exists in definitions`)\r\n    }\r\n    if (!field.isEnum()) {\r\n      throw new Error(`field ${name} is not an enum type`)\r\n    }\r\n    return this.create(field.name, field.description, () => {\r\n      const newLine = require('os').EOL\r\n      return field.enums.keys().reduce((a: number, latest: string, i: number, arr: string[]) => {\r\n        let k = field.resolveEnum(latest)\r\n        let v: any = latest\r\n        switch (field.tagType) {\r\n          case TagType.Int: {\r\n            v = parseInt(latest, 10)\r\n            break\r\n          }\r\n        }\r\n\r\n        buffer.writeString(this.snippets.enumValue(k, v, 1))\r\n        if (i < arr.length - 1) {\r\n          buffer.writeString(',')\r\n        }\r\n        buffer.writeString(newLine)\r\n        return 0\r\n      }, 0)\r\n    })\r\n  }\r\n\r\n  public async generateTagEnum (name: string) {\r\n    const newLine = require('os').EOL\r\n    const tags = this.definitions.tagToSimple\r\n    const snippets = this.snippets\r\n    const api = this.create(name, null, () => {\r\n      const buffer = this.buffer\r\n      return Object.keys(tags).reduce((a: number, latest: string, i: number, arr: string[]) => {\r\n        const tag = parseInt(latest, 10)\r\n        const sf = tags[tag]\r\n        if (sf) {\r\n          if (this.settings.comment && sf.description) {\r\n            this.commentBlock(sf.description)\r\n          }\r\n          buffer.writeString(snippets.enumValue(sf.name, tag, 1))\r\n          if (i < arr.length - 1) {\r\n            buffer.writeString(',')\r\n          }\r\n          buffer.writeString(newLine)\r\n        }\r\n        return a\r\n      }, 0)\r\n    })\r\n    await this.writeFile(name, api)\r\n  }\r\n\r\n  private toDo (): SimpleFieldDefinition[] {\r\n    const done: ILooseObject = {}\r\n    return this.definitions.simple.values().reduce((a: SimpleFieldDefinition[], latest: SimpleFieldDefinition) => {\r\n      if (latest.isEnum() && !done[latest.name]) {\r\n        done[latest.name] = true\r\n        a.push(latest)\r\n      }\r\n      return a\r\n    }, [])\r\n  }\r\n\r\n  private async writeAsOne (asOneFile: string) {\r\n    const writer = util.promisify(fs.writeFile)\r\n    await writer(asOneFile, this.consolidated.toString(), {\r\n      encoding: 'utf8'\r\n    }\r\n    ).catch((e: Error) => {\r\n      throw e\r\n    })\r\n  }\r\n\r\n  private commentBlock (comment: string) {\r\n    const buffer = this.buffer\r\n    const snippets = this.snippets\r\n    const newLine = require('os').EOL\r\n    buffer.writeString(snippets.startBlockComment(0))\r\n    buffer.writeString(newLine)\r\n    buffer.writeString(snippets.commentBox(comment))\r\n    buffer.writeString(newLine)\r\n    buffer.writeString(snippets.endBlockComment(0))\r\n    buffer.writeString(newLine)\r\n  }\r\n\r\n  private async writeFile (name: string, api: string) {\r\n    const writer = util.promisify(fs.writeFile)\r\n    const fullName = this.getFileName(name)\r\n    await writer(fullName, api, {\r\n      encoding: 'utf8'}\r\n    ).catch((e: Error) => {\r\n      throw e\r\n    })\r\n  }\r\n\r\n  private getFileName (name: string): string {\r\n    const snake = _.snakeCase(name)\r\n    const settings = this.settings\r\n    const fileName = `${snake}.ts`\r\n    let path: string = `${settings.output}/enum/`\r\n    return Path.join(path, fileName)\r\n  }\r\n\r\n  private create (name: string, description: string, populateMembers: Function): string {\r\n    const newLine = require('os').EOL\r\n    const buffer = this.buffer\r\n    buffer.reset()\r\n    const snippets = this.snippets\r\n\r\n    if (this.settings.comment && description) {\r\n      this.commentBlock(description)\r\n    }\r\n    buffer.writeString(snippets.enum(name, 0))\r\n    buffer.writeString(' ')\r\n    buffer.writeString(snippets.startBlock(0))\r\n    buffer.writeString(newLine)\r\n    populateMembers()\r\n    buffer.writeString(snippets.endBlock(0))\r\n    buffer.writeString(newLine)\r\n    return buffer.toString()\r\n  }\r\n}\r\n"]}