{"version":3,"file":"xsd-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fixml/xsd-parser.ts"],"names":[],"mappings":";;AAGA,yBAAwB;AAGxB,MAAsB,SAAS;IAK7B,YAAuC,WAA2B;QAA3B,gBAAW,GAAX,WAAW,CAAgB;QAJlD,SAAI,GAAmB,EAAE,CAAA;IAKzC,CAAC;IAEM,KAAK,CAAE,IAAY;QACxB,OAAO,IAAI,OAAO,CAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACpD,MAAM,IAAI,GAAkB,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;YACrD,MAAM,SAAS,GAAc,OAAO,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;YAClE,MAAM,SAAS,GAAc,SAAS,CAAC,OAAO,CAAA;YAC9C,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACjC,CAAC,CAAC,CAAA;YAEF,SAAS,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,IAAY,EAAE,EAAE;gBACxC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YAClC,CAAC,CAAC,CAAA;YAEF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC1B,CAAC,CAAC,CAAA;YAEF,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAS,EAAE,EAAE;gBACjC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;gBACZ,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;iBAC5C;YACH,CAAC,CAAC,CAAA;YAEF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC1B,MAAM,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC;IAMS,MAAM,CAAE,IAAc,EAAE,MAAqB;QACrD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;SACtB;QACD,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACnD,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;YAClB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;SAC/B;IACH,CAAC;CACF;AApDD,8BAoDC","sourcesContent":["import { FixDefinitions } from '../../definition'\r\nimport { ILooseObject } from '../../../collections/collection'\r\nimport { ISaxNode, SAXStream } from '../../dict-primitive'\r\nimport * as fs from 'fs'\r\nimport { SAXParser } from 'sax'\r\n\r\nexport abstract class XsdParser {\r\n  public readonly data: ILooseObject[] = []\r\n  public current: ILooseObject\r\n  protected pending: string\r\n\r\n  protected constructor (public readonly definitions: FixDefinitions) {\r\n  }\r\n\r\n  public parse (file: string): Promise<FixDefinitions> {\r\n    return new Promise<FixDefinitions>((accept, reject) => {\r\n      const pass: fs.ReadStream = fs.createReadStream(file)\r\n      const saxStream: SAXStream = require('sax').createStream(true, {})\r\n      const saxParser: SAXParser = saxStream._parser\r\n      saxStream.on('opentag', (node) => {\r\n        this.open(saxParser.line, node)\r\n      })\r\n\r\n      saxStream.on('closetag', (name: string) => {\r\n        this.close(saxParser.line, name)\r\n      })\r\n\r\n      saxStream.on('ready', () => {\r\n        accept(this.definitions)\r\n      })\r\n\r\n      saxStream.on('text', (t: string) => {\r\n        t = t.trim()\r\n        if (t.length > 0 && this.pending) {\r\n          this.value(saxParser.line, this.pending, t)\r\n        }\r\n      })\r\n\r\n      saxStream.on('error', (r) => {\r\n        reject(r)\r\n      })\r\n      pass.pipe(saxStream)\r\n    })\r\n  }\r\n\r\n  public abstract close (line: number, node: string): void\r\n  public abstract open (line: number, node: ISaxNode): void\r\n  public abstract value (line: number, n: string, v: string): void\r\n\r\n  protected assign (node: ISaxNode, target?: ILooseObject): void {\r\n    if (!target) {\r\n      target = this.current\r\n    }\r\n    const keys: string[] = Object.keys(node.attributes)\r\n    for (let k of keys) {\r\n      target[k] = node.attributes[k]\r\n    }\r\n  }\r\n}\r\n"]}