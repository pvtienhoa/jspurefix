{"version":3,"file":"fix-xsd-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fixml/fix-xsd-parser.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iDAAiD;AACjD,iDAA4C;AAC5C,qDAAoE;AACpE,mDAA8C;AAC9C,mDAA8C;AAC9C,2DAAsD;AAGtD,6BAA4B;AAE5B,MAAa,YAAa,SAAQ,sBAAS;IAKzC,YAA6B,QAAgB,EAAS,SAAyB;QAC7E,KAAK,EAAE,CAAA;QADoB,aAAQ,GAAR,QAAQ,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAgB;QAE7E,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,cAAc,CAAC,CAAA;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,2BAAc,CAAC,kCAAmB,CAAC,SAAS,EAAE,yBAAU,CAAC,UAAU,CAAC,CAAA;IAC7F,CAAC;IAEK,KAAK;;YACT,MAAM,WAAW,GAAmB,IAAI,CAAC,WAAW,CAAA;YACpD,MAAM,GAAG,GAAW,SAAS,CAAA;YAC7B,MAAM,IAAI,GAAW,cAAc,GAAG,MAAM,CAAA;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,oBAAoB,IAAI,cAAc,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;YAClE,MAAM,CAAC,GAAG,IAAI,4BAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;YAC/C,MAAM,CAAC,CAAC,KAAK,EAAE,CAAA;YACf,MAAM,QAAQ,GAAa,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC1C,MAAM,MAAM,GAAiB,IAAI,4BAAY,CAAC,WAAW,CAAC,CAAA;YAC1D,MAAM,UAAU,GAAqB,IAAI,oCAAgB,CAAC,WAAW,CAAC,CAAA;YACtE,MAAM,QAAQ,GAAa,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAW,EAAE,CAAS,EAAE,EAAE;gBACpE,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAC9C,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;iBACV;gBACD,OAAO,CAAC,CAAA;YACV,CAAC,EAAE,EAAE,CAAC,CAAA;YAEN,KAAK,IAAI,CAAC,IAAI,QAAQ,EAAE;gBACtB,MAAM,MAAM,GAAc,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAA;gBACzE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;gBAChC,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAA;aAChD;YACD,OAAO,IAAI,CAAC,WAAW,CAAA;QACzB,CAAC;KAAA;CACF;AApCD,oCAoCC","sourcesContent":["import { FixDefinitions } from '../../definition'\r\nimport { FixParser } from '../../fix-parser'\r\nimport { FixDefinitionSource, FixVersion } from '../../fix-versions'\r\nimport { FieldsParser } from './fields-parser'\r\nimport { IncludeGraph } from './include-graph'\r\nimport { ComponentsParser } from './components-parser'\r\nimport { XsdParser } from './xsd-parser'\r\nimport { GetJsFixLogger, IJsFixLogger } from '../../../config'\r\nimport * as path from 'path'\r\n\r\nexport class FixXsdParser extends FixParser {\r\n\r\n  public readonly definitions: FixDefinitions\r\n  private readonly logger: IJsFixLogger\r\n\r\n  constructor (public readonly rootPath: string, public getLogger: GetJsFixLogger) {\r\n    super()\r\n    this.logger = getLogger('FixXsdParser')\r\n    this.definitions = new FixDefinitions(FixDefinitionSource.FixmlRepo, FixVersion.FIXML50SP2)\r\n  }\r\n\r\n  async parse (): Promise<FixDefinitions> {\r\n    const definitions: FixDefinitions = this.definitions\r\n    const ver: string = '5-0-SP2'\r\n    const main: string = `fixml-main-${ver}.xsd`\r\n    const logger = this.logger\r\n    logger.info(`resolve includes ${main} from root ${this.rootPath}`)\r\n    const t = new IncludeGraph(this.rootPath, main)\r\n    await t.build()\r\n    const resolved: string[] = t.resolve(main)\r\n    const fields: FieldsParser = new FieldsParser(definitions)\r\n    const components: ComponentsParser = new ComponentsParser(definitions)\r\n    const filtered: string[] = resolved.reduce((a: string[], f: string) => {\r\n      if (f.indexOf('-impl-') || f.indexOf('-base-')) {\r\n        a.push(f)\r\n      }\r\n      return a\r\n    }, [])\r\n\r\n    for (let f of filtered) {\r\n      const parser: XsdParser = f.indexOf('-fields-') > 0 ? fields : components\r\n      logger.info(`parsing file ${f}`)\r\n      await parser.parse(path.join(this.rootPath, f))\r\n    }\r\n    return this.definitions\r\n  }\r\n}\r\n"]}