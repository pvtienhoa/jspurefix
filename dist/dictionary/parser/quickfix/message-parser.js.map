{"version":3,"file":"message-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/message-parser.ts"],"names":[],"mappings":";;AACA,iDAAoD;AACpD,+CAA0C;AAC1C,mDAA8C;AAG9C,MAAa,aAAc,SAAQ,wBAAU;IAE3C,YAA6B,MAA6B;QACxD,KAAK,CAAC,MAAM,CAAC,CAAA;QADc,WAAM,GAAN,MAAM,CAAuB;IAE1D,CAAC;IAEM,IAAI,CAAE,IAAY,EAAE,IAAc;QACvC,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,GAAG,GAAQ,IAAI,CAAC,UAAU,CAAA;gBAChC,MAAM,GAAG,GAAsB,IAAI,8BAAiB,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;gBACvG,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;gBACnE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBAChC,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;gBACpB,MAAK;aACN;YAED,KAAK,WAAW,CAAC,CAAC;gBAChB,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;iBACnD;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;iBAChC;gBACD,MAAK;aACN;SACF;IACH,CAAC;IAEM,KAAK,CAAE,IAAY,EAAE,IAAY;QACtC,QAAQ,IAAI,EAAE;YACZ,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,MAAM,GAAiB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAA;gBACrD,MAAM,OAAO,GAAsB,MAAM,CAAC,SAAS,EAAE,CAAA;gBACrD,IAAI,OAAO,IAAI,IAAI,EAAE;oBACnB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;iBACrC;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;gBACxB,MAAK;aACN;SACF;IACH,CAAC;CACF;AAtDD,sCAsDC","sourcesContent":["import { ISaxNode } from '../../dict-primitive'\r\nimport { MessageDefinition } from '../../definition'\r\nimport { NodeParser } from './node-parser'\r\nimport { ParseContext } from './parse-context'\r\nimport { QuickFixXmlFileParser } from './quick-fix-xml-file-parser'\r\n\r\nexport class MessageParser extends NodeParser {\r\n\r\n  constructor (public readonly parser: QuickFixXmlFileParser) {\r\n    super(parser)\r\n  }\r\n\r\n  public open (line: number, node: ISaxNode): void {\r\n    switch (node.name) {\r\n      case 'message': {\r\n        const att: any = node.attributes\r\n        const msg: MessageDefinition = new MessageDefinition(att.name, att.name, att.msgtype, att.msgcat, null)\r\n        const context: ParseContext = new ParseContext(msg.name, true, msg)\r\n        this.parseContexts.push(context)\r\n        break\r\n      }\r\n\r\n      case 'field': {\r\n        this.addSimple(node)\r\n        break\r\n      }\r\n\r\n      case 'component': {\r\n        if (node.isSelfClosing) {\r\n          this.addComponentField(node.attributes.name, node)\r\n        }\r\n        break\r\n      }\r\n\r\n      case 'group': {\r\n        if (!node.isSelfClosing) {\r\n          this.beginGroupDefinition(node)\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  public close (line: number, name: string): void {\r\n    switch (name) {\r\n      case 'message': {\r\n        const parent: ParseContext = this.parseContexts.pop()\r\n        const message: MessageDefinition = parent.asMessage()\r\n        if (message != null) {\r\n          this.definitions.addMessage(message)\r\n        }\r\n        break\r\n      }\r\n\r\n      case 'group': {\r\n        this.addGroupField(name)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}