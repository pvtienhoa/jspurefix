{"version":3,"file":"quick-fix-xml-file-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/quick-fix-xml-file-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs'\r\nimport { SAXParser } from 'sax'\r\nimport { IDictDoneCb, ISaxNode, SAXStream } from '../../dict-primitive'\r\nimport { FixDefinitions } from '../../definition'\r\nimport { FieldDefinitionParser } from './field-definition-parser'\r\nimport { FieldSetParser } from './field-set-parser'\r\nimport { MessageParser } from './message-parser'\r\nimport { NodeParser } from './node-parser'\r\nimport { FixParser } from '../../fix-parser'\r\nimport { FixDefinitionSource, VersionUtil } from '../../fix-versions'\r\nimport { GetJsFixLogger } from '../../../config'\r\nimport { promisify } from 'util'\r\n\r\nenum ParseState {\r\n    Begin = 1,\r\n    FieldDefinitions = 2,\r\n    ComponentsFirstPass = 3,\r\n    ComponentsSecondPass = 4,\r\n    ComponentsThirdPass = 5,\r\n    Messages = 6\r\n}\r\n\r\nexport class QuickFixXmlFileParser extends FixParser {\r\n\r\n  public parseState: ParseState = ParseState.Begin\r\n  public numberPasses: number = 0\r\n  public definitions: FixDefinitions\r\n  private readonly singlePass = promisify(QuickFixXmlFileParser.subscribe)\r\n\r\n  constructor (public readonly xmlPath: string, public getLogger: GetJsFixLogger) {\r\n    super()\r\n  }\r\n\r\n  private static subscribe (instance: QuickFixXmlFileParser, saxStream: SAXStream, done: IDictDoneCb): void {\r\n    let parser: NodeParser\r\n\r\n    instance.numberPasses++\r\n    switch (instance.parseState) {\r\n      case ParseState.Begin: {\r\n        instance.parseState = ParseState.FieldDefinitions\r\n        break\r\n      }\r\n      case ParseState.FieldDefinitions: {\r\n        instance.parseState = ParseState.ComponentsFirstPass\r\n        break\r\n      }\r\n      case ParseState.ComponentsFirstPass: {\r\n        instance.parseState = ParseState.ComponentsSecondPass\r\n        break\r\n      }\r\n      case ParseState.ComponentsSecondPass: {\r\n        instance.parseState = ParseState.ComponentsThirdPass\r\n        break\r\n      }\r\n      case ParseState.ComponentsThirdPass: {\r\n        instance.parseState = ParseState.Messages\r\n        break\r\n      }\r\n    }\r\n\r\n    const saxParser: SAXParser = saxStream._parser\r\n\r\n    saxStream.on('error', (e: Error) => {\r\n      done(e, null)\r\n    })\r\n\r\n    saxStream.on('closetag', (name) => {\r\n      if (parser != null) {\r\n        parser.close(saxParser.line, name)\r\n      }\r\n      switch (name) {\r\n        case 'repository':\r\n        case 'messages':\r\n        case 'components':\r\n        case 'header':\r\n        case 'trailer': {\r\n          parser = null\r\n          break\r\n        }\r\n      }\r\n    })\r\n\r\n    saxStream.on('opentag', (node) => {\r\n      const saxNode: ISaxNode = node as ISaxNode\r\n\r\n      switch (saxNode.name) {\r\n\r\n        case 'fix': {\r\n          switch (instance.parseState) {\r\n            case ParseState.FieldDefinitions: {\r\n              const major = saxNode.attributes.major\r\n              const minor = saxNode.attributes.major\r\n              const description: string = `FIX.${major}.${minor}`\r\n              instance.definitions = new FixDefinitions(FixDefinitionSource.QuickFix, VersionUtil.resolve(description))\r\n              break\r\n            }\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'fields': {\r\n          switch (instance.parseState) {\r\n            case ParseState.FieldDefinitions: {\r\n              parser = new FieldDefinitionParser(instance)\r\n              break\r\n            }\r\n            default: {\r\n              parser = null\r\n            }\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'messages': {\r\n          switch (instance.parseState) {\r\n            case ParseState.Messages: {\r\n              parser = new MessageParser(instance)\r\n              break\r\n            }\r\n\r\n            default:\r\n              break\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'components': {\r\n                    // can have a group containing components which contain themselves components of groups\r\n                    // each step will build forward references to a deeper level to ensure final messages\r\n                    // have all dependencies correctly defined.\r\n          switch (instance.parseState) {\r\n            case ParseState.ComponentsFirstPass:\r\n            case ParseState.ComponentsSecondPass:\r\n            case ParseState.ComponentsThirdPass:\r\n              parser = new FieldSetParser(instance)\r\n              break\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'field':\r\n        case 'value':\r\n        case 'component':\r\n        case 'group': {\r\n          if (parser != null) {\r\n            parser.open(saxParser.line, saxNode)\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'message': {\r\n          switch (instance.parseState) {\r\n            case ParseState.Messages: {\r\n              if (parser != null) {\r\n                parser.open(saxParser.line, saxNode)\r\n              }\r\n              break\r\n            }\r\n\r\n            default:\r\n              break\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'header':\r\n        case 'trailer': {\r\n          switch (instance.parseState) {\r\n            case ParseState.Messages: {\r\n              parser = new FieldSetParser(instance)\r\n              parser.open(saxParser.line, node)\r\n              break\r\n            }\r\n          }\r\n          break\r\n        }\r\n      }\r\n    })\r\n\r\n    saxStream.on('ready', () => {\r\n      if (done) {\r\n        parser = null\r\n        done(null, instance.definitions)\r\n      }\r\n    })\r\n  }\r\n\r\n  public parse (): Promise<FixDefinitions> {\r\n    return new Promise<FixDefinitions>(async (accept, reject) => {\r\n      try {\r\n        await this.onePass() // first fetch all field definitions\r\n        await this.onePass() // first pass of components, will not know about forward components.\r\n        await this.onePass() // second pass of components top level with forward references replace\r\n        await this.onePass() // third pass of components all fully resolved i.e. pick up versions from pass above\r\n        await this.onePass() // lastly messages with all dependencies\r\n        accept(this.definitions)\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n  }\r\n\r\n  private async onePass (): Promise<any> {\r\n    const pass: fs.ReadStream = fs.createReadStream(this.xmlPath)\r\n    const saxStream: SAXStream = require('sax').createStream(true, {})\r\n    pass.pipe(saxStream)\r\n    await this.singlePass(this, saxStream)\r\n  }\r\n}\r\n"]}