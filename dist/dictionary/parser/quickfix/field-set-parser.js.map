{"version":3,"file":"field-set-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/quickfix/field-set-parser.ts"],"names":[],"mappings":";;AAAA,iDAA2D;AAE3D,+CAA0C;AAC1C,mDAA8C;AAG9C,MAAa,cAAe,SAAQ,wBAAU;IAC5C,YAA6B,MAA6B;QACxD,KAAK,CAAC,MAAM,CAAC,CAAA;QADc,WAAM,GAAN,MAAM,CAAuB;IAE1D,CAAC;IAEM,IAAI,CAAE,IAAY,EAAE,IAAc;QACvC,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,aAAa,GAAW,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAA;gBAC/D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,MAAM,GAAG,GAA6B,IAAI,qCAAwB,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;oBAC5G,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,CAAA;oBACxE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;iBACjC;qBAAM;oBACL,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;oBAC3C,MAAM,OAAO,GAAiB,IAAI,4BAAY,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;oBAC1E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;iBACjC;gBACD,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;gBACpB,MAAK;aACN;YAED,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;gBAC/B,MAAK;aACN;SACF;IACH,CAAC;IAEM,KAAK,CAAE,IAAY,EAAE,IAAY;QACtC,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO,CAAC,CAAC;gBACZ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;gBACxB,MAAK;aACN;YAED,KAAK,WAAW,CAAC;YACjB,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,MAAM,GAAiB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAA;gBACrD,IAAI,MAAM,IAAI,IAAI,EAAE;oBAClB,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,6BAA6B,CAAC,CAAA;iBACtE;gBACD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBACpB,OAAM;iBACP;gBACD,MAAM,WAAW,GAA6B,MAAM,CAAC,WAAW,EAAE,CAAA;gBAClE,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAA;iBACnD;qBAAM;oBACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,MAAM,CAAC,IAAI,GAAG,CAAC,CAAA;iBAC1E;gBAED,MAAK;aACN;SACF;IACH,CAAC;CACF;AA/DD,wCA+DC","sourcesContent":["import { ComponentFieldDefinition } from '../../definition'\r\nimport { ISaxNode } from '../../dict-primitive'\r\nimport { NodeParser } from './node-parser'\r\nimport { ParseContext } from './parse-context'\r\nimport { QuickFixXmlFileParser } from './quick-fix-xml-file-parser'\r\n\r\nexport class FieldSetParser extends NodeParser {\r\n  constructor (public readonly parser: QuickFixXmlFileParser) {\r\n    super(parser)\r\n  }\r\n\r\n  public open (line: number, node: ISaxNode): void {\r\n    switch (node.name) {\r\n      case 'component':\r\n      case 'header':\r\n      case 'trailer': {\r\n        const componentName: string = node.attributes.name || node.name\r\n        if (!node.isSelfClosing) {\r\n          const set: ComponentFieldDefinition = new ComponentFieldDefinition(componentName, componentName, null, null)\r\n          const context: ParseContext = new ParseContext(componentName, true, set)\r\n          this.parseContexts.push(context)\r\n        } else {\r\n          this.addComponentField(componentName, node)\r\n          const context: ParseContext = new ParseContext(componentName, false, null)\r\n          this.parseContexts.push(context)\r\n        }\r\n        break\r\n      }\r\n\r\n      case 'field': {\r\n        this.addSimple(node)\r\n        break\r\n      }\r\n\r\n      case 'group': {\r\n        this.beginGroupDefinition(node)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  public close (line: number, name: string): void {\r\n    switch (name) {\r\n      case 'group': {\r\n        this.addGroupField(name)\r\n        break\r\n      }\r\n\r\n      case 'component':\r\n      case 'header':\r\n      case 'trailer': {\r\n        const latest: ParseContext = this.parseContexts.pop()\r\n        if (latest == null) {\r\n          throw new Error(`component field ${name} closes yet does not exist.`)\r\n        }\r\n        if (!latest.defining) {\r\n          return\r\n        }\r\n        const asComponent: ComponentFieldDefinition = latest.asComponent()\r\n        if (asComponent != null) {\r\n          this.definitions.addComponentFieldDef(asComponent)\r\n        } else {\r\n          throw new Error(`latest not instance of component field ${latest.name} `)\r\n        }\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}