{"version":3,"file":"repository-xml-parser.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fix-repository/repository-xml-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs'\r\nimport * as path from 'path'\r\nimport { SAXParser } from 'sax'\r\nimport { promisify } from 'util'\r\nimport { IDictDoneCb, ISaxNode, SAXStream } from '../../dict-primitive'\r\nimport { FixDefinitions } from '../../definition'\r\nimport { AbbreviationsParser } from './abbreviations-parser'\r\nimport { BaseParser } from './base-parser'\r\nimport { ComponentsParser } from './components-parser'\r\nimport { EnumsParser } from './enums-parser'\r\nimport { FieldsParser } from './fields-parser'\r\nimport { MessagesParser } from './messages-parser'\r\nimport { MsgContentsParser } from './msg-contents-parser'\r\nimport { Repository } from './repository'\r\nimport { FixParser } from '../../fix-parser'\r\nimport { VersionUtil } from '../../fix-versions'\r\nimport { GetJsFixLogger, IJsFixLogger } from '../../../config'\r\n\r\nexport class RepositoryXmlParser extends FixParser {\r\n  public readonly repository: Repository\r\n  private readonly singlePass = promisify(RepositoryXmlParser.subscribe)\r\n  private readonly logger: IJsFixLogger\r\n\r\n  constructor (public readonly rootPath: string, public readonly getLogger: GetJsFixLogger) {\r\n    super()\r\n    this.logger = getLogger('RepositoryXmlParser')\r\n    this.repository = new Repository(VersionUtil.resolve(this.rootPath), getLogger)\r\n  }\r\n\r\n  private static subscribe (instance: RepositoryXmlParser, saxStream: SAXStream, done: IDictDoneCb): void {\r\n    let parser: BaseParser\r\n    let pending: string\r\n    const saxParser: SAXParser = saxStream._parser\r\n\r\n    saxStream.on('error', (e: Error) => {\r\n      done(e, null)\r\n    })\r\n\r\n    saxStream.on('closetag', (name) => {\r\n\r\n      switch (name) {\r\n        case 'Abbreviations':\r\n        case 'Messages':\r\n        case 'MsgContents':\r\n        case 'Components':\r\n        case 'Fields':\r\n        case 'Enums': {\r\n          if (parser != null) {\r\n            parser.close(saxParser.line, name)\r\n            instance.repository.assign(name, parser.data)\r\n            parser = null\r\n          }\r\n          break\r\n        }\r\n\r\n        case 'Abbreviation':\r\n        case 'MsgContent':\r\n        case 'Field':\r\n        case 'Enum':\r\n        case 'Component':\r\n        case 'Message': {\r\n          if (parser != null) {\r\n            parser.close(saxParser.line, name)\r\n          }\r\n          break\r\n        }\r\n\r\n        default: {\r\n          pending = null\r\n          break\r\n        }\r\n      }\r\n    })\r\n\r\n    saxStream.on('text', (t: string) => {\r\n      t = t.trim()\r\n      if (pending) {\r\n        parser.value(saxParser.line, pending, t)\r\n      }\r\n    })\r\n\r\n    saxStream.on('opentag', (node) => {\r\n      const saxNode: ISaxNode = node as ISaxNode\r\n      switch (saxNode.name) {\r\n        case 'Fields': {\r\n          parser = new FieldsParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'Enums': {\r\n          parser = new EnumsParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'Components': {\r\n          parser = new ComponentsParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'Messages': {\r\n          parser = new MessagesParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'MsgContents': {\r\n          parser = new MsgContentsParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'Abbreviations': {\r\n          parser = new AbbreviationsParser(instance)\r\n          break\r\n        }\r\n\r\n        case 'Abbreviation':\r\n        case 'Field':\r\n        case 'Message':\r\n        case 'MsgContent':\r\n        case 'Enum':\r\n        case 'Component': {\r\n          if (parser != null) {\r\n            parser.open(saxParser.line, saxNode)\r\n          }\r\n          break\r\n        }\r\n\r\n        default: {\r\n          pending = saxNode.name\r\n        }\r\n      }\r\n    })\r\n\r\n    saxStream.on('ready', () => {\r\n      if (done) {\r\n        parser = null\r\n        done(null, instance.repository.definitions)\r\n      }\r\n    })\r\n  }\r\n\r\n  public parse (): Promise<FixDefinitions> {\r\n    return new Promise<FixDefinitions>(async (accept, reject) => {\r\n      try {\r\n        await this.onePass('Fields.xml')\r\n        await this.onePass('Enums.xml')\r\n        await this.onePass('Components.xml')\r\n        await this.onePass('Messages.xml')\r\n        await this.onePass('MsgContents.xml')\r\n        if (this.repository.includesAbbreviations) {\r\n          await this.onePass('Abbreviations.xml')\r\n        }\r\n        accept(this.repository.definitions)\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n  }\r\n\r\n  private async onePass (fileName: string): Promise<any> {\r\n    const logger = this.logger\r\n    const fullFileName = path.join(this.rootPath, fileName)\r\n    const pass: fs.ReadStream = fs.createReadStream(fullFileName)\r\n    logger.info(`reading ${fullFileName}`)\r\n    const saxStream: SAXStream = require('sax').createStream(true, {})\r\n    pass.pipe(saxStream)\r\n    await this.singlePass(this, saxStream)\r\n  }\r\n}\r\n"]}