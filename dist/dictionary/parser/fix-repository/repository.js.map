{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../../../src/dictionary/parser/fix-repository/repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILooseObject } from '../../../collections/collection'\r\nimport { SimpleFieldDefinition, GroupFieldDefinition, ComponentFieldDefinition, MessageDefinition, FixDefinitions } from '../../definition'\r\nimport { Dictionary } from '../../../collections'\r\nimport { ContainedFieldSet, ContainedComponentField, ContainedGroupField, ContainedSimpleField } from '../../contained'\r\nimport { ContainedSetType } from '../../dict-primitive'\r\nimport { FixDefinitionSource, FixVersion } from '../../fix-versions'\r\nimport { GetJsFixLogger, IJsFixLogger } from '../../../config'\r\n\r\nexport interface IRepositoryField extends ILooseObject {\r\n  Tag: string\r\n  Name: string\r\n  Type: string\r\n  Description: string\r\n  AbbrName: string\r\n  NotReqXML: string\r\n  BaseCategory: string\r\n  BaseCategoryAbbrName: string\r\n}\r\n\r\nexport interface IRepositoryEnum extends ILooseObject {\r\n  Tag: string\r\n  Value: string\r\n  SymbolicName: string\r\n  Description: string\r\n}\r\n\r\nexport interface IRepositoryComponent extends ILooseObject {\r\n  ComponentID: string\r\n  ComponentType: string\r\n  CategoryID: string\r\n  Name: string\r\n  AbbrName: string\r\n  NotReqXML: string\r\n  Description: string\r\n}\r\n\r\nexport interface IRepositoryMessage extends ILooseObject {\r\n  ComponentID: string\r\n  MsgType: string\r\n  Name: string\r\n  CategoryID: string\r\n  SectionID: string\r\n  AbbrName: string\r\n  NotReqXML: string\r\n  Description: string\r\n}\r\n\r\nexport interface IRepositoryMsgContent extends ILooseObject {\r\n  ComponentID: string\r\n  TagText: string\r\n  Indent: string\r\n  Position: string\r\n  Reqd: string\r\n  Description: string\r\n}\r\n\r\nexport interface IRepositoryAbbreviation extends ILooseObject {\r\n  Term: string\r\n  AbbrTerm: string\r\n}\r\n\r\nexport class Repository {\r\n  public Enums: IRepositoryEnum[]\r\n  public Fields: IRepositoryField[]\r\n  public Components: IRepositoryComponent[]\r\n  public Messages: IRepositoryMessage[]\r\n  public MsgContents: IRepositoryMsgContent[]\r\n  public Abbreviations: IRepositoryAbbreviation[]\r\n  public includesAbbreviations: boolean\r\n    // derived from above\r\n  public readonly definitions: FixDefinitions\r\n  private readonly groupLookup: Dictionary<GroupFieldDefinition> = new Dictionary<GroupFieldDefinition>()\r\n  private contentLookup: Dictionary<IRepositoryMsgContent[]>\r\n  private componentLookup: Dictionary<IRepositoryComponent>\r\n  private readonly logger: IJsFixLogger\r\n\r\n  constructor (public readonly version: FixVersion, public readonly getLogger: GetJsFixLogger) {\r\n    this.logger = getLogger('Repository')\r\n    switch (version) {\r\n      case FixVersion.FIX44:\r\n      case FixVersion.FIX50:\r\n      case FixVersion.FIX50SP1:\r\n      case FixVersion.FIX50SP2:\r\n        this.includesAbbreviations = true\r\n        break\r\n\r\n      default: {\r\n        this.includesAbbreviations = false\r\n        break\r\n      }\r\n    }\r\n    this.definitions = new FixDefinitions(FixDefinitionSource.FixRepo, version)\r\n  }\r\n\r\n  public assign (name: string, data: ILooseObject[]): void {\r\n    switch (name) {\r\n      case 'Fields': {\r\n        this.Fields = data as IRepositoryField[]\r\n        break\r\n      }\r\n\r\n      case 'Enums': {\r\n        this.Enums = data as IRepositoryEnum[]\r\n        break\r\n      }\r\n\r\n      case 'Components': {\r\n        this.Components = data as IRepositoryComponent[]\r\n        break\r\n      }\r\n\r\n      case 'Messages': {\r\n        this.Messages = data as IRepositoryMessage[]\r\n        break\r\n      }\r\n\r\n      case 'MsgContents': {\r\n        this.MsgContents = data as IRepositoryMsgContent[]\r\n        if (!this.includesAbbreviations) {\r\n          this.toDefinitions()\r\n        }\r\n        break\r\n      }\r\n\r\n      case 'Abbreviations': {\r\n        this.Abbreviations = data as IRepositoryAbbreviation[]\r\n        this.toDefinitions()\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  private summarise (): void {\r\n    const logger = this.logger\r\n    logger.info(`definitions: ${this.definitions.simple.count()} fields`)\r\n    logger.info(`definitions: ${this.definitions.component.count()} components`)\r\n    logger.info(`definitions: ${this.definitions.message.count()} messages`)\r\n  }\r\n\r\n  private toDefinitions (): void {\r\n    this.fields()\r\n    this.complex()\r\n    this.header()\r\n    this.trailer()\r\n    this.summarise()\r\n  }\r\n\r\n  private complex (): void {\r\n    this.contentLookup = this.contents()\r\n    this.componentLookup = this.components()\r\n    this.Components.forEach((c: IRepositoryComponent) => this.resolve(c))\r\n    this.Messages.forEach((m: IRepositoryMessage) => {\r\n      const msg = this.message(m)\r\n      this.logger.debug(`${msg.toString()}`)\r\n      this.definitions.addMessage(msg)\r\n    })\r\n  }\r\n\r\n  private header (): void {\r\n    const h: ComponentFieldDefinition = this.definitions.component.get('StandardHeader')\r\n    this.definitions.component.add('header', h)\r\n  }\r\n\r\n  private trailer (): void {\r\n    const t: ComponentFieldDefinition = this.definitions.component.get('StandardTrailer')\r\n    this.definitions.component.add('trailer', t)\r\n  }\r\n\r\n  private fields (): void {\r\n    const definitions = this.definitions\r\n    this.Fields.forEach((f: IRepositoryField) => {\r\n      definitions.addSimpleFieldDef(new SimpleFieldDefinition(\r\n                f.Tag,\r\n                f.Name,\r\n                f.AbbrName ? f.AbbrName : f.Name,\r\n                f.BaseCategory,\r\n                f.BaseCategoryAbbrName,\r\n                f.Type.toUpperCase(),\r\n                f.Description))\r\n    })\r\n\r\n    for (const e of this.Enums) {\r\n      const field: SimpleFieldDefinition =\r\n                definitions.tagToSimple[parseInt(e.Tag, 10)]\r\n      if (field == null) {\r\n        continue\r\n      }\r\n      if (e.Value && e.SymbolicName) {\r\n        field.addEnum(e.Value, e.SymbolicName, e.Description)\r\n      }\r\n    }\r\n  }\r\n\r\n  private contents (): Dictionary<IRepositoryMsgContent[]> {\r\n    return this.MsgContents.reduce((a, current) => {\r\n      let content: IRepositoryMsgContent[] = a.get(current.ComponentID)\r\n      if (!content) {\r\n        content = []\r\n        a.add(current.ComponentID, content)\r\n      }\r\n      content[content.length] = current\r\n      return a\r\n    }, new Dictionary<IRepositoryMsgContent[]>())\r\n  }\r\n\r\n  private resolveToFieldSet (content: IRepositoryMsgContent[], parentSet: ContainedFieldSet): void {\r\n    content.forEach((current: IRepositoryMsgContent) => {\r\n      const required: boolean = current.Reqd === '1'\r\n      const tag: number = parseInt(current.TagText, 10)\r\n      if (!isNaN(tag)) {\r\n        const sf: SimpleFieldDefinition = this.definitions.tagToSimple[tag]\r\n        if (sf) {\r\n          parentSet.add(new ContainedSimpleField(sf, parentSet.fields.length, required, false))\r\n        }\r\n      } else {\r\n                // is there a definition for this type yet create.\r\n        let childSet: ContainedFieldSet = this.definitions.component.get(current.TagText)\r\n        if (!childSet) {\r\n          const cl: IRepositoryComponent = this.componentLookup.get(current.TagText)\r\n          if (cl) {\r\n            childSet = this.resolve(cl)\r\n          }\r\n        }\r\n        switch (childSet.type) {\r\n          case ContainedSetType.Component: {\r\n            parentSet.add(new ContainedComponentField(childSet, parentSet.fields.length, required))\r\n            break\r\n          }\r\n\r\n          case ContainedSetType.Group: {\r\n            parentSet.add(new ContainedGroupField(childSet as GroupFieldDefinition, parentSet.fields.length, required))\r\n            break\r\n          }\r\n\r\n          default: {\r\n            throw new Error(`unknown set type ${childSet.type}`)\r\n          }\r\n        }\r\n      }\r\n      return parentSet\r\n    })\r\n  }\r\n\r\n  private resolve (c: IRepositoryComponent): ContainedFieldSet {\r\n    switch (c.ComponentType) {\r\n      case 'ImplicitBlockRepeating':\r\n      case 'BlockRepeating': {\r\n        const content: IRepositoryMsgContent[] = this.contentLookup.get(c.ComponentID)\r\n        const noField: SimpleFieldDefinition = this.definitions.tagToSimple[parseInt(content[0].TagText, 10)]\r\n        let def: GroupFieldDefinition = this.groupLookup.get(c.ComponentID)\r\n        if (!def) {\r\n          def = new GroupFieldDefinition(c.Name, c.AbbrName, c.CategoryID, noField, c.Description)\r\n          this.resolveToFieldSet(content.slice(1), def)\r\n          this.groupLookup.add(c.ComponentID, def)\r\n        }\r\n        return def\r\n      }\r\n\r\n      default: {\r\n        const content: IRepositoryMsgContent[] = this.contentLookup.get(c.ComponentID)\r\n        let def: ComponentFieldDefinition = this.definitions.component.get(c.Name)\r\n        if (!def) {\r\n          def = new ComponentFieldDefinition(c.Name, c.AbbrName, c.CategoryID, c.Description)\r\n          this.resolveToFieldSet(content, def)\r\n          this.definitions.addComponentFieldDef(def)\r\n        }\r\n        return def\r\n      }\r\n    }\r\n  }\r\n\r\n  private message (m: IRepositoryMessage): MessageDefinition {\r\n    const definitions = this.definitions\r\n    const content: IRepositoryMsgContent[] = this.contentLookup.get(m.ComponentID)\r\n    let def: MessageDefinition = definitions.message.get(m.Name)\r\n    if (!def) {\r\n      def = new MessageDefinition(m.Name, m.AbbrName, m.MsgType, m.CategoryID, m.Description)\r\n      this.resolveToFieldSet(content, def)\r\n      definitions.addComponentFieldDef(def)\r\n    }\r\n    return def\r\n  }\r\n\r\n  private components (): Dictionary<IRepositoryComponent> {\r\n    return this.Components.reduce((a: Dictionary<IRepositoryComponent>, current: IRepositoryComponent) => {\r\n      a.add(current.Name, current)\r\n      a.add(current.ComponentID, current)\r\n      return a\r\n    }, new Dictionary<IRepositoryComponent>())\r\n  }\r\n}\r\n"]}