{"version":3,"file":"msg_tag.js","sourceRoot":"","sources":["../../../src/types/FIX4.4/msg_tag.ts"],"names":[],"mappings":"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","sourcesContent":["export enum MsgTag {\n/*\n***************************************************************\n* Account mnemonic as agreed between buy and sell sides, e.g. *\n* broker and institution or investor/intermediary and fund    *\n* manager.                                                    *\n***************************************************************\n*/\n  Account = 1,\n/*\n*************************************************\n* Unique identifier of advertisement message.   *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  AdvId = 2,\n/*\n*****************************************************\n* Reference identifier used with CANCEL and REPLACE *\n* transaction types.                                *\n* (Prior to FIX 4.1 this field was of type int)     *\n*****************************************************\n*/\n  AdvRefID = 3,\n/*\n*************************************\n* Broker's side of advertised trade *\n*************************************\n*/\n  AdvSide = 4,\n/*\n*****************************************************\n* Identifies advertisement message transaction type *\n*****************************************************\n*/\n  AdvTransType = 5,\n/*\n***************************************************************\n* Calculated average price of all fills on this order.        *\n* For Fixed Income trades AvgPx is always expressed as        *\n* percent-of-par, regardless of the PriceType (423) of LastPx *\n* (3). I.e., AvgPx will contain an average of percent-of-par  *\n* values (see LastParPx (669)) for issues traded in Yield,    *\n* Spread or Discount.                                         *\n***************************************************************\n*/\n  AvgPx = 6,\n/*\n***********************************************************\n* Message sequence number of first message in range to be *\n* resent                                                  *\n***********************************************************\n*/\n  BeginSeqNo = 7,\n/*\n*************************************************************\n* Identifies beginning of new message and protocol version. *\n* ALWAYS FIRST FIELD IN MESSAGE. (Always unencrypted)       *\n*************************************************************\n*/\n  BeginString = 8,\n/*\n************************************************************\n* Message length, in bytes, forward to the CheckSum field. *\n* ALWAYS SECOND FIELD IN MESSAGE. (Always unencrypted)     *\n************************************************************\n*/\n  BodyLength = 9,\n/*\n****************************************************************\n* Three byte, simple checksum (see Volume 2: \"Checksum         *\n* Calculation\" for description). ALWAYS LAST FIELD IN MESSAGE; *\n* i.e. serves, with the trailing <SOH>, as the end-of-message  *\n* delimiter. Always defined as three characters. (Always       *\n* unencrypted)                                                 *\n****************************************************************\n*/\n  CheckSum = 10,\n/*\n***************************************************************\n* Unique identifier for Order as assigned by the buy-side     *\n* (institution, broker, intermediary etc.) (identified by     *\n* SenderCompID (49) or OnBehalfOfCompID (5) as appropriate).  *\n* Uniqueness must be guaranteed within a single trading day.  *\n* Firms, particularly those which electronically submit       *\n* multi-day orders, trade globally or throughout market close *\n* periods, should ensure uniqueness across days, for example  *\n* by embedding a date within the ClOrdID field.               *\n***************************************************************\n*/\n  ClOrdID = 11,\n/*\n**************************************************************\n* Commission. Note if CommType (3) is percentage, Commission *\n* of 5% should be represented as .05.                        *\n**************************************************************\n*/\n  Commission = 12,\n/*\n*******************\n* Commission type *\n*******************\n*/\n  CommType = 13,\n/*\n**************************************************\n* Total quantity (e.g. number of shares) filled. *\n* (Prior to FIX 4.2 this field was of type int)  *\n**************************************************\n*/\n  CumQty = 14,\n/*\n****************************************************************\n* Identifies currency used for price. Absence of this field is *\n* interpreted as the default for the security. It is           *\n* recommended that systems provide the currency value whenever *\n* possible. See \"Appendix 6-A: Valid Currency Codes\" for       *\n* information on obtaining valid values.                       *\n****************************************************************\n*/\n  Currency = 15,\n/*\n***************************************************************\n* Message sequence number of last message in range to be      *\n* resent. If request is for a single message BeginSeqNo (7) = *\n* EndSeqNo. If request is for all messages subsequent to a    *\n* particular message, EndSeqNo = \"0\" (representing infinity). *\n***************************************************************\n*/\n  EndSeqNo = 16,\n/*\n***************************************************************\n* Unique identifier of execution message as assigned by       *\n* sell-side (broker, exchange, ECN) (will be 0 (zero) for     *\n* ExecType (50) =I (Order Status)). Uniqueness must be        *\n* guaranteed within a single trading day or the life of a     *\n* multi-day order. Firms which accept multi-day orders should *\n* consider embedding a date within the ExecID field to assure *\n* uniqueness across days. (Prior to FIX 4.1 this field was of *\n* type int)                                                   *\n***************************************************************\n*/\n  ExecID = 17,\n/*\n****************************************************************\n* Instructions for order handling on exchange trading floor.   *\n* If more than one instruction is applicable to an order, this *\n* field can contain multiple instructions separated by space.  *\n****************************************************************\n*/\n  ExecInst = 18,\n/*\n*********************************************************\n* Reference identifier used with Trade Cancel and Trade *\n* Correct execution types.                              *\n* (Prior to FIX 4.1 this field was of type int)         *\n*********************************************************\n*/\n  ExecRefID = 19,\n/*\n***********************************************************\n* Instructions for order handling on Broker trading floor *\n***********************************************************\n*/\n  HandlInst = 21,\n/*\n************************************************************\n* Identifies class or source of the SecurityID (48) value. *\n* Required if SecurityID is specified.                     *\n************************************************************\n*/\n  SecurityIDSource = 22,\n/*\n*************************************************\n* Unique identifier of IOI message.             *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  IOIID = 23,\n/*\n**********************************\n* Relative quality of indication *\n**********************************\n*/\n  IOIQltyInd = 25,\n/*\n******************************************************\n* Reference identifier used with CANCEL and REPLACE, *\n* transaction types.                                 *\n* (Prior to FIX 4.1 this field was of type int)      *\n******************************************************\n*/\n  IOIRefID = 26,\n/*\n****************************************************************\n* Quantity (e.g. number of shares) in numeric form or relative *\n* size.                                                        *\n****************************************************************\n*/\n  IOIQty = 27,\n/*\n*******************************************\n* Identifies IOI message transaction type *\n*******************************************\n*/\n  IOITransType = 28,\n/*\n**************************************\n* Broker capacity in order execution *\n**************************************\n*/\n  LastCapacity = 29,\n/*\n**************************************************************\n* Market of execution for last fill, or an indication of the *\n* market where an order was routed                           *\n* Valid values:                                              *\n* See \"Appendix 6-C\"                                         *\n**************************************************************\n*/\n  LastMkt = 30,\n/*\n******************************\n* Price of this (last) fill. *\n******************************\n*/\n  LastPx = 31,\n/*\n***********************************************************\n* Quantity (e.g. shares) bought/sold on this (last) fill. *\n* (Prior to FIX 4.2 this field was of type int)           *\n***********************************************************\n*/\n  LastQty = 32,\n/*\n*******************************************\n* Identifies number of lines of text body *\n*******************************************\n*/\n  NoLinesOfText = 33,\n/*\n***********************************\n* Integer message sequence number *\n***********************************\n*/\n  MsgSeqNum = 34,\n/*\n***************************************************************\n* Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always *\n* unencrypted)                                                *\n* Note: A \"U\" as the first character in the MsgType field     *\n* (i.e. U, U2, etc) indicates that the message format is      *\n* privately defined between the sender and receiver.          *\n***************************************************************\n*/\n  MsgType = 35,\n/*\n***********************\n* New sequence number *\n***********************\n*/\n  NewSeqNo = 36,\n/*\n**************************************************************\n* Unique identifier for Order as assigned by sell-side       *\n* (broker, exchange, ECN). Uniqueness must be guaranteed     *\n* within a single trading day. Firms which accept multi-day  *\n* orders should consider embedding a date within the OrderID *\n* field to assure uniqueness across days.                    *\n**************************************************************\n*/\n  OrderID = 37,\n/*\n**************************************************************\n* Quantity ordered. This represents the number of shares for *\n* equities or par, face or nominal value for FI instruments. *\n* (Prior to FIX 4.2 this field was of type int)              *\n**************************************************************\n*/\n  OrderQty = 38,\n/*\n***************************************************************\n* Identifies current status of order.                         *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\n  OrdStatus = 39,\n/*\n********************************************************\n* Order type                                           *\n* *** SOME VALUES ARE NO LONGER USED - See \"Deprecated *\n* (Phased-out) Features and Supported Approach\" ***    *\n* (see Volume : \"Glossary\" for value definitions)      *\n********************************************************\n*/\n  OrdType = 40,\n/*\n**************************************************************\n* ClOrdID () of the previous order (NOT the initial order of *\n* the day) as assigned by the institution, used to identify  *\n* the previous order in cancel and cancel/replace requests.  *\n**************************************************************\n*/\n  OrigClOrdID = 41,\n/*\n********************************************************\n* Time of message origination (always expressed in UTC *\n* (Universal Time Coordinated, also known as \"GMT\"))   *\n********************************************************\n*/\n  OrigTime = 42,\n/*\n**********************************************************\n* Indicates possible retransmission of message with this *\n* sequence number                                        *\n**********************************************************\n*/\n  PossDupFlag = 43,\n/*\n***********************************************\n* Price per unit of quantity (e.g. per share) *\n***********************************************\n*/\n  Price = 44,\n/*\n*************************************\n* Reference message sequence number *\n*************************************\n*/\n  RefSeqNum = 45,\n/*\n**************************************************************\n* Security identifier value of SecurityIDSource (22) type    *\n* (e.g. CUSIP, SEDOL, ISIN, etc). Requires SecurityIDSource. *\n**************************************************************\n*/\n  SecurityID = 48,\n/*\n*********************************************************\n* Assigned value used to identify firm sending message. *\n*********************************************************\n*/\n  SenderCompID = 49,\n/*\n***************************************************************\n* Assigned value used to identify specific message originator *\n* (desk, trader, etc.)                                        *\n***************************************************************\n*/\n  SenderSubID = 50,\n/*\n*********************************************************\n* Time of message transmission (always expressed in UTC *\n* (Universal Time Coordinated, also known as \"GMT\")     *\n*********************************************************\n*/\n  SendingTime = 52,\n/*\n**************************************************\n* Overall/total quantity (e.g. number of shares) *\n* (Prior to FIX 4.2 this field was of type int)  *\n**************************************************\n*/\n  Quantity = 53,\n/*\n*****************\n* Side of order *\n*****************\n*/\n  Side = 54,\n/*\n***************************************************************\n* Ticker symbol. Common, \"human understood\" representation of *\n* the security. SecurityID (48) value can be specified if no  *\n* symbol exists (e.g. non-exchange traded Collective          *\n* Investment Vehicles)                                        *\n* Use \"[N/A]\" for products which do not have a symbol.        *\n***************************************************************\n*/\n  Symbol = 55,\n/*\n***************************************************\n* Assigned value used to identify receiving firm. *\n***************************************************\n*/\n  TargetCompID = 56,\n/*\n***************************************************************\n* Assigned value used to identify specific individual or unit *\n* intended to receive message. \"ADMIN\" reserved for           *\n* administrative messages not intended for a specific user.   *\n***************************************************************\n*/\n  TargetSubID = 57,\n/*\n***************************************************************\n* Free format text string                                     *\n* (Note: this field does not have a specified maximum length) *\n***************************************************************\n*/\n  Text = 58,\n/*\n**************************************************************\n* Specifies how long the order remains in effect. Absence of *\n* this field is interpreted as DAY.                          *\n**************************************************************\n*/\n  TimeInForce = 59,\n/*\n******************************************************\n* Time of execution/order creation (expressed in UTC *\n* (Universal Time Coordinated, also known as \"GMT\")  *\n******************************************************\n*/\n  TransactTime = 60,\n/*\n****************\n* Urgency flag *\n****************\n*/\n  Urgency = 61,\n/*\n***************************************************************\n* Indicates expiration time of indication message (always     *\n* expressed in UTC (Universal Time Coordinated, also known as *\n* \"GMT\")                                                      *\n***************************************************************\n*/\n  ValidUntilTime = 62,\n/*\n****************************************************************\n* Indicates order settlement period. If present, SettlDate     *\n* (64) overrides this field. If both SettlType (63) and        *\n* SettDate (64) are omitted, the default for SettlType (63) is *\n* 0 (Regular)                                                  *\n* Regular is defined as the default settlement period for the  *\n* particular security on the exchange of execution.            *\n* In Fixed Income the contents of this field may influence the *\n* instrument definition if the SecurityID (48) is ambiguous.   *\n* In the US an active Treasury offering may be re-opened, and  *\n* for a time one CUSIP will apply to both the current and      *\n* \"when-issued\" securities. Supplying a value of \"7\" clarifies *\n* the instrument description; any other value or the absence   *\n* of this field should cause the respondent to default to the  *\n* active issue.                                                *\n****************************************************************\n*/\n  SettlType = 63,\n/*\n***************************************************************\n* Specific date of trade settlement (SettlementDate) in       *\n* YYYYMMDD format.                                            *\n* If present, this field overrides SettlType (63). This field *\n* is required if the value of SettlType (63) is 6 (Future) or *\n* 8 (Sellers Option). This field must be omitted if the value *\n* of SettlType (63) is 7 (When and If Issued)                 *\n* (expressed in local time at place of settlement)            *\n***************************************************************\n*/\n  SettlDate = 64,\n/*\n**************************************************************\n* Additional information about the security (e.g. preferred, *\n* warrants, etc.). Note also see SecurityType (67).          *\n* Valid values:                                              *\n* As defined in the NYSE Stock and bond Symbol Directory and *\n* in the AMEX Fitch Directory                                *\n* Fixed Income use:                                          *\n* WI = \"When Issued\" for a security to be reissued under an  *\n* old CUSIP or ISIN                                          *\n* CD = a EUCP with lump-sum interest rather than discount    *\n* price                                                      *\n**************************************************************\n*/\n  SymbolSfx = 65,\n/*\n****************************************************************\n* Unique identifier for list as assigned by institution, used  *\n* to associate multiple individual orders. Uniqueness must be  *\n* guaranteed within a single trading day. Firms which generate *\n* multi-day orders should consider embedding a date within the *\n* ListID field to assure uniqueness across days.               *\n****************************************************************\n*/\n  ListID = 66,\n/*\n***************************************************************\n* Sequence of individual order within list (i.e. ListSeqNo of *\n* TotNoOrders (68), 2 of 25, 3 of 25, . . . )                 *\n***************************************************************\n*/\n  ListSeqNo = 67,\n/*\n***************************************************************\n* Total number of list order entries across all messages.     *\n* Should be the sum of all NoOrders (73) in each message that *\n* has repeating list order entries related to the same ListID *\n* (66). Used to support fragmentation.                        *\n* (Prior to FIX 4.2 this field was named \"ListNoOrds\")        *\n***************************************************************\n*/\n  TotNoOrders = 68,\n/*\n*********************************************************\n* Free format text message containing list handling and *\n* execution instructions.                               *\n*********************************************************\n*/\n  ListExecInst = 69,\n/*\n*************************************************\n* Unique identifier for allocation message.     *\n* (Prior to FIX 4.1 this field was of type int) *\n*************************************************\n*/\n  AllocID = 70,\n/*\n***************************************************************\n* Identifies allocation transaction type                      *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\n  AllocTransType = 71,\n/*\n***********************************************************\n* Reference identifier to be used with AllocTransType (7) *\n* =Replace or Cancel.                                     *\n* (Prior to FIX 4.1 this field was of type int)           *\n***********************************************************\n*/\n  RefAllocID = 72,\n/*\n*********************************************************\n* Indicates number of orders to be combined for average *\n* pricing and allocation.                               *\n*********************************************************\n*/\n  NoOrders = 73,\n/*\n***************************************************************\n* Indicates number of decimal places to be used for average   *\n* pricing. Absence of this field indicates that default       *\n* precision arranged by the broker/institution is to be used. *\n***************************************************************\n*/\n  AvgPxPrecision = 74,\n/*\n****************************************************************\n* Indicates date of trade referenced in this message in        *\n* YYYYMMDD format. Absence of this field indicates current day *\n* (expressed in local time at place of trade).                 *\n****************************************************************\n*/\n  TradeDate = 75,\n/*\n***************************************************************\n* Indicates whether the resulting position after a trade      *\n* should be an opening position or closing position. Used for *\n* omnibus accounting - where accounts are held on a gross     *\n* basis instead of being netted together.                     *\n***************************************************************\n*/\n  PositionEffect = 77,\n/*\n**********************************************************\n* Number of repeating AllocAccount (79)/AllocPrice (366) *\n* entries.                                               *\n**********************************************************\n*/\n  NoAllocs = 78,\n/*\n************************\n* Sub-account mnemonic *\n************************\n*/\n  AllocAccount = 79,\n/*\n****************************************************\n* Quantity to be allocated to specific sub-account *\n* (Prior to FIX 4.2 this field was of type int)    *\n****************************************************\n*/\n  AllocQty = 80,\n/*\n*************************************************************\n* Processing code for sub-account. Absence of this field in *\n* AllocAccount (79) / AllocPrice (366) /AllocQty (80) /     *\n* ProcessCode instance indicates regular trade.             *\n*************************************************************\n*/\n  ProcessCode = 81,\n/*\n******************************************\n* Total number of reports within series. *\n******************************************\n*/\n  NoRpts = 82,\n/*\n****************************************************\n* Sequence number of message within report series. *\n****************************************************\n*/\n  RptSeq = 83,\n/*\n*************************************************\n* Total quantity canceled for this order.       *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  CxlQty = 84,\n/*\n****************************************************************\n* Number of delivery instruction fields in repeating group.    *\n* Note this field was removed in FIX 4.1 and reinstated in FIX *\n* 4.4.                                                         *\n****************************************************************\n*/\n  NoDlvyInst = 85,\n/*\n***********************************\n* Identifies status of allocation *\n***********************************\n*/\n  AllocStatus = 87,\n/*\n***********************************\n* Identifies reason for rejection *\n***********************************\n*/\n  AllocRejCode = 88,\n/*\n************************\n* Electronic signature *\n************************\n*/\n  Signature = 89,\n/*\n*******************************\n* Length of encrypted message *\n*******************************\n*/\n  SecureDataLen = 90,\n/*\n********************************\n* Actual encrypted data stream *\n********************************\n*/\n  SecureData = 91,\n/*\n***************************************\n* Number of bytes in signature field. *\n***************************************\n*/\n  SignatureLength = 93,\n/*\n**********************\n* Email message type *\n**********************\n*/\n  EmailType = 94,\n/*\n**************************************\n* Number of bytes in raw data field. *\n**************************************\n*/\n  RawDataLength = 95,\n/*\n*************************************************************\n* Unformatted raw data, can include bitmaps, word processor *\n* documents, etc.                                           *\n*************************************************************\n*/\n  RawData = 96,\n/*\n****************************************************************\n* Indicates that message may contain information that has been *\n* sent under another sequence number.                          *\n****************************************************************\n*/\n  PossResend = 97,\n/*\n************************\n* Method of encryption *\n************************\n*/\n  EncryptMethod = 98,\n/*\n***********************************************\n* Price per unit of quantity (e.g. per share) *\n***********************************************\n*/\n  StopPx = 99,\n/*\n**************************************************************\n* Execution destination as defined by institution when order *\n* is entered.                                                *\n* Valid values:                                              *\n* See \"Appendix 6-C\"                                         *\n**************************************************************\n*/\n  ExDestination = 100,\n/*\n************************************************\n* Code to identify reason for cancel rejection *\n************************************************\n*/\n  CxlRejReason = 102,\n/*\n************************************************\n* Code to identify reason for order rejection. *\n************************************************\n*/\n  OrdRejReason = 103,\n/*\n***************************\n* Code to qualify IOI use *\n***************************\n*/\n  IOIQualifier = 104,\n/*\n***********************************************************\n* Name of security issuer (e.g. International Business    *\n* Machines, GNMA).                                        *\n* see also Volume 7: \"PRODUCT: FIXED INCOME - Euro Issuer *\n* Values\"                                                 *\n***********************************************************\n*/\n  Issuer = 106,\n/*\n*************************\n* Security description. *\n*************************\n*/\n  SecurityDesc = 107,\n/*\n********************************\n* Heartbeat interval (seconds) *\n********************************\n*/\n  HeartBtInt = 108,\n/*\n*************************************************\n* Minimum quantity of an order to be executed.  *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  MinQty = 110,\n/*\n***************************************************************\n* Maximum quantity (e.g. number of shares) within an order to *\n* be shown on the exchange floor at any given time.           *\n* (Prior to FIX 4.2 this field was of type int)               *\n***************************************************************\n*/\n  MaxFloor = 111,\n/*\n**************************************************************\n* Identifier included in Test Request message to be returned *\n* in resulting Heartbeat                                     *\n**************************************************************\n*/\n  TestReqID = 112,\n/*\n******************************************************\n* Identifies party of trade responsible for exchange *\n* reporting.                                         *\n******************************************************\n*/\n  ReportToExch = 113,\n/*\n**********************************************************\n* Indicates whether the broker is to locate the stock in *\n* conjunction with a short sell order.                   *\n**********************************************************\n*/\n  LocateReqd = 114,\n/*\n****************************************************************\n* Assigned value used to identify firm originating message if  *\n* the message was delivered by a third party i.e. the third    *\n* party firm identifier would be delivered in the SenderCompID *\n* field and the firm originating the message in this field.    *\n****************************************************************\n*/\n  OnBehalfOfCompID = 115,\n/*\n***************************************************************\n* Assigned value used to identify specific message originator *\n* (i.e. trader) if the message was delivered by a third party *\n***************************************************************\n*/\n  OnBehalfOfSubID = 116,\n/*\n*******************************\n* Unique identifier for quote *\n*******************************\n*/\n  QuoteID = 117,\n/*\n***************************************************************\n* Total amount due as the result of the transaction (e.g. for *\n* Buy order - principal + commission + fees) reported in      *\n* currency of execution.                                      *\n***************************************************************\n*/\n  NetMoney = 118,\n/*\n***************************************************************\n* Total amount due expressed in settlement currency (includes *\n* the effect of the forex transaction)                        *\n***************************************************************\n*/\n  SettlCurrAmt = 119,\n/*\n*********************************************\n* Currency code of settlement denomination. *\n*********************************************\n*/\n  SettlCurrency = 120,\n/*\n*********************************************************\n* Indicates request for forex accommodation trade to be *\n* executed along with security transaction.             *\n*********************************************************\n*/\n  ForexReq = 121,\n/*\n**************************************************************\n* Original time of message transmission (always expressed in *\n* UTC (Universal Time Coordinated, also known as \"GMT\") when *\n* transmitting orders as the result of a resend request.     *\n**************************************************************\n*/\n  OrigSendingTime = 122,\n/*\n************************************************************\n* Indicates that the Sequence Reset message is replacing   *\n* administrative or application messages which will not be *\n* resent.                                                  *\n************************************************************\n*/\n  GapFillFlag = 123,\n/*\n******************************************************\n* No of execution repeating group entries to follow. *\n******************************************************\n*/\n  NoExecs = 124,\n/*\n***************************************************************\n* Time/Date of order expiration (always expressed in UTC      *\n* (Universal Time Coordinated, also known as \"GMT\")           *\n* The meaning of expiration is specific to the context where  *\n* the field is used.                                          *\n* For orders, this is the expiration time of a Good Til Date  *\n* TimeInForce.                                                *\n* For Quotes - this is the expiration of the quote.           *\n* Expiration time is provided across the quote message dialog *\n* to control the length of time of the overall quoting        *\n* process.                                                    *\n* For collateral requests, this is the time by which          *\n* collateral must be assigned.                                *\n* For collateral assignments, this is the time by which a     *\n* response to the assignment is expected.                     *\n***************************************************************\n*/\n  ExpireTime = 126,\n/*\n**********************************\n* Reason for execution rejection *\n**********************************\n*/\n  DKReason = 127,\n/*\n****************************************************************\n* Assigned value used to identify the firm targeted to receive *\n* the message if the message is delivered by a third party     *\n* i.e. the third party firm identifier would be delivered in   *\n* the TargetCompID (56) field and the ultimate receiver firm   *\n* ID in this field.                                            *\n****************************************************************\n*/\n  DeliverToCompID = 128,\n/*\n**************************************************************\n* Assigned value used to identify specific message recipient *\n* (i.e. trader) if the message is delivered by a third party *\n**************************************************************\n*/\n  DeliverToSubID = 129,\n/*\n****************************************************************\n* Indicates that IOI is the result of an existing agency order *\n* or a facilitation position resulting from an agency order,   *\n* not from principal trading or order solicitation activity.   *\n****************************************************************\n*/\n  IOINaturalFlag = 130,\n/*\n***************************************\n* Unique identifier for quote request *\n***************************************\n*/\n  QuoteReqID = 131,\n/*\n******************\n* Bid price/rate *\n******************\n*/\n  BidPx = 132,\n/*\n********************\n* Offer price/rate *\n********************\n*/\n  OfferPx = 133,\n/*\n*************************************************\n* Quantity of bid                               *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  BidSize = 134,\n/*\n*************************************************\n* Quantity of offer                             *\n* (Prior to FIX 4.2 this field was of type int) *\n*************************************************\n*/\n  OfferSize = 135,\n/*\n****************************************************\n* Number of repeating groups of miscellaneous fees *\n****************************************************\n*/\n  NoMiscFees = 136,\n/*\n***************************\n* Miscellaneous fee value *\n***************************\n*/\n  MiscFeeAmt = 137,\n/*\n*********************************\n* Currency of miscellaneous fee *\n*********************************\n*/\n  MiscFeeCurr = 138,\n/*\n***************************************\n* Indicates type of miscellaneous fee *\n***************************************\n*/\n  MiscFeeType = 139,\n/*\n***************************************\n* Previous closing price of security. *\n***************************************\n*/\n  PrevClosePx = 140,\n/*\n***********************************************************\n* Indicates that the both sides of the FIX session should *\n* reset sequence numbers.                                 *\n***********************************************************\n*/\n  ResetSeqNumFlag = 141,\n/*\n****************************************************************\n* Assigned value used to identify specific message             *\n* originator\u0019s location (i.e. geographic location and/or desk, *\n* trader)                                                      *\n****************************************************************\n*/\n  SenderLocationID = 142,\n/*\n***********************************************************\n* Assigned value used to identify specific message        *\n* destination\u0019s location (i.e. geographic location and/or *\n* desk, trader)                                           *\n***********************************************************\n*/\n  TargetLocationID = 143,\n/*\n****************************************************************\n* Assigned value used to identify specific message             *\n* originator\u0019s location (i.e. geographic location and/or desk, *\n* trader) if the message was delivered by a third party        *\n****************************************************************\n*/\n  OnBehalfOfLocationID = 144,\n/*\n****************************************************************\n* Assigned value used to identify specific message recipient\u0019s *\n* location (i.e. geographic location and/or desk, trader) if   *\n* the message was delivered by a third party                   *\n****************************************************************\n*/\n  DeliverToLocationID = 145,\n/*\n********************************************************\n* Specifies the number of repeating symbols specified. *\n********************************************************\n*/\n  NoRelatedSym = 146,\n/*\n***********************************\n* The subject of an Email message *\n***********************************\n*/\n  Subject = 147,\n/*\n**********************************\n* The headline of a News message *\n**********************************\n*/\n  Headline = 148,\n/*\n****************************************************************\n* A URI (Uniform Resource Identifier) or URL (Uniform Resource *\n* Locator) link to additional information (i.e.                *\n* http://www.XYZ.com/research.html)                            *\n* See \"Appendix 6-B FIX Fields Based Upon Other Standards\"     *\n****************************************************************\n*/\n  URLLink = 149,\n/*\n***************************************************************\n* Describes the specific ExecutionRpt (i.e. Pending Cancel)   *\n* while OrdStatus (39) will always identify the current order *\n* status (i.e. Partially Filled)                              *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\n  ExecType = 150,\n/*\n****************************************************************\n* Quantity open for further execution. If the OrdStatus (39)   *\n* is Canceled, DoneForTheDay, Expired, Calculated, or Rejected *\n* (in which case the order is no longer active) then LeavesQty *\n* could be 0, otherwise LeavesQty = OrderQty (38) \u0013 CumQty     *\n* (4).                                                         *\n* (Prior to FIX 4.2 this field was of type int)                *\n****************************************************************\n*/\n  LeavesQty = 151,\n/*\n**************************************************************\n* Specifies the approximate order quantity desired in total  *\n* monetary units vs. as tradeable units (e.g. number of      *\n* shares). The broker or fund manager (for CIV orders) would *\n* be responsible for converting and calculating a tradeable  *\n* unit (e.g. share) quantity (OrderQty (38)) based upon this *\n* amount to be used for the actual order and subsequent      *\n* messages.                                                  *\n**************************************************************\n*/\n  CashOrderQty = 152,\n/*\n************************************************************\n* AvgPx (6) for a specific AllocAccount (79)               *\n* For Fixed Income this is always expressed as \"percent of *\n* par\" price type.                                         *\n************************************************************\n*/\n  AllocAvgPx = 153,\n/*\n*************************************************\n* NetMoney (8) for a specific AllocAccount (79) *\n*************************************************\n*/\n  AllocNetMoney = 154,\n/*\n***************************************************************\n* Foreign exchange rate used to compute SettlCurrAmt (9) from *\n* Currency (5) to SettlCurrency (20)                          *\n***************************************************************\n*/\n  SettlCurrFxRate = 155,\n/*\n***********************************************************\n* Specifies whether or not SettlCurrFxRate (55) should be *\n* multiplied or divided                                   *\n***********************************************************\n*/\n  SettlCurrFxRateCalc = 156,\n/*\n**************************************************************\n* Number of Days of Interest for convertible bonds and fixed *\n* income. Note value may be negative.                        *\n**************************************************************\n*/\n  NumDaysInterest = 157,\n/*\n****************************************************************\n* The amount the buyer compensates the seller for the portion  *\n* of the next coupon interest payment the seller has earned    *\n* but will not receive from the issuer because the issuer will *\n* send the next coupon payment to the buyer. Accrued Interest  *\n* Rate is the annualized Accrued Interest amount divided by    *\n* the purchase price of the bond.                              *\n****************************************************************\n*/\n  AccruedInterestRate = 158,\n/*\n**************************************************************\n* Amount of Accrued Interest for convertible bonds and fixed *\n* income                                                     *\n**************************************************************\n*/\n  AccruedInterestAmt = 159,\n/*\n***************************************************************\n* Indicates mode used for Settlement Instructions message.    *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\n  SettlInstMode = 160,\n/*\n*************************************************************\n* Free format text related to a specific AllocAccount (79). *\n*************************************************************\n*/\n  AllocText = 161,\n/*\n*************************************************\n* Unique identifier for Settlement Instruction. *\n*************************************************\n*/\n  SettlInstID = 162,\n/*\n****************************************************\n* Settlement Instructions message transaction type *\n****************************************************\n*/\n  SettlInstTransType = 163,\n/*\n***********************************************************\n* Unique identifier for an email thread (new and chain of *\n* replies)                                                *\n***********************************************************\n*/\n  EmailThreadID = 164,\n/*\n***********************************************\n* Indicates source of Settlement Instructions *\n***********************************************\n*/\n  SettlInstSource = 165,\n/*\n***************************************************************\n* Indicates type of security. See also the Product (460) and  *\n* CFICode (46) fields. It is recommended that CFICode be used *\n* instead of SecurityType for non-Fixed Income instruments.   *\n* Example values (grouped by Product field value) (Note:      *\n* additional values may be used by mutual agreement of the    *\n* counterparties):                                            *\n* * Identify the Issuer in the \"Issuer\" field(06)             *\n* *** REPLACED values - See \"Replaced Features and Supported  *\n* Approach\" ***                                               *\n* NOTE: Additional values may be used by mutual agreement of  *\n* the counterparties)                                         *\n***************************************************************\n*/\n  SecurityType = 167,\n/*\n**************************************************************\n* Time the details within the message should take effect     *\n* (always expressed in UTC (Universal Time Coordinated, also *\n* known as \"GMT\")                                            *\n**************************************************************\n*/\n  EffectiveTime = 168,\n/*\n*****************************************************\n* Identifies the Standing Instruction database used *\n*****************************************************\n*/\n  StandInstDbType = 169,\n/*\n**************************************************************\n* Name of the Standing Instruction database represented with *\n* StandInstDbType (69) (i.e. the Global Custodian\u0019s name).   *\n**************************************************************\n*/\n  StandInstDbName = 170,\n/*\n****************************************************************\n* Unique identifier used on the Standing Instructions database *\n* for the Standing Instructions to be referenced.              *\n****************************************************************\n*/\n  StandInstDbID = 171,\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\n  SettlDeliveryType = 172,\n/*\n**********************\n* Bid F/X spot rate. *\n**********************\n*/\n  BidSpotRate = 188,\n/*\n****************************************************************\n* Bid F/X forward points added to spot rate. May be a negative *\n* value.                                                       *\n****************************************************************\n*/\n  BidForwardPoints = 189,\n/*\n************************\n* Offer F/X spot rate. *\n************************\n*/\n  OfferSpotRate = 190,\n/*\n*********************************************************\n* Offer F/X forward points added to spot rate. May be a *\n* negative value.                                       *\n*********************************************************\n*/\n  OfferForwardPoints = 191,\n/*\n*********************************************************\n* OrderQty (38) of the future part of a F/X swap order. *\n*********************************************************\n*/\n  OrderQty2 = 192,\n/*\n*********************************************************\n* SettDate (64) of the future part of a F/X swap order. *\n*********************************************************\n*/\n  SettlDate2 = 193,\n/*\n******************\n* F/X spot rate. *\n******************\n*/\n  LastSpotRate = 194,\n/*\n***********************************************************\n* F/X forward points added to LastSpotRate (94). May be a *\n* negative value.                                         *\n***********************************************************\n*/\n  LastForwardPoints = 195,\n/*\n***************************************************************\n* Can be used to link two different Allocation messages (each *\n* with unique AllocID (70)) together, i.e. for F/X \"Netting\"  *\n* or \"Swaps\". Should be unique.                               *\n***************************************************************\n*/\n  AllocLinkID = 196,\n/*\n**************************************************************\n* Identifies the type of Allocation linkage when AllocLinkID *\n* (96) is used.                                              *\n**************************************************************\n*/\n  AllocLinkType = 197,\n/*\n****************************************************************\n* Assigned by the party which accepts the order. Can be used   *\n* to provide the OrderID (37) used by an exchange or executing *\n* system.                                                      *\n****************************************************************\n*/\n  SecondaryOrderID = 198,\n/*\n*****************************************************\n* Number of repeating groups of IOIQualifiers (04). *\n*****************************************************\n*/\n  NoIOIQualifiers = 199,\n/*\n****************************************************************\n* Can be used with standardized derivatives vs. the            *\n* MaturityDate (54) field. Month and Year of the maturity      *\n* (used for standardized futures and options).                 *\n* Format:                                                      *\n* YYYYMM (i.e. 199903)                                         *\n* YYYYMMDD (20030323)                                          *\n* YYYYMMwN (200303w) for week                                  *\n* A specific date or can be appended to the MaturityMonthYear. *\n* For instance, if multiple standard products exist that       *\n* mature in the same Year and Month, but actually mature at a  *\n* different time, a value can be appended, such as \"w\" or \"w2\" *\n* to indicate week as opposed to week 2 expiration. Likewise,  *\n* the date (0-3) can be appended to indicate a specific        *\n* expiration (maturity date).                                  *\n****************************************************************\n*/\n  MaturityMonthYear = 200,\n/*\n****************************************************\n* Indicates whether an Option is for a put or call *\n****************************************************\n*/\n  PutOrCall = 201,\n/*\n*******************************\n* Strike Price for an Option. *\n*******************************\n*/\n  StrikePrice = 202,\n/*\n*************************************************\n* Used for derivative products, such as options *\n*************************************************\n*/\n  CoveredOrUncovered = 203,\n/*\n****************************************************************\n* Can be used for SecurityType (67) =OPT to identify a         *\n* particular security.                                         *\n* Valid values vary by SecurityExchange:                       *\n* *** REPLACED values - See \"Replaced Features and Supported   *\n* Approach\" ***                                                *\n* For Exchange: MONEP (Paris)                                  *\n* L = Long (a.k.a. \"American\")                                 *\n* S = Short (a.k.a. \"European\")                                *\n* For Exchanges: DTB (Frankfurt), HKSE (Hong Kong), and SOFFEX *\n* (Zurich)                                                     *\n* 0-9 = single digit \"version\" number assigned by exchange     *\n* following capital adjustments (0=current, =prior, 2=prior to *\n* , etc).                                                      *\n****************************************************************\n*/\n  OptAttribute = 206,\n/*\n********************************************\n* Market used to help identify a security. *\n* Valid values:                            *\n* See \"Appendix 6-C\"                       *\n********************************************\n*/\n  SecurityExchange = 207,\n/*\n**************************************************************\n* Indicates whether or not details should be communicated to *\n* BrokerOfCredit (i.e. step-in broker).                      *\n**************************************************************\n*/\n  NotifyBrokerOfCredit = 208,\n/*\n***************************************************************\n* Indicates how the receiver (i.e. third party) of Allocation *\n* message should handle/process the account details           *\n***************************************************************\n*/\n  AllocHandlInst = 209,\n/*\n***************************************************************\n* Maximum quantity (e.g. number of shares) within an order to *\n* be shown to other customers (i.e. sent via an IOI).         *\n* (Prior to FIX 4.2 this field was of type int)               *\n***************************************************************\n*/\n  MaxShow = 210,\n/*\n**************************************************************\n* Amount (signed) added to the peg for a pegged order in the *\n* context of the PegOffsetType (836)                         *\n* (Prior to FIX 4.4 this field was of type PriceOffset)      *\n**************************************************************\n*/\n  PegOffsetValue = 211,\n/*\n*************************************\n* Length of the XmlData data block. *\n*************************************\n*/\n  XmlDataLen = 212,\n/*\n***********************************************************\n* Actual XML data stream (e.g. FIXML). See approriate XML *\n* reference (e.g. FIXML). Note: may contain embedded SOH  *\n* characters.                                             *\n***********************************************************\n*/\n  XmlData = 213,\n/*\n*************************************************************\n* Reference identifier for the SettlInstID (62) with Cancel *\n* and Replace SettlInstTransType (63) transaction types.    *\n*************************************************************\n*/\n  SettlInstRefID = 214,\n/*\n****************************************************************\n* Number of repeating groups of RoutingID (27) and RoutingType *\n* (26) values.                                                 *\n* See Volume 3: \"Pre-Trade Message Targeting/Routing\"          *\n****************************************************************\n*/\n  NoRoutingIDs = 215,\n/*\n**************************************************\n* Indicates the type of RoutingID (27) specified *\n**************************************************\n*/\n  RoutingType = 216,\n/*\n******************************************************\n* Assigned value used to identify a specific routing *\n* destination.                                       *\n******************************************************\n*/\n  RoutingID = 217,\n/*\n****************************************************************\n* For Fixed Income. Either Swap Spread or Spread to Benchmark  *\n* depending upon the order type.                               *\n* Spread to Benchmark: Basis points relative to a benchmark.   *\n* To be expressed as \"count of basis points\" (vs. an absolute  *\n* value). E.g. High Grade Corporate Bonds may express price as *\n* basis points relative to benchmark (the BenchmarkCurveName   *\n* (22) field). Note: Basis points can be negative.             *\n* Swap Spread: Target spread for a swap.                       *\n****************************************************************\n*/\n  Spread = 218,\n/*\n***************************************************************\n* Identifies currency used for benchmark curve. See \"Appendix *\n* 6-A: Valid Currency Codes\" for information on obtaining     *\n* valid values.                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  BenchmarkCurveCurrency = 220,\n/*\n****************************\n* Name of benchmark curve. *\n****************************\n*/\n  BenchmarkCurveName = 221,\n/*\n****************************************************************\n* Point on benchmark curve. Free form values: e.g. \"Y\", \"7Y\",  *\n* \"INTERPOLATED\".                                              *\n* Sample values:                                               *\n* M = combination of a number between 1-12 and a \"M\" for month *\n* Y = combination of number between 1-100 and a \"Y\" for year}  *\n* 10Y-OLD = see above, then add \"-OLD\" when appropriate        *\n* INTERPOLATED = the point is mathematically derived           *\n* 2/2031 5 3/8 = the point is stated via a combination of      *\n* maturity month / year and coupon                             *\n* See Fixed Income-specific documentation at                   *\n* http://www.fixprotocol.org for additional values.            *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  BenchmarkCurvePoint = 222,\n/*\n****************************************************************\n* The rate of interest that, when multiplied by the principal, *\n* par value, or face value of a bond, provides the currency    *\n* amount of the periodic interest payment. The coupon is       *\n* always cited, along with maturity, in any quotation of a     *\n* bond's price.                                                *\n****************************************************************\n*/\n  CouponRate = 223,\n/*\n**************************************************************\n* Date interest is to be paid. Used in identifying Corporate *\n* Bond issues.                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n* (prior to FIX 4.4 field was of type UTCDate)               *\n**************************************************************\n*/\n  CouponPaymentDate = 224,\n/*\n****************************************************************\n* The date on which a bond or stock offering is issued. It may *\n* or may not be the same as the effective date (\"Dated Date\")  *\n* or the date on which interest begins to accrue (\"Interest    *\n* Accrual Date\")                                               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  IssueDate = 225,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Number of business days before repurchase of a repo.         *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  RepurchaseTerm = 226,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Percent of par at which a Repo will be repaid. Represented   *\n* as a percent, e.g. .9525 represents 95-/4 percent of par.    *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  RepurchaseRate = 227,\n/*\n***************************************************************\n* For Fixed Income: Amorization Factor for deriving Current   *\n* face from Original face for ABS or MBS securities, note the *\n* fraction may be greater than, equal to or less than . In    *\n* TIPS securities this is the Inflation index.                *\n* Qty * Factor * Price = Gross Trade Amount                   *\n* For Derivatives: Contract Value Factor by which price must  *\n* be adjusted to determine the true nominal value of one      *\n* futures/options contract.                                   *\n* (Qty * Price) * Factor = Nominal Value                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  Factor = 228,\n/*\n***********************************************************\n* Used with Fixed Income for Muncipal New Issue Market.   *\n* Agreement in principal between counter-parties prior to *\n* actual trade date.                                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n* (prior to FIX 4.4 field was of type UTCDate)            *\n***********************************************************\n*/\n  TradeOriginationDate = 229,\n/*\n***************************************************************\n* The date when a distribution of interest is deducted from a *\n* securities assets or set aside for payment to bondholders.  *\n* On the ex-date, the securities price drops by the amount of *\n* the distribution (plus or minus any market activity).       *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n* (prior to FIX 4.4 field was of type UTCDate)                *\n***************************************************************\n*/\n  ExDate = 230,\n/*\n****************************************************************\n* Specifies the ratio or multiply factor to convert from       *\n* \"nominal\" units (e.g. contracts) to total units (e.g.        *\n* shares) (e.g. 1.0, 100, 1000, etc). Applicable For Fixed     *\n* Income, Convertible Bonds, Derivatives, etc.                 *\n* In general quantities for all calsses should be expressed in *\n* the basic unit of the instrument, e.g. shares for equities,  *\n* norminal or par amount for bonds, currency for foreign       *\n* exchange. When quantity is expressed in contracts, e.g.      *\n* financing transactions and bond trade reporting,             *\n* ContractMutliplier should contain the number of units in one *\n* contract and can be omitted if the multiplier is the default *\n* amount for the instrument, i.e. 1,000 par of bonds,          *\n* 1,000,000 par for financing transactions.                    *\n****************************************************************\n*/\n  ContractMultiplier = 231,\n/*\n***********************************************************\n* Number of stipulation entries                           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3). *\n***********************************************************\n*/\n  NoStipulations = 232,\n/*\n***********************\n* Type of Stipulation *\n***********************\n*/\n  StipulationType = 233,\n/*\n**********************************************************\n* For Fixed Income. Value of stipulation.                *\n* The expression can be an absolute single value or a    *\n* combination of values and logical operators:           *\n* < value                                                *\n* > value                                                *\n* <= value                                               *\n* >= value                                               *\n* value                                                  *\n* value \u0013 value2                                         *\n* value OR value2                                        *\n* value AND value2                                       *\n* YES                                                    *\n* NO                                                     *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  StipulationValue = 234,\n/*\n*****************\n* Type of yield *\n*****************\n*/\n  YieldType = 235,\n/*\n**********************************************************\n* Yield percentage.                                      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  Yield = 236,\n/*\n**************************************************************\n* The price at which the securities are distributed to the   *\n* different members of an underwriting group for the primary *\n* market in Municipals, total gross underwriter's spread.    *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n**************************************************************\n*/\n  TotalTakedown = 237,\n/*\n***************************************************************\n* Provides the reduction in price for the secondary market in *\n* Muncipals.                                                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)      *\n***************************************************************\n*/\n  Concession = 238,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Identifies the collateral used in the transaction.           *\n* Valid values: see SecurityType (67) field                    *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  RepoCollateralSecurityType = 239,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Return of investor's principal in a security. Bond           *\n* redemption can occur before maturity date.                   *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  RedemptionDate = 240,\n/*\n**********************************************************\n* Underlying security\u0019s CouponPaymentDate.               *\n* See CouponPaymentDate (224) field for description      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  UnderlyingCouponPaymentDate = 241,\n/*\n**********************************************************\n* Underlying security\u0019s IssueDate.                       *\n* See IssueDate (225) field for description              *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  UnderlyingIssueDate = 242,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Underlying security\u0019s RepoCollateralSecurityType.            *\n* See RepoCollateralSecurityType (239) field for description   *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  UnderlyingRepoCollateralSecurityType = 243,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Underlying security\u0019s RepurchaseTerm.                        *\n* See RepurchaseTerm (226) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  UnderlyingRepurchaseTerm = 244,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Underlying security\u0019s RepurchaseRate.                        *\n* See RepurchaseRate (227) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  UnderlyingRepurchaseRate = 245,\n/*\n**********************************************************\n* Underlying security\u0019s Factor.                          *\n* See Factor (228) field for description                 *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  UnderlyingFactor = 246,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Underlying security\u0019s RedemptionDate.                        *\n* See RedemptionDate (240) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  UnderlyingRedemptionDate = 247,\n/*\n**********************************************************\n* Multileg instrument's individual leg security\u0019s        *\n* CouponPaymentDate.                                     *\n* See CouponPaymentDate (224) field for description      *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n* (prior to FIX 4.4 field was of type UTCDate)           *\n**********************************************************\n*/\n  LegCouponPaymentDate = 248,\n/*\n**************************************************************\n* Multileg instrument's individual leg security\u0019s IssueDate. *\n* See IssueDate (225) field for description                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)     *\n* (prior to FIX 4.4 field was of type UTCDate)               *\n**************************************************************\n*/\n  LegIssueDate = 249,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Multileg instrument's individual leg security\u0019s              *\n* RepoCollateralSecurityType.                                  *\n* See RepoCollateralSecurityType (239) field for description   *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  LegRepoCollateralSecurityType = 250,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Multileg instrument's individual leg security's              *\n* RepurchaseTerm.                                              *\n* See RepurchaseTerm (226) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  LegRepurchaseTerm = 251,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Multileg instrument's individual leg security\u0019s              *\n* RepurchaseRate.                                              *\n* See RepurchaseRate (227) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  LegRepurchaseRate = 252,\n/*\n***********************************************************\n* Multileg instrument's individual leg security\u0019s Factor. *\n* See Factor (228) field for description                  *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n***********************************************************\n*/\n  LegFactor = 253,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Multileg instrument's individual leg security\u0019s              *\n* RedemptionDate.                                              *\n* See RedemptionDate (240) field for description               *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  LegRedemptionDate = 254,\n/*\n****************************************************************\n* An evaluation of a company's ability to repay obligations or *\n* its likelihood of not defaulting. These evaluation are       *\n* provided by Credit Rating Agencies, i.e. S&P, Moody's.       *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n****************************************************************\n*/\n  CreditRating = 255,\n/*\n**********************************************************\n* Underlying security\u0019s CreditRating.                    *\n* See CreditRating (255) field for description           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  UnderlyingCreditRating = 256,\n/*\n**********************************************************\n* Multileg instrument's individual leg security\u0019s        *\n* CreditRating.                                          *\n* See CreditRating (255) field for description           *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  LegCreditRating = 257,\n/*\n***********************************************************\n* Driver and part of trade in the event that the Security *\n* Master file was wrong at the point of entry             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n***********************************************************\n*/\n  TradedFlatSwitch = 258,\n/*\n****************************************************************\n* BasisFeatureDate allows requesting firms within fixed income *\n* the ability to request an alternative yield-to-worst,        *\n* -maturity, -extended or other call. This flows through the   *\n* confirm process.                                             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)       *\n* (prior to FIX 4.4 field was of type UTCDate)                 *\n****************************************************************\n*/\n  BasisFeatureDate = 259,\n/*\n**********************************************************\n* Price for BasisFeatureDate.                            *\n* See BasisFeatureDate (259)                             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3) *\n**********************************************************\n*/\n  BasisFeaturePrice = 260,\n/*\n*********************************************\n* Unique identifier for Market Data Request *\n*********************************************\n*/\n  MDReqID = 262,\n/*\n*****************************\n* Subscription Request Type *\n*****************************\n*/\n  SubscriptionRequestType = 263,\n/*\n*************************************\n* Depth of market for Book Snapshot *\n*************************************\n*/\n  MarketDepth = 264,\n/*\n********************************************\n* Specifies the type of Market Data update *\n********************************************\n*/\n  MDUpdateType = 265,\n/*\n***************************************************************\n* Specifies whether or not book entries should be aggregated. *\n***************************************************************\n*/\n  AggregatedBook = 266,\n/*\n*************************************************\n* Number of MDEntryType (269) fields requested. *\n*************************************************\n*/\n  NoMDEntryTypes = 267,\n/*\n*********************************************\n* Number of entries in Market Data message. *\n*********************************************\n*/\n  NoMDEntries = 268,\n/*\n**************************\n* Type Market Data entry *\n**************************\n*/\n  MDEntryType = 269,\n/*\n***********************************\n* Price of the Market Data Entry. *\n***********************************\n*/\n  MDEntryPx = 270,\n/*\n************************************************************\n* Quantity or volume represented by the Market Data Entry. *\n************************************************************\n*/\n  MDEntrySize = 271,\n/*\n************************************************\n* Date of Market Data Entry.                   *\n* (prior to FIX 4.4 field was of type UTCDate) *\n************************************************\n*/\n  MDEntryDate = 272,\n/*\n******************************\n* Time of Market Data Entry. *\n******************************\n*/\n  MDEntryTime = 273,\n/*\n***************************\n* Direction of the \"tick\" *\n***************************\n*/\n  TickDirection = 274,\n/*\n*********************************\n* Market posting quote / trade. *\n* Valid values:                 *\n* See \"Appendix 6-C\"            *\n*********************************\n*/\n  MDMkt = 275,\n/*\n*********************************************************\n* Space-delimited list of conditions describing a quote *\n*********************************************************\n*/\n  QuoteCondition = 276,\n/*\n*********************************************************\n* Space-delimited list of conditions describing a trade *\n*********************************************************\n*/\n  TradeCondition = 277,\n/*\n****************************************\n* Unique Market Data Entry identifier. *\n****************************************\n*/\n  MDEntryID = 278,\n/*\n*************************************\n* Type of Market Data update action *\n*************************************\n*/\n  MDUpdateAction = 279,\n/*\n*****************************************\n* Refers to a previous MDEntryID (278). *\n*****************************************\n*/\n  MDEntryRefID = 280,\n/*\n*****************************************************\n* Reason for the rejection of a Market Data request *\n*****************************************************\n*/\n  MDReqRejReason = 281,\n/*\n*************************************\n* Originator of a Market Data Entry *\n*************************************\n*/\n  MDEntryOriginator = 282,\n/*\n***********************************************\n* Identification of a Market Maker\u0019s location *\n***********************************************\n*/\n  LocationID = 283,\n/*\n*******************************************\n* Identification of a Market Maker\u0019s desk *\n*******************************************\n*/\n  DeskID = 284,\n/*\n***********************\n* Reason for deletion *\n***********************\n*/\n  DeleteReason = 285,\n/*\n**************************************************\n* Flag that identifies a market data entry       *\n* (Prior to FIX 4.3 this field was of type char) *\n**************************************************\n*/\n  OpenCloseSettlFlag = 286,\n/*\n****************************************************************\n* Specifies the number of days that may elapse before delivery *\n* of the security                                              *\n****************************************************************\n*/\n  SellerDays = 287,\n/*\n***************************\n* Buying party in a trade *\n***************************\n*/\n  MDEntryBuyer = 288,\n/*\n****************************\n* Selling party in a trade *\n****************************\n*/\n  MDEntrySeller = 289,\n/*\n****************************************************************\n* Display position of a bid or offer, numbered from most       *\n* competitive to least competitive, per market side, beginning *\n* with .                                                       *\n****************************************************************\n*/\n  MDEntryPositionNo = 290,\n/*\n****************************************\n* Identifies a firm\u0019s financial status *\n****************************************\n*/\n  FinancialStatus = 291,\n/*\n*******************************************\n* Identifies the type of Corporate Action *\n*******************************************\n*/\n  CorporateAction = 292,\n/*\n*********************\n* Default Bid Size. *\n*********************\n*/\n  DefBidSize = 293,\n/*\n***********************\n* Default Offer Size. *\n***********************\n*/\n  DefOfferSize = 294,\n/*\n***********************************************\n* The number of quote entries for a QuoteSet. *\n***********************************************\n*/\n  NoQuoteEntries = 295,\n/*\n************************************************\n* The number of sets of quotes in the message. *\n************************************************\n*/\n  NoQuoteSets = 296,\n/*\n******************************************************\n* Identifies the status of the quote acknowledgement *\n******************************************************\n*/\n  QuoteStatus = 297,\n/*\n****************************************\n* Identifies the type of quote cancel. *\n****************************************\n*/\n  QuoteCancelType = 298,\n/*\n********************************************************\n* Uniquely identifies the quote as part of a QuoteSet. *\n********************************************************\n*/\n  QuoteEntryID = 299,\n/*\n*****************************\n* Reason Quote was rejected *\n*****************************\n*/\n  QuoteRejectReason = 300,\n/*\n****************************************************************\n* Level of Response requested from receiver of quote messages. *\n****************************************************************\n*/\n  QuoteResponseLevel = 301,\n/*\n********************************\n* Unique id for the Quote Set. *\n********************************\n*/\n  QuoteSetID = 302,\n/*\n*******************************************************\n* Indicates the type of Quote Request being generated *\n*******************************************************\n*/\n  QuoteRequestType = 303,\n/*\n***************************************************************\n* Total number of quotes for the quote set across all         *\n* messages. Should be the sum of all NoQuoteEntries (295) in  *\n* each message that has repeating quotes that are part of the *\n* same quote set.                                             *\n* (Prior to FIX 4.4 this field was named TotQuoteEntries)     *\n***************************************************************\n*/\n  TotNoQuoteEntries = 304,\n/*\n*************************************************\n* Underlying security\u0019s SecurityIDSource.       *\n* Valid values: see SecurityIDSource (22) field *\n*************************************************\n*/\n  UnderlyingSecurityIDSource = 305,\n/*\n*****************************************\n* Underlying security\u0019s Issuer.         *\n* See Issuer (06) field for description *\n*****************************************\n*/\n  UnderlyingIssuer = 306,\n/*\n***********************************************\n* Underlying security\u0019s SecurityDesc.         *\n* See SecurityDesc (07) field for description *\n***********************************************\n*/\n  UnderlyingSecurityDesc = 307,\n/*\n**********************************************************\n* Underlying security\u0019s SecurityExchange. Can be used to *\n* identify the underlying security.                      *\n* Valid values: see SecurityExchange (207)               *\n**********************************************************\n*/\n  UnderlyingSecurityExchange = 308,\n/*\n*********************************************\n* Underlying security\u0019s SecurityID.         *\n* See SecurityID (48) field for description *\n*********************************************\n*/\n  UnderlyingSecurityID = 309,\n/*\n***************************************************************\n* Underlying security\u0019s SecurityType.                         *\n* Valid values: see SecurityType (67) field                   *\n* (see below for details concerning this fields use in        *\n* conjunction with SecurityType=REPO)                         *\n* The following applies when used in conjunction with         *\n* SecurityType=REPO                                           *\n* Represents the general or specific type of security that    *\n* underlies a financing agreement                             *\n* Valid values for SecurityType=REPO:                         *\n* TREASURY = Federal government or treasury                   *\n* PROVINCE = State, province, region, etc.                    *\n* AGENCY = Federal agency                                     *\n* MORTGAGE = Mortgage passthrough                             *\n* CP = Commercial paper                                       *\n* CORP = Corporate                                            *\n* EQUITY = Equity                                             *\n* SUPRA = Supra-national agency                               *\n* CASH                                                        *\n* If bonds of a particular issuer or country are wanted in an *\n* Order or are in the basket of an Execution and the          *\n* SecurityType is not granular enough, include the            *\n* UnderlyingIssuer (306), UnderlyingCountryOfIssue (592),     *\n* UnderlyingProgram, UnderlyingRegType and/or                 *\n* <UnderlyingStipulations> block e.g.:                        *\n* SecurityType=REPO                                           *\n* UnderlyingSecurityType=MORTGAGE                             *\n* UnderlyingIssuer=GNMA                                       *\n* or                                                          *\n* SecurityType=REPO                                           *\n* UnderlyingSecurityType=AGENCY                               *\n* UnderlyingIssuer=CA Housing Trust                           *\n* UnderlyingCountryOfIssue=CA                                 *\n* or                                                          *\n* SecurityType=REPO                                           *\n* UnderlyingSecurityType=CORP                                 *\n* UnderlyingNoStipulations=                                   *\n* UnderlyingStipulationType=RATING                            *\n* UnderlyingStipulationValue=>bbb-                            *\n***************************************************************\n*/\n  UnderlyingSecurityType = 310,\n/*\n*****************************************\n* Underlying security\u0019s Symbol.         *\n* See Symbol (55) field for description *\n*****************************************\n*/\n  UnderlyingSymbol = 311,\n/*\n********************************************\n* Underlying security\u0019s SymbolSfx.         *\n* See SymbolSfx (65) field for description *\n********************************************\n*/\n  UnderlyingSymbolSfx = 312,\n/*\n*************************************************************\n* Underlying security\u0019s MaturityMonthYear. Can be used with *\n* standardized derivatives vs. the UnderlyingMaturityDate   *\n* (542) field.                                              *\n* See MaturityMonthYear (200) field for description         *\n*************************************************************\n*/\n  UnderlyingMaturityMonthYear = 313,\n/*\n***************************************\n* Underlying security\u0019s PutOrCall.    *\n* See PutOrCall field for description *\n***************************************\n*/\n  UnderlyingPutOrCall = 315,\n/*\n***********************************************\n* Underlying security\u0019s StrikePrice.          *\n* See StrikePrice (202) field for description *\n***********************************************\n*/\n  UnderlyingStrikePrice = 316,\n/*\n************************************************\n* Underlying security\u0019s OptAttribute.          *\n* See OptAttribute (206) field for description *\n************************************************\n*/\n  UnderlyingOptAttribute = 317,\n/*\n***********************************************************\n* Underlying security\u0019s Currency.                         *\n* See Currency (5) field for description and valid values *\n***********************************************************\n*/\n  UnderlyingCurrency = 318,\n/*\n***********************************************\n* Unique ID of a Security Definition Request. *\n***********************************************\n*/\n  SecurityReqID = 320,\n/*\n****************************************\n* Type of Security Definition Request. *\n****************************************\n*/\n  SecurityRequestType = 321,\n/*\n***********************************************\n* Unique ID of a Security Definition message. *\n***********************************************\n*/\n  SecurityResponseID = 322,\n/*\n************************************************\n* Type of Security Definition message response *\n************************************************\n*/\n  SecurityResponseType = 323,\n/*\n***************************************************\n* Unique ID of a Security Status Request message. *\n***************************************************\n*/\n  SecurityStatusReqID = 324,\n/*\n**************************************************************\n* Indicates whether or not message is being sent as a result *\n* of a subscription request or not.                          *\n**************************************************************\n*/\n  UnsolicitedIndicator = 325,\n/*\n***************************************************************\n* Identifies the trading status applicable to the transaction *\n***************************************************************\n*/\n  SecurityTradingStatus = 326,\n/*\n************************************************************\n* Denotes the reason for the Opening Delay or Trading Halt *\n************************************************************\n*/\n  HaltReason = 327,\n/*\n*************************************************************\n* Indicates whether or not the halt was due to Common Stock *\n* trading being halted.                                     *\n*************************************************************\n*/\n  InViewOfCommon = 328,\n/*\n************************************************************\n* Indicates whether or not the halt was due to the Related *\n* Security being halted.                                   *\n************************************************************\n*/\n  DueToRelated = 329,\n/*\n********************\n* Quantity bought. *\n********************\n*/\n  BuyVolume = 330,\n/*\n******************\n* Quantity sold. *\n******************\n*/\n  SellVolume = 331,\n/*\n***************************************************************\n* Represents an indication of the high end of the price range *\n* for a security prior to the open or reopen                  *\n***************************************************************\n*/\n  HighPx = 332,\n/*\n**************************************************************\n* Represents an indication of the low end of the price range *\n* for a security prior to the open or reopen                 *\n**************************************************************\n*/\n  LowPx = 333,\n/*\n*************************************\n* Identifies the type of adjustment *\n*************************************\n*/\n  Adjustment = 334,\n/*\n**************************************************\n* Unique ID of a Trading Session Status message. *\n**************************************************\n*/\n  TradSesReqID = 335,\n/*\n****************************************************************\n* Identifier for Trading Session                               *\n* Can be used to represent a specific market trading session   *\n* (e.g. \"PRE-OPEN\", \"CROSS_2\", \"AFTER-HOURS\", \"TOSTNET\",       *\n* \"TOSTNET2\", etc).                                            *\n* To specify good for session where session spans more than    *\n* one calendar day, use TimeInForce = Day in conjunction with  *\n* TradingSessionID.                                            *\n* Values should be bi-laterally agreed to between              *\n* counterparties.                                              *\n* Firms may register Trading Session values on the FIX website *\n* (presently a document maintained within \"ECN and Exchanges\"  *\n* working group section).                                      *\n****************************************************************\n*/\n  TradingSessionID = 336,\n/*\n******************************************************\n* Identifies the trader (e.g. \"badge number\") of the *\n* ContraBroker.                                      *\n******************************************************\n*/\n  ContraTrader = 337,\n/*\n*********************\n* Method of trading *\n*********************\n*/\n  TradSesMethod = 338,\n/*\n************************\n* Trading Session Mode *\n************************\n*/\n  TradSesMode = 339,\n/*\n********************************\n* State of the trading session *\n********************************\n*/\n  TradSesStatus = 340,\n/*\n****************************************\n* Starting time of the trading session *\n****************************************\n*/\n  TradSesStartTime = 341,\n/*\n**********************************************\n* Time of the opening of the trading session *\n**********************************************\n*/\n  TradSesOpenTime = 342,\n/*\n*************************************************\n* Time of the pre-closed of the trading session *\n*************************************************\n*/\n  TradSesPreCloseTime = 343,\n/*\n***************************************\n* Closing time of the trading session *\n***************************************\n*/\n  TradSesCloseTime = 344,\n/*\n***********************************\n* End time of the trading session *\n***********************************\n*/\n  TradSesEndTime = 345,\n/*\n***********************************\n* Number of orders in the market. *\n***********************************\n*/\n  NumberOfOrders = 346,\n/*\n*****************************************************\n* Type of message encoding (non-ASCII (non-English) *\n* characters) used in a message\u0019s \"Encoded\" fields. *\n*****************************************************\n*/\n  MessageEncoding = 347,\n/*\n***************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedIssuer *\n* (349) field.                                                *\n***************************************************************\n*/\n  EncodedIssuerLen = 348,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the Issuer  *\n* field in the encoded format specified via the                *\n* MessageEncoding (347) field. If used, the ASCII (English)    *\n* representation should also be specified in the Issuer field. *\n****************************************************************\n*/\n  EncodedIssuer = 349,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedSecurityDesc (35) field.               *\n*************************************************\n*/\n  EncodedSecurityDescLen = 350,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* SecurityDesc (07) field in the encoded format specified via *\n* the MessageEncoding (347) field. If used, the ASCII         *\n* (English) representation should also be specified in the    *\n* SecurityDesc field.                                         *\n***************************************************************\n*/\n  EncodedSecurityDesc = 351,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedListExecInst (353) field.              *\n*************************************************\n*/\n  EncodedListExecInstLen = 352,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* ListExecInst (69) field in the encoded format specified via *\n* the MessageEncoding (347) field. If used, the ASCII         *\n* (English) representation should also be specified in the    *\n* ListExecInst field.                                         *\n***************************************************************\n*/\n  EncodedListExecInst = 353,\n/*\n*************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedText *\n* (355) field.                                              *\n*************************************************************\n*/\n  EncodedTextLen = 354,\n/*\n**************************************************************\n* Encoded (non-ASCII characters) representation of the Text  *\n* (58) field in the encoded format specified via the         *\n* MessageEncoding (347) field. If used, the ASCII (English)  *\n* representation should also be specified in the Text field. *\n**************************************************************\n*/\n  EncodedText = 355,\n/*\n****************************************************************\n* Byte length of encoded (non-ASCII characters) EncodedSubject *\n* (357) field.                                                 *\n****************************************************************\n*/\n  EncodedSubjectLen = 356,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the Subject *\n* (47) field in the encoded format specified via the           *\n* MessageEncoding (347) field. If used, the ASCII (English)    *\n* representation should also be specified in the Subject       *\n* field.                                                       *\n****************************************************************\n*/\n  EncodedSubject = 357,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedHeadline (359) field.                  *\n*************************************************\n*/\n  EncodedHeadlineLen = 358,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* Headline (48) field in the encoded format specified via the *\n* MessageEncoding (347) field. If used, the ASCII (English)   *\n* representation should also be specified in the Headline     *\n* field.                                                      *\n***************************************************************\n*/\n  EncodedHeadline = 359,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedAllocText (36) field.                  *\n*************************************************\n*/\n  EncodedAllocTextLen = 360,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* AllocText (6) field in the encoded format specified via the *\n* MessageEncoding (347) field. If used, the ASCII (English)   *\n* representation should also be specified in the AllocText    *\n* field.                                                      *\n***************************************************************\n*/\n  EncodedAllocText = 361,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedUnderlyingIssuer (363) field.          *\n*************************************************\n*/\n  EncodedUnderlyingIssuerLen = 362,\n/*\n****************************************************************\n* Encoded (non-ASCII characters) representation of the         *\n* UnderlyingIssuer (306) field in the encoded format specified *\n* via the MessageEncoding (347) field. If used, the ASCII      *\n* (English) representation should also be specified in the     *\n* UnderlyingIssuer field.                                      *\n****************************************************************\n*/\n  EncodedUnderlyingIssuer = 363,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedUnderlyingSecurityDesc (365) field.    *\n*************************************************\n*/\n  EncodedUnderlyingSecurityDescLen = 364,\n/*\n***************************************************************\n* Encoded (non-ASCII characters) representation of the        *\n* UnderlyingSecurityDesc (307) field in the encoded format    *\n* specified via the MessageEncoding (347) field. If used, the *\n* ASCII (English) representation should also be specified in  *\n* the UnderlyingSecurityeDesc field.                          *\n***************************************************************\n*/\n  EncodedUnderlyingSecurityDesc = 365,\n/*\n****************************************************************\n* Executed price for an AllocAccount (79) entry used when      *\n* using \"executed price\" vs. \"average price\" allocations (e.g. *\n* Japan).                                                      *\n****************************************************************\n*/\n  AllocPrice = 366,\n/*\n**************************************************************\n* Indicates expiration time of this particular QuoteSet      *\n* (always expressed in UTC (Universal Time Coordinated, also *\n* known as \"GMT\")                                            *\n**************************************************************\n*/\n  QuoteSetValidUntilTime = 367,\n/*\n***********************************\n* Reason Quote Entry was rejected *\n***********************************\n*/\n  QuoteEntryRejectReason = 368,\n/*\n****************************************************************\n* The last MsgSeqNum (34) value received by the FIX engine and *\n* processed by downstream application, such as trading engine  *\n* or order routing system. Can be specified on every message   *\n* sent. Useful for detecting a backlog with a counterparty.    *\n****************************************************************\n*/\n  LastMsgSeqNumProcessed = 369,\n/*\n*****************************************************\n* The tag number of the FIX field being referenced. *\n*****************************************************\n*/\n  RefTagID = 371,\n/*\n*********************************************************\n* The MsgType (35) of the FIX message being referenced. *\n*********************************************************\n*/\n  RefMsgType = 372,\n/*\n**************************************************************\n* Code to identify reason for a session-level Reject message *\n**************************************************************\n*/\n  SessionRejectReason = 373,\n/*\n*******************************************\n* Identifies the Bid Request message type *\n*******************************************\n*/\n  BidRequestTransType = 374,\n/*\n********************************************************\n* Identifies contra broker. Standard NASD market-maker *\n* mnemonic is preferred.                               *\n********************************************************\n*/\n  ContraBroker = 375,\n/*\n********************************************************\n* ID used to represent this transaction for compliance *\n* purposes (e.g. OATS reporting).                      *\n********************************************************\n*/\n  ComplianceID = 376,\n/*\n*****************************************************\n* Indicates whether or not the order was solicited. *\n*****************************************************\n*/\n  SolicitedFlag = 377,\n/*\n************************************************************\n* Code to identify reason for an ExecutionRpt message sent *\n* with ExecType=Restated or used when communicating an     *\n* unsolicited cancel.                                      *\n************************************************************\n*/\n  ExecRestatementReason = 378,\n/*\n*************************************************************\n* The value of the business-level \"ID\" field on the message *\n* being referenced.                                         *\n*************************************************************\n*/\n  BusinessRejectRefID = 379,\n/*\n*********************************************************\n* Code to identify reason for a Business Message Reject *\n* message                                               *\n*********************************************************\n*/\n  BusinessRejectReason = 380,\n/*\n***************************************************************\n* Total amount traded (e.g. CumQty (4) * AvgPx (6)) expressed *\n* in units of currency.                                       *\n***************************************************************\n*/\n  GrossTradeAmt = 381,\n/*\n*********************************************\n* The number of ContraBroker (375) entries. *\n*********************************************\n*/\n  NoContraBrokers = 382,\n/*\n***********************************************************\n* Maximum number of bytes supported for a single message. *\n***********************************************************\n*/\n  MaxMessageSize = 383,\n/*\n***********************************************\n* Number of MsgTypes (35) in repeating group. *\n***********************************************\n*/\n  NoMsgTypes = 384,\n/*\n*******************************************\n* Specifies the direction of the messsage *\n*******************************************\n*/\n  MsgDirection = 385,\n/*\n*********************************************************\n* Number of TradingSessionIDs (336) in repeating group. *\n*********************************************************\n*/\n  NoTradingSessions = 386,\n/*\n***********************************\n* Total volume (quantity) traded. *\n***********************************\n*/\n  TotalVolumeTraded = 387,\n/*\n***************************************************************\n* Code to identify the price a DiscretionOffsetValue (389) is *\n* related to and should be mathematically added to            *\n***************************************************************\n*/\n  DiscretionInst = 388,\n/*\n*************************************************************\n* Amount (signed) added to the \"related to\" price specified *\n* via DiscretionInst (388), in the context of               *\n* DiscretionOffsetType (842)                                *\n* (Prior to FIX 4.4 this field was of type PriceOffset)     *\n*************************************************************\n*/\n  DiscretionOffsetValue = 389,\n/*\n***************************************************************\n* Unique identifier for Bid Response as assigned by sell-side *\n* (broker, exchange, ECN). Uniqueness must be guaranteed      *\n* within a single trading day.                                *\n***************************************************************\n*/\n  BidID = 390,\n/*\n**************************************************************\n* Unique identifier for a Bid Request as assigned by         *\n* institution. Uniqueness must be guaranteed within a single *\n* trading day.                                               *\n**************************************************************\n*/\n  ClientBidID = 391,\n/*\n************************************\n* Descriptive name for list order. *\n************************************\n*/\n  ListName = 392,\n/*\n**************************************************************\n* Total number of securities.                                *\n* (Prior to FIX 4.4 this field was named TotalNumSecurities) *\n**************************************************************\n*/\n  TotNoRelatedSym = 393,\n/*\n********************************************\n* Code to identify the type of Bid Request *\n********************************************\n*/\n  BidType = 394,\n/*\n****************************\n* Total number of tickets. *\n****************************\n*/\n  NumTickets = 395,\n/*\n***********************\n* Amounts in currency *\n***********************\n*/\n  SideValue1 = 396,\n/*\n***********************\n* Amounts in currency *\n***********************\n*/\n  SideValue2 = 397,\n/*\n******************************************\n* Number of BidDescriptor (400) entries. *\n******************************************\n*/\n  NoBidDescriptors = 398,\n/*\n****************************************************\n* Code to identify the type of BidDescriptor (400) *\n****************************************************\n*/\n  BidDescriptorType = 399,\n/*\n************************************************************\n* BidDescriptor value. Usage depends upon BidDescriptorTyp *\n* (399).                                                   *\n* If BidDescriptorType = 1                                 *\n* Industrials etc - Free text                              *\n* If BidDescriptorType =2                                  *\n* \"FR\" etc - ISO Country Codes                             *\n* If BidDescriptorType =3                                  *\n* FT00, FT250, STOX - Free text                            *\n************************************************************\n*/\n  BidDescriptor = 400,\n/*\n***************************************************************\n* Code to identify which \"SideValue\" the value refers to.     *\n* SideValue and SideValue2 are used as opposed to Buy or Sell *\n* so that the basket can be quoted either way as Buy or Sell. *\n***************************************************************\n*/\n  SideValueInd = 401,\n/*\n************************************************************\n* Liquidity indicator or lower limit if TotalNumSecurities *\n* (393) > . Represented as a percentage.                   *\n************************************************************\n*/\n  LiquidityPctLow = 402,\n/*\n*************************************************************\n* Upper liquidity indicator if TotalNumSecurities (393) > . *\n* Represented as a percentage.                              *\n*************************************************************\n*/\n  LiquidityPctHigh = 403,\n/*\n************************************************************\n* Value between LiquidityPctLow (402) and LiquidityPctHigh *\n* (403) in Currency                                        *\n************************************************************\n*/\n  LiquidityValue = 404,\n/*\n************************************************************\n* Eg Used in EFP trades 2% (EFP \u0013 Exchange for Physical ). *\n* Represented as a percentage.                             *\n************************************************************\n*/\n  EFPTrackingError = 405,\n/*\n**********************\n* Used in EFP trades *\n**********************\n*/\n  FairValue = 406,\n/*\n****************************************************\n* Used in EFP trades. Represented as a percentage. *\n****************************************************\n*/\n  OutsideIndexPct = 407,\n/*\n**********************\n* Used in EFP trades *\n**********************\n*/\n  ValueOfFutures = 408,\n/*\n****************************************************\n* Code to identify the type of liquidity indicator *\n****************************************************\n*/\n  LiquidityIndType = 409,\n/*\n**********************************************************\n* Overall weighted average liquidity expressed as a % of *\n* average daily volume. Represented as a percentage.     *\n**********************************************************\n*/\n  WtAverageLiquidity = 410,\n/*\n******************************************************\n* Indicates whether or not to exchange for phsyical. *\n******************************************************\n*/\n  ExchangeForPhysical = 411,\n/*\n*******************************\n* Value of stocks in Currency *\n*******************************\n*/\n  OutMainCntryUIndex = 412,\n/*\n***************************************************************\n* Percentage of program that crosses in Currency. Represented *\n* as a percentage.                                            *\n***************************************************************\n*/\n  CrossPercent = 413,\n/*\n**************************************************************\n* Code to identify the desired frequency of progress reports *\n**************************************************************\n*/\n  ProgRptReqs = 414,\n/*\n**********************************************************\n* Time in minutes between each ListStatus report sent by *\n* SellSide. Zero means don\u0019t send status.                *\n**********************************************************\n*/\n  ProgPeriodInterval = 415,\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross                                                        *\n****************************************************************\n*/\n  IncTaxInd = 416,\n/*\n*****************************************************\n* Indicates the total number of bidders on the list *\n*****************************************************\n*/\n  NumBidders = 417,\n/*\n***************************************\n* Code to represent the type of trade *\n***************************************\n*/\n  BidTradeType = 418,\n/*\n******************************************\n* Code to represent the basis price type *\n******************************************\n*/\n  BasisPxType = 419,\n/*\n*****************************************\n* Indicates the number of list entries. *\n*****************************************\n*/\n  NoBidComponents = 420,\n/*\n*****************************\n* ISO Country Code in field *\n*****************************\n*/\n  Country = 421,\n/*\n***************************************************************\n* Total number of strike price entries across all messages.   *\n* Should be the sum of all NoStrikes (428) in each message    *\n* that has repeating strike price entries related to the same *\n* ListID (66). Used to support fragmentation.                 *\n***************************************************************\n*/\n  TotNoStrikes = 422,\n/*\n************************************\n* Code to represent the price type *\n************************************\n*/\n  PriceType = 423,\n/*\n****************************************************************\n* For GT orders, the OrderQty (38) less all quantity (adjusted *\n* for stock splits) that traded on previous days. DayOrderQty  *\n* (424) = OrderQty \u0013 (CumQty (4) \u0013 DayCumQty (425))            *\n****************************************************************\n*/\n  DayOrderQty = 424,\n/*\n*************************************************\n* Quantity on a GT order that has traded today. *\n*************************************************\n*/\n  DayCumQty = 425,\n/*\n****************************************************************\n* The average price for quantity on a GT order that has traded *\n* today.                                                       *\n****************************************************************\n*/\n  DayAvgPx = 426,\n/*\n********************************************************\n* Code to identify whether to book out executions on a *\n* part-filled GT order on the day of execution or to   *\n* accumulate                                           *\n********************************************************\n*/\n  GTBookingInst = 427,\n/*\n****************************************\n* Number of list strike price entries. *\n****************************************\n*/\n  NoStrikes = 428,\n/*\n*************************************\n* Code to represent the status type *\n*************************************\n*/\n  ListStatusType = 429,\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross                                                        *\n****************************************************************\n*/\n  NetGrossInd = 430,\n/*\n************************************************\n* Code to represent the status of a list order *\n************************************************\n*/\n  ListOrderStatus = 431,\n/*\n****************************************************************\n* Date of order expiration (last day the order can trade),     *\n* always expressed in terms of the local market date. The time *\n* at which the order expires is determined by the local        *\n* market\u0019s business practices                                  *\n****************************************************************\n*/\n  ExpireDate = 432,\n/*\n********************************************\n* Identifies the type of ListExecInst (69) *\n********************************************\n*/\n  ListExecInstType = 433,\n/*\n*************************************************************\n* Identifies the type of request that a Cancel Reject is in *\n* response to                                               *\n*************************************************************\n*/\n  CxlRejResponseTo = 434,\n/*\n**********************************************\n* Underlying security\u0019s CouponRate.          *\n* See CouponRate (223) field for description *\n**********************************************\n*/\n  UnderlyingCouponRate = 435,\n/*\n*****************************************************\n* Underlying security\u0019s ContractMultiplier.         *\n* See ContractMultiplier (23) field for description *\n*****************************************************\n*/\n  UnderlyingContractMultiplier = 436,\n/*\n************************************************\n* Quantity traded with the ContraBroker (375). *\n************************************************\n*/\n  ContraTradeQty = 437,\n/*\n****************************************************************\n* Identifes the time of the trade with the ContraBroker (375). *\n* (always expressed in UTC (Universal Time Coordinated, also   *\n* known as \"GMT\")                                              *\n****************************************************************\n*/\n  ContraTradeTime = 438,\n/*\n*********************************************************\n* Number of Securites between LiquidityPctLow (402) and *\n* LiquidityPctHigh (403) in Currency.                   *\n*********************************************************\n*/\n  LiquidityNumSecurities = 441,\n/*\n**************************************************************\n* Used to indicate what an Execution Report represents (e.g. *\n* used with multi-leg securities, such as option strategies, *\n* spreads, etc.).                                            *\n**************************************************************\n*/\n  MultiLegReportingType = 442,\n/*\n*******************************************************\n* The time at which current market prices are used to *\n* determine the value of a basket.                    *\n*******************************************************\n*/\n  StrikeTime = 443,\n/*\n***************************************************\n* Free format text string related to List Status. *\n***************************************************\n*/\n  ListStatusText = 444,\n/*\n*************************************************\n* Byte length of encoded (non-ASCII characters) *\n* EncodedListStatusText (446) field.            *\n*************************************************\n*/\n  EncodedListStatusTextLen = 445,\n/*\n**************************************************************\n* Encoded (non-ASCII characters) representation of the       *\n* ListStatusText (444) field in the encoded format specified *\n* via the MessageEncoding (347) field. If used, the ASCII    *\n* (English) representation should also be specified in the   *\n* ListStatusText field.                                      *\n**************************************************************\n*/\n  EncodedListStatusText = 446,\n/*\n*************************************************************\n* Identifies class or source of the PartyID (448) value.    *\n* Required if PartyID is specified. Note: applicable values *\n* depend upon PartyRole (452) specified.                    *\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"     *\n*************************************************************\n*/\n  PartyIDSource = 447,\n/*\n****************************************************************\n* Party identifier/code. See PartyIDSource (447) and PartyRole *\n* (452).                                                       *\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"        *\n****************************************************************\n*/\n  PartyID = 448,\n/*\n****************************************************************\n* Net change from previous day\u0019s closing price vs. last traded *\n* price.                                                       *\n****************************************************************\n*/\n  NetChgPrevDay = 451,\n/*\n***************************************************************\n* Identifies the type or role of the PartyID (448) specified. *\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"       *\n***************************************************************\n*/\n  PartyRole = 452,\n/*\n***************************************************************\n* Number of PartyID (448), PartyIDSource (447), and PartyRole *\n* (452) entries                                               *\n***************************************************************\n*/\n  NoPartyIDs = 453,\n/*\n******************************************\n* Number of SecurityAltID (455) entries. *\n******************************************\n*/\n  NoSecurityAltID = 454,\n/*\n************************************************************\n* Alternate Security identifier value for this security of *\n* SecurityAltIDSource (456) type (e.g. CUSIP, SEDOL, ISIN, *\n* etc). Requires SecurityAltIDSource.                      *\n************************************************************\n*/\n  SecurityAltID = 455,\n/*\n****************************************************************\n* Identifies class or source of the SecurityAltID (455) value. *\n* Required if SecurityAltID is specified.                      *\n* Valid values:                                                *\n* Same valid values as the SecurityIDSource (22) field         *\n****************************************************************\n*/\n  SecurityAltIDSource = 456,\n/*\n****************************************************\n* Number of UnderlyingSecurityAltID (458) entries. *\n****************************************************\n*/\n  NoUnderlyingSecurityAltID = 457,\n/*\n**************************************************************\n* Alternate Security identifier value for this underlying    *\n* security of UnderlyingSecurityAltIDSource (459) type (e.g. *\n* CUSIP, SEDOL, ISIN, etc). Requires                         *\n* UnderlyingSecurityAltIDSource.                             *\n**************************************************************\n*/\n  UnderlyingSecurityAltID = 458,\n/*\n*************************************************************\n* Identifies class or source of the UnderlyingSecurityAltID *\n* (458) value. Required if UnderlyingSecurityAltID is       *\n* specified.                                                *\n* Valid values:                                             *\n* Same valid values as the SecurityIDSource (22) field      *\n*************************************************************\n*/\n  UnderlyingSecurityAltIDSource = 459,\n/*\n************************************************************\n* Indicates the type of product the security is associated *\n* with. See also the CFICode (46) and SecurityType (67)    *\n* fields.                                                  *\n************************************************************\n*/\n  Product = 460,\n/*\n**************************************************************\n* Indicates the type of security using ISO 0962 standard,    *\n* Classification of Financial Instruments (CFI code) values. *\n* ISO 0962 is maintained by ANNA (Association of National    *\n* Numbering Agencies) acting as Registration Authority. See  *\n* \"Appendix 6-B FIX Fields Based Upon Other Standards\". See  *\n* also the Product (460) and SecurityType (67) fields. It is *\n* recommended that CFICode be used instead of SecurityType   *\n* (67) for non-Fixed Income instruments.                     *\n* A subset of possible values applicable to FIX usage are    *\n* identified in \"Appendix 6-D CFICode Usage - ISO 0962       *\n* Classification of Financial Instruments (CFI code)\"        *\n**************************************************************\n*/\n  CFICode = 461,\n/*\n****************************************\n* Underlying security\u0019s Product.       *\n* Valid values: see Product(460) field *\n****************************************\n*/\n  UnderlyingProduct = 462,\n/*\n***************************************\n* Underlying security\u0019s CFICode.      *\n* Valid values: see CFICode (46)field *\n***************************************\n*/\n  UnderlyingCFICode = 463,\n/*\n***************************************************************\n* Indicates whether or not this FIX Session is a \"test\" vs.   *\n* \"production\" connection. Useful for preventing \"accidents\". *\n***************************************************************\n*/\n  TestMessageIndicator = 464,\n/*\n***********************************************************\n* Common reference passed to a post-trade booking process *\n* (e.g. industry matching utility).                       *\n***********************************************************\n*/\n  BookingRefID = 466,\n/*\n************************************************************\n* Unique identifier for a specific NoAllocs (78) repeating *\n* group instance (e.g. for an AllocAccount).               *\n************************************************************\n*/\n  IndividualAllocID = 467,\n/*\n****************************************************************\n* Specifies which direction to round For CIV \u0013 indicates       *\n* whether or not the quantity of shares/units is to be rounded *\n* and in which direction where CashOrdQty (52) or (for CIV     *\n* only) OrderPercent (56) are specified on an order.           *\n* The default is for rounding to be at the discretion of the   *\n* executing broker or fund manager.                            *\n* e.g. for an order specifying CashOrdQty or OrderPercent if   *\n* the calculated number of shares/units was 325.76 and         *\n* RoundingModulus (469) was 0 \u0013 \"round down\" would give 320    *\n* units, \"round up\" would give 330 units and \"round to         *\n* nearest\" would give 320 units.                               *\n****************************************************************\n*/\n  RoundingDirection = 468,\n/*\n****************************************************************\n* For CIV - a float value indicating the value to which        *\n* rounding is required.                                        *\n* i.e. 0 means round to a multiple of 0 units/shares; 0.5      *\n* means round to a multiple of 0.5 units/shares.               *\n* The default, if RoundingDirection (468) is specified without *\n* RoundingModulus, is to round to a whole unit/share.          *\n****************************************************************\n*/\n  RoundingModulus = 469,\n/*\n***************************************************************\n* ISO Country code of instrument issue (e.g. the country      *\n* portion typically used in ISIN). Can be used in conjunction *\n* with non-ISIN SecurityID (48) (e.g. CUSIP for Municipal     *\n* Bonds without ISIN) to provide uniqueness.                  *\n***************************************************************\n*/\n  CountryOfIssue = 470,\n/*\n***************************************************\n* A two-character state or province abbreviation. *\n***************************************************\n*/\n  StateOrProvinceOfIssue = 471,\n/*\n***************************************************************\n* Identifies the locale. For Municipal Security Issuers other *\n* than state or province. Refer to                            *\n* http://www.atmos.albany.edu/cgi/stagrep-cgi                 *\n* Reference the IATA city codes for values.                   *\n* Note IATA (International Air Transport Association)         *\n* maintains the codes at www.iata.org.                        *\n***************************************************************\n*/\n  LocaleOfIssue = 472,\n/*\n********************************************************\n* The number of registration details on a Registration *\n* Instructions message                                 *\n********************************************************\n*/\n  NoRegistDtls = 473,\n/*\n*************************************************************\n* Set of Correspondence address details, possibly including *\n* phone, fax, etc.                                          *\n*************************************************************\n*/\n  MailingDtls = 474,\n/*\n************************************************************\n* The ISO 366 Country code (2 character) identifying which *\n* country the beneficial investor is resident for tax      *\n* purposes.                                                *\n************************************************************\n*/\n  InvestorCountryOfResidence = 475,\n/*\n**********************************************************\n* \"Settlement Payment Reference\" \u0013 A free format Payment *\n* reference to assist with reconciliation, e.g. a Client *\n* and/or Order ID number.                                *\n**********************************************************\n*/\n  PaymentRef = 476,\n/*\n***************************************************************\n* A code identifying the payment method for a (fractional)    *\n* distribution.                                               *\n* 13 through 998 are reserved for future use                  *\n* Values above 000 are available for use by private agreement *\n* among counterparties                                        *\n***************************************************************\n*/\n  DistribPaymentMethod = 477,\n/*\n************************************************************\n* Specifies currency to be use for Cash Distributions\u0013 see *\n* \"Appendix 6-A; Valid Currency Codes\".                    *\n************************************************************\n*/\n  CashDistribCurr = 478,\n/*\n*************************************************************\n* Specifies currency to be use for Commission (2) if the    *\n* Commission currency is different from the Deal Currency - *\n* see \"Appendix 6-A; Valid Currency Codes\".                 *\n*************************************************************\n*/\n  CommCurrency = 479,\n/*\n******************************************************\n* For CIV \u0013 A one character code identifying whether *\n* Cancellation rights/Cooling off period applies     *\n******************************************************\n*/\n  CancellationRights = 480,\n/*\n************************************************************\n* A one character code identifying Money laundering status *\n************************************************************\n*/\n  MoneyLaunderingStatus = 481,\n/*\n***************************************************\n* Free format text to specify mailing instruction *\n* requirements, e.g. \"no third party mailings\".   *\n***************************************************\n*/\n  MailingInst = 482,\n/*\n************************************************************\n* For CIV A date and time stamp to indicate the time a CIV *\n* order was booked by the fund manager.                    *\n************************************************************\n*/\n  TransBkdTime = 483,\n/*\n***************************************************************\n* For CIV - Identifies how the execution price LastPx (3) was *\n* calculated from the fund unit/share price(s) calculated at  *\n* the fund valuation point                                    *\n***************************************************************\n*/\n  ExecPriceType = 484,\n/*\n****************************************************************\n* For CIV the amount or percentage by which the fund           *\n* unit/share price was adjusted, as indicated by ExecPriceType *\n* (484)                                                        *\n****************************************************************\n*/\n  ExecPriceAdjustment = 485,\n/*\n********************************************************\n* The date of birth applicable to the individual, e.g. *\n* required to open some types of tax-exempt account.   *\n********************************************************\n*/\n  DateOfBirth = 486,\n/*\n****************************************************\n* Identifies Trade Report message transaction type *\n* (Prior to FIX 4.4 this field was of type char)   *\n****************************************************\n*/\n  TradeReportTransType = 487,\n/*\n****************************************************************\n* The name of the payment card holder as specified on the card *\n* being used for payment.                                      *\n****************************************************************\n*/\n  CardHolderName = 488,\n/*\n***********************************************************\n* The number of the payment card as specified on the card *\n* being used for payment.                                 *\n***********************************************************\n*/\n  CardNumber = 489,\n/*\n****************************************************************\n* The expiry date of the payment card as specified on the card *\n* being used for payment.                                      *\n****************************************************************\n*/\n  CardExpDate = 490,\n/*\n************************************************************\n* The issue number of the payment card as specified on the *\n* card being used for payment. This is only applicable to  *\n* certain types of card.                                   *\n************************************************************\n*/\n  CardIssNum = 491,\n/*\n***************************************************************\n* A code identifying the Settlement payment method.           *\n* 16 through 998 are reserved for future use                  *\n* Values above 000 are available for use by private agreement *\n* among counterparties                                        *\n***************************************************************\n*/\n  PaymentMethod = 492,\n/*\n**************************************************************\n* For CIV \u0013 a fund manager-defined code identifying which of *\n* the fund manager\u0019s account types is required.              *\n**************************************************************\n*/\n  RegistAcctType = 493,\n/*\n****************************************************************\n* Free format text defining the designation to be associated   *\n* with a holding on the register. Used to identify assets of a *\n* specific underlying investor using a common registration,    *\n* e.g. a broker\u0019s nominee or street name.                      *\n****************************************************************\n*/\n  Designation = 494,\n/*\n***************************************************************\n* For CIV - a code identifying the type of tax exempt account *\n* in which purchased shares/units are to be held              *\n***************************************************************\n*/\n  TaxAdvantageType = 495,\n/*\n****************************************************************\n* Text indicating reason(s) why a Registration Instruction has *\n* been rejected.                                               *\n****************************************************************\n*/\n  RegistRejReasonText = 496,\n/*\n***********************************************************\n* A one character code identifying whether the Fund based *\n* renewal commission is to be waived.                     *\n***********************************************************\n*/\n  FundRenewWaiv = 497,\n/*\n******************************************************\n* Name of local agent bank if for cash distributions *\n******************************************************\n*/\n  CashDistribAgentName = 498,\n/*\n***************************************************************\n* BIC (Bank Identification Code--Swift managed) code of agent *\n* bank for cash distributions                                 *\n***************************************************************\n*/\n  CashDistribAgentCode = 499,\n/*\n***************************************************\n* Account number at agent bank for distributions. *\n***************************************************\n*/\n  CashDistribAgentAcctNumber = 500,\n/*\n***************************************************************\n* Free format Payment reference to assist with reconciliation *\n* of distributions.                                           *\n***************************************************************\n*/\n  CashDistribPayRef = 501,\n/*\n****************************************************\n* Name of account at agent bank for distributions. *\n****************************************************\n*/\n  CashDistribAgentAcctName = 502,\n/*\n*************************************************************\n* The start date of the card as specified on the card being *\n* used for payment.                                         *\n*************************************************************\n*/\n  CardStartDate = 503,\n/*\n**********************************************************\n* The date written on a cheque or date payment should be *\n* submitted to the relevant clearing system.             *\n**********************************************************\n*/\n  PaymentDate = 504,\n/*\n****************************************************************\n* Identifies sender of a payment, e.g. the payment remitter or *\n* a customer reference number.                                 *\n****************************************************************\n*/\n  PaymentRemitterID = 505,\n/*\n**************************************************************\n* Registration status as returned by the broker or (for CIV) *\n* the fund manager                                           *\n**************************************************************\n*/\n  RegistStatus = 506,\n/*\n**************************************************************\n* Reason(s) why Registration Instructions has been rejected. *\n* The reason may be further amplified in the                 *\n* RegistRejReasonCode field.                                 *\n* Possible values of reason code include:                    *\n**************************************************************\n*/\n  RegistRejReasonCode = 507,\n/*\n**************************************************************\n* Reference identifier for the RegistID (53) with Cancel and *\n* Replace RegistTransType (54) transaction types.            *\n**************************************************************\n*/\n  RegistRefID = 508,\n/*\n**********************************************************\n* Set of Registration name and address details, possibly *\n* including phone, fax etc.                              *\n**********************************************************\n*/\n  RegistDtls = 509,\n/*\n*************************************************************\n* The number of Distribution Instructions on a Registration *\n* Instructions message                                      *\n*************************************************************\n*/\n  NoDistribInsts = 510,\n/*\n***********************************************************\n* Email address relating to Registration name and address *\n* details                                                 *\n***********************************************************\n*/\n  RegistEmail = 511,\n/*\n**************************************************************\n* The amount of each distribution to go to this beneficiary, *\n* expressed as a percentage                                  *\n**************************************************************\n*/\n  DistribPercentage = 512,\n/*\n****************************************************************\n* Unique identifier of the registration details as assigned by *\n* institution or intermediary.                                 *\n****************************************************************\n*/\n  RegistID = 513,\n/*\n*********************************************************\n* Identifies Registration Instructions transaction type *\n*********************************************************\n*/\n  RegistTransType = 514,\n/*\n***************************************************************\n* For CIV - a date and time stamp to indicate the fund        *\n* valuation point with respect to which a order was priced by *\n* the fund manager.                                           *\n***************************************************************\n*/\n  ExecValuationPoint = 515,\n/*\n**************************************************************\n* For CIV specifies the approximate order quantity desired.  *\n* For a CIV Sale it specifies percentage of investor\u0019s total *\n* holding to be sold. For a CIV switch/exchange it specifies *\n* percentage of investor\u0019s cash realised from sales to be    *\n* re-invested. The executing broker, intermediary or fund    *\n* manager is responsible for converting and calculating      *\n* OrderQty (38) in shares/units for subsequent messages.     *\n**************************************************************\n*/\n  OrderPercent = 516,\n/*\n**************************************************\n* The relationship between Registration parties. *\n**************************************************\n*/\n  OwnershipType = 517,\n/*\n****************************************************************\n* The number of Contract Amount details on an Execution Report *\n* message                                                      *\n****************************************************************\n*/\n  NoContAmts = 518,\n/*\n**************************************************************\n* Type of ContAmtValue (520).                                *\n* NOTE That Commission Amount / % in Contract Amounts is the *\n* commission actually charged, rather than the commission    *\n* instructions given in Fields 2/3.                          *\n**************************************************************\n*/\n  ContAmtType = 519,\n/*\n********************************************************\n* Value of Contract Amount, e.g. a financial amount or *\n* percentage as indicated by ContAmtType (59).         *\n********************************************************\n*/\n  ContAmtValue = 520,\n/*\n****************************************************************\n* Specifies currency for the Contract amount if different from *\n* the Deal Currency - see \"Appendix 6-A; Valid Currency        *\n* Codes\".                                                      *\n****************************************************************\n*/\n  ContAmtCurr = 521,\n/*\n********************************\n* Identifies the type of owner *\n********************************\n*/\n  OwnerType = 522,\n/*\n****************************************************************\n* Sub-identifier (e.g. Clearing Account for PartyRole          *\n* (452)=Clearing Firm, Locate ID # for                         *\n* PartyRole=Locate/Lending Firm, etc). Not required when using *\n* PartyID (448), PartyIDSource (447), and PartyRole.           *\n****************************************************************\n*/\n  PartySubID = 523,\n/*\n**************************************************\n* PartyID value within a nested repeating group. *\n* Same values as PartyID (448)                   *\n**************************************************\n*/\n  NestedPartyID = 524,\n/*\n********************************************************\n* PartyIDSource value within a nested repeating group. *\n* Same values as PartyIDSource (447)                   *\n********************************************************\n*/\n  NestedPartyIDSource = 525,\n/*\n************************************************************\n* Assigned by the party which originates the order. Can be *\n* used to provide the ClOrdID (11) used by an exchange or  *\n* executing system.                                        *\n************************************************************\n*/\n  SecondaryClOrdID = 526,\n/*\n**************************************************************\n* Assigned by the party which accepts the order. Can be used *\n* to provide the ExecID (7) used by an exchange or executing *\n* system.                                                    *\n**************************************************************\n*/\n  SecondaryExecID = 527,\n/*\n***************************************************************\n* Designates the capacity of the firm placing the order       *\n* (as of FIX 4.3, this field replaced Rule80A (tag 47) --used *\n* in conjunction with OrderRestrictions (529) field)          *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\n  OrderCapacity = 528,\n/*\n***********************************************************\n* Restrictions associated with an order. If more than one *\n* restriction is applicable to an order, this field can   *\n* contain multiple instructions separated by space.       *\n***********************************************************\n*/\n  OrderRestrictions = 529,\n/*\n************************************************\n* Specifies scope of Order Mass Cancel Request *\n************************************************\n*/\n  MassCancelRequestType = 530,\n/*\n*************************************************************\n* Specifies the action taken by counterparty order handling *\n* system as a result of the Order Mass Cancel Request       *\n*************************************************************\n*/\n  MassCancelResponse = 531,\n/*\n*************************************************\n* Reason Order Mass Cancel Request was rejected *\n*************************************************\n*/\n  MassCancelRejectReason = 532,\n/*\n***********************************************************\n* Total number of orders affected by mass cancel request. *\n***********************************************************\n*/\n  TotalAffectedOrders = 533,\n/*\n*************************************************************\n* Number of affected orders in the repeating group of order *\n* ids.                                                      *\n*************************************************************\n*/\n  NoAffectedOrders = 534,\n/*\n***************************************************************\n* OrderID (37) of an order affected by a mass cancel request. *\n***************************************************************\n*/\n  AffectedOrderID = 535,\n/*\n***************************************************************\n* SecondaryOrderID (98) of an order affected by a mass cancel *\n* request.                                                    *\n***************************************************************\n*/\n  AffectedSecondaryOrderID = 536,\n/*\n****************************************************************\n* Identifies the type of quote.                                *\n* An indicative quote is used to inform a counterparty of a    *\n* market. An indicative quote does not result directly in a    *\n* trade.                                                       *\n* A tradeable quote is submitted to a market and will result   *\n* directly in a trade against other orders and quotes in a     *\n* market.                                                      *\n* A restricted tradeable quote is submitted to a market and    *\n* within a certain restriction (possibly based upon price or   *\n* quantity) will automatically trade against orders. Order     *\n* that do not comply with restrictions are sent to the quote   *\n* issuer who can choose to accept or decline the order.        *\n* A counter quote is used in the negotiation model. See Volume *\n* 7 \u0013 Product: Fixed Income for example usage.                 *\n****************************************************************\n*/\n  QuoteType = 537,\n/*\n****************************************************\n* PartyRole value within a nested repeating group. *\n* Same values as PartyRole (452)                   *\n****************************************************\n*/\n  NestedPartyRole = 538,\n/*\n*************************************************************\n* Number of NestedPartyID (524), NestedPartyIDSource (525), *\n* and NestedPartyRole (538) entries                         *\n*************************************************************\n*/\n  NoNestedPartyIDs = 539,\n/*\n****************************************************************\n* *** DEPRECATED FIELD - See \"Deprecated (Phased-out) Features *\n* and Supported Approach\" ***                                  *\n* Total Amount of Accrued Interest for convertible bonds and   *\n* fixed income                                                 *\n****************************************************************\n*/\n  TotalAccruedInterestAmt = 540,\n/*\n*********************\n* Date of maturity. *\n*********************\n*/\n  MaturityDate = 541,\n/*\n***********************************************\n* Underlying security\u0019s maturity date.        *\n* See MaturityDate (54) field for description *\n***********************************************\n*/\n  UnderlyingMaturityDate = 542,\n/*\n***************************************************************\n* The location at which records of ownership are maintained   *\n* for this instrument, and at which ownership changes must be *\n* recorded.                                                   *\n***************************************************************\n*/\n  InstrRegistry = 543,\n/*\n****************************************************************\n* Identifies whether an order is a margin order or a           *\n* non-margin order. This is primarily used when sending orders *\n* to Japanese exchanges to indicate sell margin or buy to      *\n* cover. The same tag could be assigned also by buy-side to    *\n* indicate the intent to sell or buy margin and the sell-side  *\n* to accept or reject (base on some validation criteria) the   *\n* margin request.                                              *\n****************************************************************\n*/\n  CashMargin = 544,\n/*\n*****************************************************\n* PartySubID value within a nested repeating group. *\n* Same values as PartySubID (523)                   *\n*****************************************************\n*/\n  NestedPartySubID = 545,\n/*\n***************************************\n* Defines the scope of a data element *\n***************************************\n*/\n  Scope = 546,\n/*\n************************************************************\n* Defines how a server handles distribution of a truncated *\n* book. Defaults to broker option.                         *\n************************************************************\n*/\n  MDImplicitDelete = 547,\n/*\n****************************************************************\n* Identifier for a cross order. Must be unique during a given  *\n* trading day. Recommend that firms use the order date as part *\n* of the CrossID for Good Till Cancel (GT) orders.             *\n****************************************************************\n*/\n  CrossID = 548,\n/*\n*********************************************\n* Type of cross being submitted to a market *\n*********************************************\n*/\n  CrossType = 549,\n/*\n**************************************************************\n* Indicates if one side or the other of a cross order should *\n* be prioritized.                                            *\n* The definition of prioritization is left to the market. In *\n* some markets prioritization means which side of the cross  *\n* order is applied to the market first. In other markets \u0013   *\n* prioritization may mean that the prioritized side is fully *\n* executed (sometimes referred to as the side being          *\n* protected).                                                *\n**************************************************************\n*/\n  CrossPrioritization = 550,\n/*\n***************************************************************\n* CrossID of the previous cross order (NOT the initial cross  *\n* order of the day) as assigned by the institution, used to   *\n* identify the previous cross order in Cross Cancel and Cross *\n* Cancel/Replace Requests.                                    *\n***************************************************************\n*/\n  OrigCrossID = 551,\n/*\n*********************************************\n* Number of Side repeating group instances. *\n*********************************************\n*/\n  NoSides = 552,\n/*\n***********************\n* Userid or username. *\n***********************\n*/\n  Username = 553,\n/*\n***************************\n* Password or passphrase. *\n***************************\n*/\n  Password = 554,\n/*\n******************************************************\n* Number of InstrumentLeg repeating group instances. *\n******************************************************\n*/\n  NoLegs = 555,\n/*\n********************************************************\n* Currency associated with a particular Leg's quantity *\n********************************************************\n*/\n  LegCurrency = 556,\n/*\n**************************************************************\n* Indicates total number of security types in the event that *\n* multiple Security Type messages are used to return results *\n* (Prior to FIX 4.4 this field was named                     *\n* TotalNumSecurityTypes)                                     *\n**************************************************************\n*/\n  TotNoSecurityTypes = 557,\n/*\n******************************************************\n* Number of Security Type repeating group instances. *\n******************************************************\n*/\n  NoSecurityTypes = 558,\n/*\n*********************************************************\n* Identifies the type/criteria of Security List Request *\n*********************************************************\n*/\n  SecurityListRequestType = 559,\n/*\n******************************************************\n* The results returned to a Security Request message *\n******************************************************\n*/\n  SecurityRequestResult = 560,\n/*\n**************************************\n* The trading lot size of a security *\n**************************************\n*/\n  RoundLot = 561,\n/*\n*********************************************\n* The minimum trading volume for a security *\n*********************************************\n*/\n  MinTradeVol = 562,\n/*\n************************************************************\n* Indicates the method of execution reporting requested by *\n* issuer of the order                                      *\n************************************************************\n*/\n  MultiLegRptTypeReq = 563,\n/*\n*************************************************\n* PositionEffect for leg of a multileg          *\n* See PositionEffect (77) field for description *\n*************************************************\n*/\n  LegPositionEffect = 564,\n/*\n******************************************************\n* CoveredOrUncovered for leg of a multileg           *\n* See CoveredOrUncovered (203) field for description *\n******************************************************\n*/\n  LegCoveredOrUncovered = 565,\n/*\n****************************************\n* Price for leg of a multileg          *\n* See Price (44) field for description *\n****************************************\n*/\n  LegPrice = 566,\n/*\n*************************************************************\n* Indicates the reason a Trading Session Status Request was *\n* rejected                                                  *\n*************************************************************\n*/\n  TradSesStatusRejReason = 567,\n/*\n***********************************\n* Trade Capture Report Request ID *\n***********************************\n*/\n  TradeRequestID = 568,\n/*\n********************************\n* Type of Trade Capture Report *\n********************************\n*/\n  TradeRequestType = 569,\n/*\n********************************************************\n* Indicates if the trade capture report was previously *\n* reported to the counterparty                         *\n********************************************************\n*/\n  PreviouslyReported = 570,\n/*\n*********************************************\n* Unique identifier of trade capture report *\n*********************************************\n*/\n  TradeReportID = 571,\n/*\n*****************************************************\n* Reference identifier used with CANCEL and REPLACE *\n* transaction types.                                *\n*****************************************************\n*/\n  TradeReportRefID = 572,\n/*\n********************************************************\n* The status of this trade with respect to matching or *\n* comparison                                           *\n********************************************************\n*/\n  MatchStatus = 573,\n/*\n*************************************************************\n* The point in the matching process at which this trade was *\n* matched                                                   *\n*************************************************************\n*/\n  MatchType = 574,\n/*\n*********************************************\n* This trade is to be treated as an odd lot *\n*********************************************\n*/\n  OddLot = 575,\n/*\n***********************************\n* Number of clearing instructions *\n***********************************\n*/\n  NoClearingInstructions = 576,\n/*\n******************************************************\n* Eligibility of this trade for clearing and central *\n* counterparty processing                            *\n******************************************************\n*/\n  ClearingInstruction = 577,\n/*\n***********************************************************\n* Type of input device or system from which the trade was *\n* entered.                                                *\n***********************************************************\n*/\n  TradeInputSource = 578,\n/*\n************************************************************\n* Specific device number, terminal number or station where *\n* trade was entered                                        *\n************************************************************\n*/\n  TradeInputDevice = 579,\n/*\n************************************************\n* Number of Date fields provided in date range *\n************************************************\n*/\n  NoDates = 580,\n/*\n********************************************\n* Type of account associated with an order *\n********************************************\n*/\n  AccountType = 581,\n/*\n***************************************************************\n* Capacity of customer placing the order                      *\n* Primarily used by futures exchanges to indicate the CTICode *\n* (customer type indicator) as required by the US CFTC        *\n* (Commodity Futures Trading Commission).                     *\n***************************************************************\n*/\n  CustOrderCapacity = 582,\n/*\n**************************************************************\n* Permits order originators to tie together groups of orders *\n* in which trades resulting from orders are associated for a *\n* specific purpose, for example the calculation of average   *\n* execution price for a customer or to associate lists       *\n* submitted to a broker as waves of a larger program trade.  *\n**************************************************************\n*/\n  ClOrdLinkID = 583,\n/*\n***************************************************************\n* Value assigned by issuer of Mass Status Request to uniquely *\n* identify the request                                        *\n***************************************************************\n*/\n  MassStatusReqID = 584,\n/*\n****************************\n* Mass Status Request Type *\n****************************\n*/\n  MassStatusReqType = 585,\n/*\n****************************************************************\n* The most recent (or current) modification TransactTime (tag  *\n* 60) reported on an Execution Report for the order.           *\n* The OrigOrdModTime is provided as an optional field on Order *\n* Cancel Request and Order Cancel Replace Requests to identify *\n* that the state of the order has not changed since the        *\n* request was issued.                                          *\n* This is provided to support markets similar to Eurex and     *\n* A/C/E.                                                       *\n****************************************************************\n*/\n  OrigOrdModTime = 586,\n/*\n*************************************\n* Refer to values for SettlType[63] *\n*************************************\n*/\n  LegSettlType = 587,\n/*\n******************************************\n* Refer to description for SettlDate[64] *\n******************************************\n*/\n  LegSettlDate = 588,\n/*\n*********************************************************\n* Indicates whether or not automatic booking can occur. *\n*********************************************************\n*/\n  DayBookingInst = 589,\n/*\n***********************************************\n* Indicates what constitutes a bookable unit. *\n***********************************************\n*/\n  BookingUnit = 590,\n/*\n******************************************\n* Indicates the method of preallocation. *\n******************************************\n*/\n  PreallocMethod = 591,\n/*\n**************************************************\n* Underlying security\u0019s CountryOfIssue.          *\n* See CountryOfIssue (470) field for description *\n**************************************************\n*/\n  UnderlyingCountryOfIssue = 592,\n/*\n**********************************************************\n* Underlying security\u0019s StateOrProvinceOfIssue.          *\n* See StateOrProvinceOfIssue (471) field for description *\n**********************************************************\n*/\n  UnderlyingStateOrProvinceOfIssue = 593,\n/*\n*************************************************\n* Underlying security\u0019s LocaleOfIssue.          *\n* See LocaleOfIssue (472) field for description *\n*************************************************\n*/\n  UnderlyingLocaleOfIssue = 594,\n/*\n*************************************************\n* Underlying security\u0019s InstrRegistry.          *\n* See InstrRegistry (543) field for description *\n*************************************************\n*/\n  UnderlyingInstrRegistry = 595,\n/*\n***************************************************\n* Multileg instrument's individual leg security\u0019s *\n* CountryOfIssue.                                 *\n* See CountryOfIssue (470) field for description  *\n***************************************************\n*/\n  LegCountryOfIssue = 596,\n/*\n**********************************************************\n* Multileg instrument's individual leg security\u0019s        *\n* StateOrProvinceOfIssue.                                *\n* See StateOrProvinceOfIssue (471) field for description *\n**********************************************************\n*/\n  LegStateOrProvinceOfIssue = 597,\n/*\n***************************************************\n* Multileg instrument's individual leg security\u0019s *\n* LocaleOfIssue.                                  *\n* See LocaleOfIssue (472) field for description   *\n***************************************************\n*/\n  LegLocaleOfIssue = 598,\n/*\n***************************************************\n* Multileg instrument's individual leg security\u0019s *\n* InstrRegistry.                                  *\n* See InstrRegistry (543) field for description   *\n***************************************************\n*/\n  LegInstrRegistry = 599,\n/*\n*******************************************************\n* Multileg instrument's individual security\u0019s Symbol. *\n* See Symbol (55) field for description               *\n*******************************************************\n*/\n  LegSymbol = 600,\n/*\n**********************************************************\n* Multileg instrument's individual security\u0019s SymbolSfx. *\n* See SymbolSfx (65) field for description               *\n**********************************************************\n*/\n  LegSymbolSfx = 601,\n/*\n***********************************************************\n* Multileg instrument's individual security\u0019s SecurityID. *\n* See SecurityID (48) field for description               *\n***********************************************************\n*/\n  LegSecurityID = 602,\n/*\n***************************************************\n* Multileg instrument's individual security\u0019s     *\n* SecurityIDSource.                               *\n* See SecurityIDSource (22) field for description *\n***************************************************\n*/\n  LegSecurityIDSource = 603,\n/*\n****************************************************************\n* Multileg instrument's individual security\u0019s NoSecurityAltID. *\n* See NoSecurityAltID (454) field for description              *\n****************************************************************\n*/\n  NoLegSecurityAltID = 604,\n/*\n**************************************************************\n* Multileg instrument's individual security\u0019s SecurityAltID. *\n* See SecurityAltID (455) field for description              *\n**************************************************************\n*/\n  LegSecurityAltID = 605,\n/*\n*******************************************************\n* Multileg instrument's individual security\u0019s         *\n* SecurityAltIDSource.                                *\n* See SecurityAltIDSource (456) field for description *\n*******************************************************\n*/\n  LegSecurityAltIDSource = 606,\n/*\n********************************************************\n* Multileg instrument's individual security\u0019s Product. *\n* See Product (460) field for description              *\n********************************************************\n*/\n  LegProduct = 607,\n/*\n********************************************************\n* Multileg instrument's individual security\u0019s CFICode. *\n* See CFICode (46) field for description               *\n********************************************************\n*/\n  LegCFICode = 608,\n/*\n*************************************************************\n* Multileg instrument's individual security\u0019s SecurityType. *\n* See SecurityType (67) field for description               *\n*************************************************************\n*/\n  LegSecurityType = 609,\n/*\n*****************************************************\n* Multileg instrument's individual security\u0019s       *\n* MaturityMonthYear.                                *\n* See MaturityMonthYear (200) field for description *\n*****************************************************\n*/\n  LegMaturityMonthYear = 610,\n/*\n*************************************************************\n* Multileg instrument's individual security\u0019s MaturityDate. *\n* See MaturityDate (54) field for description               *\n*************************************************************\n*/\n  LegMaturityDate = 611,\n/*\n************************************************************\n* Multileg instrument's individual security\u0019s StrikePrice. *\n* See StrikePrice (202) field for description              *\n************************************************************\n*/\n  LegStrikePrice = 612,\n/*\n*************************************************************\n* Multileg instrument's individual security\u0019s OptAttribute. *\n* See OptAttribute (206) field for description              *\n*************************************************************\n*/\n  LegOptAttribute = 613,\n/*\n*****************************************************\n* Multileg instrument's individual security\u0019s       *\n* ContractMultiplier.                               *\n* See ContractMultiplier (23) field for description *\n*****************************************************\n*/\n  LegContractMultiplier = 614,\n/*\n***********************************************************\n* Multileg instrument's individual security\u0019s CouponRate. *\n* See CouponRate (223) field for description              *\n***********************************************************\n*/\n  LegCouponRate = 615,\n/*\n****************************************************\n* Multileg instrument's individual security\u0019s      *\n* SecurityExchange.                                *\n* See SecurityExchange (207) field for description *\n****************************************************\n*/\n  LegSecurityExchange = 616,\n/*\n*******************************************************\n* Multileg instrument's individual security\u0019s Issuer. *\n* See Issuer (106) field for description              *\n*******************************************************\n*/\n  LegIssuer = 617,\n/*\n****************************************************\n* Multileg instrument's individual security\u0019s      *\n* EncodedIssuerLen.                                *\n* See EncodedIssuerLen (348) field for description *\n****************************************************\n*/\n  EncodedLegIssuerLen = 618,\n/*\n**************************************************************\n* Multileg instrument's individual security\u0019s EncodedIssuer. *\n* See EncodedIssuer (349) field for description              *\n**************************************************************\n*/\n  EncodedLegIssuer = 619,\n/*\n*************************************************************\n* Multileg instrument's individual security\u0019s SecurityDesc. *\n* See SecurityDesc (07) field for description               *\n*************************************************************\n*/\n  LegSecurityDesc = 620,\n/*\n**********************************************************\n* Multileg instrument's individual security\u0019s            *\n* EncodedSecurityDescLen.                                *\n* See EncodedSecurityDescLen (350) field for description *\n**********************************************************\n*/\n  EncodedLegSecurityDescLen = 621,\n/*\n******************************************************\n* Multileg instrument's individual security\u0019s        *\n* EncodedSecurityDesc.                               *\n* See EncodedSecurityDesc (35) field for description *\n******************************************************\n*/\n  EncodedLegSecurityDesc = 622,\n/*\n*************************************************************\n* The ratio of quantity for this individual leg relative to *\n* the entire multileg security.                             *\n*************************************************************\n*/\n  LegRatioQty = 623,\n/*\n********************************************************\n* The side of this individual leg (multileg security). *\n* See Side (54) field for description and values       *\n********************************************************\n*/\n  LegSide = 624,\n/*\n*************************************************************\n* Optional market assigned sub identifier for a trading     *\n* session. Usage is determined by market or counterparties. *\n* Used by US based futures markets to identify exchange     *\n* specific execution time bracket codes as required by US   *\n* market regulations.                                       *\n*************************************************************\n*/\n  TradingSessionSubID = 625,\n/*\n***********************************************************\n* Describes the specific type or purpose of an Allocation *\n* message (i.e. \"Buyside Calculated\")                     *\n***********************************************************\n*/\n  AllocType = 626,\n/*\n***************************************************\n* Number of HopCompID entries in repeating group. *\n***************************************************\n*/\n  NoHops = 627,\n/*\n****************************************************************\n* Assigned value used to identify the third party firm which   *\n* delivered a specific message either from the firm which      *\n* originated the message or from another third party (if       *\n* multiple \"hops\" are performed). It is recommended that this  *\n* value be the SenderCompID (49) of the third party.           *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (5) is being used.       *\n****************************************************************\n*/\n  HopCompID = 628,\n/*\n****************************************************************\n* Time that HopCompID (628) sent the message. It is            *\n* recommended that this value be the SendingTime (52) of the   *\n* message sent by the third party.                             *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (5) is being used.       *\n****************************************************************\n*/\n  HopSendingTime = 629,\n/*\n****************************************************************\n* Reference identifier assigned by HopCompID (628) associated  *\n* with the message sent. It is recommended that this value be  *\n* the MsgSeqNum (34) of the message sent by the third party.   *\n* Applicable when messages are communicated/re-distributed via *\n* third parties which function as service bureaus or \"hubs\".   *\n* Only applicable if OnBehalfOfCompID (5) is being used.       *\n****************************************************************\n*/\n  HopRefID = 630,\n/*\n******************\n* Mid price/rate *\n******************\n*/\n  MidPx = 631,\n/*\n*************\n* Bid yield *\n*************\n*/\n  BidYield = 632,\n/*\n*************\n* Mid yield *\n*************\n*/\n  MidYield = 633,\n/*\n***************\n* Offer yield *\n***************\n*/\n  OfferYield = 634,\n/*\n************************************************************\n* Indicates type of fee being assessed of the customer for *\n* trade executions at an exchange. Applicable for futures  *\n* markets only at this time.                               *\n* (Values source CBOT, CME, NYBOT, and NYMEX):             *\n************************************************************\n*/\n  ClearingFeeIndicator = 635,\n/*\n****************************************************************\n* Indicates if the order is currently being worked. Applicable *\n* only for OrdStatus = \"New\". For open outcry markets this     *\n* indicates that the order is being worked in the crowd. For   *\n* electronic markets it indicates that the order has           *\n* transitioned from a contingent order to a market order.      *\n****************************************************************\n*/\n  WorkingIndicator = 636,\n/*\n***************************************************************\n* Execution price assigned to a leg of a multileg instrument. *\n* See LastPx (31) field for description and values            *\n***************************************************************\n*/\n  LegLastPx = 637,\n/*\n*************************************************************\n* Indicates if a Cancel/Replace has caused an order to lose *\n* book priority                                             *\n*************************************************************\n*/\n  PriorityIndicator = 638,\n/*\n********************************\n* Amount of price improvement. *\n********************************\n*/\n  PriceImprovement = 639,\n/*\n*************************************************\n* Price of the future part of a F/X swap order. *\n* See Price (44) for description.               *\n*************************************************\n*/\n  Price2 = 640,\n/*\n*************************************************************\n* F/X forward points of the future part of a F/X swap order *\n* added to LastSpotRate (94). May be a negative value.      *\n*************************************************************\n*/\n  LastForwardPoints2 = 641,\n/*\n**************************************************************\n* Bid F/X forward points of the future portion of a F/X swap *\n* quote added to spot rate. May be a negative value.         *\n**************************************************************\n*/\n  BidForwardPoints2 = 642,\n/*\n****************************************************************\n* Offer F/X forward points of the future portion of a F/X swap *\n* quote added to spot rate. May be a negative value.           *\n****************************************************************\n*/\n  OfferForwardPoints2 = 643,\n/*\n*****************************************************\n* RFQ Request ID \u0013 used to identify an RFQ Request. *\n*****************************************************\n*/\n  RFQReqID = 644,\n/*\n*********************************************\n* Used to indicate the best bid in a market *\n*********************************************\n*/\n  MktBidPx = 645,\n/*\n***********************************************\n* Used to indicate the best offer in a market *\n***********************************************\n*/\n  MktOfferPx = 646,\n/*\n****************************************************************\n* Used to indicate a minimum quantity for a bid. If this field *\n* is used the BidSize (134) field is interpreted as the        *\n* maximum bid size                                             *\n****************************************************************\n*/\n  MinBidSize = 647,\n/*\n*************************************************************\n* Used to indicate a minimum quantity for an offer. If this *\n* field is used the OfferSize (135) field is interpreted as *\n* the maximum offer size.                                   *\n*************************************************************\n*/\n  MinOfferSize = 648,\n/*\n***********************************************\n* Unique identifier for Quote Status Request. *\n***********************************************\n*/\n  QuoteStatusReqID = 649,\n/*\n************************************************************\n* Indicates that this message is to serve as the final and *\n* legal confirmation.                                      *\n************************************************************\n*/\n  LegalConfirm = 650,\n/*\n****************************************************************\n* The calculated or traded price for the underlying instrument *\n* that corresponds to a derivative. Used for transactions that *\n* include the cash instrument and the derivative.              *\n****************************************************************\n*/\n  UnderlyingLastPx = 651,\n/*\n*********************************************************\n* The calculated or traded quantity for the underlying  *\n* instrument that corresponds to a derivative. Used for *\n* transactions that include the cash instrument and the *\n* derivative.                                           *\n*********************************************************\n*/\n  UnderlyingLastQty = 652,\n/*\n****************************************\n* Unique indicator for a specific leg. *\n****************************************\n*/\n  LegRefID = 654,\n/*\n************************************************************\n* Unique indicator for a specific leg for the ContraBroker *\n* (375).                                                   *\n************************************************************\n*/\n  ContraLegRefID = 655,\n/*\n****************************************************************\n* Foreign exchange rate used to compute the bid \"SettlCurrAmt\" *\n* (119) from Currency (15) to SettlCurrency (120)              *\n****************************************************************\n*/\n  SettlCurrBidFxRate = 656,\n/*\n************************************************************\n* Foreign exchange rate used to compute the offer          *\n* \"SettlCurrAmt\" (119) from Currency (15) to SettlCurrency *\n* (120)                                                    *\n************************************************************\n*/\n  SettlCurrOfferFxRate = 657,\n/*\n******************************\n* Reason Quote was rejected: *\n******************************\n*/\n  QuoteRequestRejectReason = 658,\n/*\n************************************************************\n* ID within repeating group of sides which is used to      *\n* represent this transaction for compliance purposes (e.g. *\n* OATS reporting).                                         *\n************************************************************\n*/\n  SideComplianceID = 659,\n/*\n****************************************************************\n* Used to identify the source of the Account (1) code. This is *\n* especially useful if the account is a new account that the   *\n* Respondent may not have setup yet in their system.           *\n****************************************************************\n*/\n  AcctIDSource = 660,\n/*\n**************************************************************\n* Used to identify the source of the AllocAccount (79) code. *\n* See AcctIDSource (660) for valid values.                   *\n**************************************************************\n*/\n  AllocAcctIDSource = 661,\n/*\n*****************************************\n* Specifies the price of the benchmark. *\n*****************************************\n*/\n  BenchmarkPrice = 662,\n/*\n********************************************\n* Identifies type of BenchmarkPrice (662). *\n* See PriceType (423) for valid values.    *\n********************************************\n*/\n  BenchmarkPriceType = 663,\n/*\n**************************************\n* Message reference for Confirmation *\n**************************************\n*/\n  ConfirmID = 664,\n/*\n**********************************************\n* Identifies the status of the Confirmation. *\n**********************************************\n*/\n  ConfirmStatus = 665,\n/*\n************************************************\n* Identifies the Confirmation transaction type *\n************************************************\n*/\n  ConfirmTransType = 666,\n/*\n***********************************************************\n* Specifies when the contract (i.e. MBS/TBA) will settle. *\n***********************************************************\n*/\n  ContractSettlMonth = 667,\n/*\n***********************************\n* Identifies the form of delivery *\n***********************************\n*/\n  DeliveryForm = 668,\n/*\n***********************************************************\n* Last price expressed in percent-of-par. Conditionally   *\n* required for Fixed Income trades when LastPx (3) is     *\n* expressed in Yield, Spread, Discount or any other type. *\n* Usage: Execution Report and Allocation Report repeating *\n* executions block (from sellside).                       *\n***********************************************************\n*/\n  LastParPx = 669,\n/*\n*************************************\n* Number of Allocations for the leg *\n*************************************\n*/\n  NoLegAllocs = 670,\n/*\n***********************************************************\n* Allocation Account for the leg                          *\n* See AllocAccount (79) for description and valid values. *\n***********************************************************\n*/\n  LegAllocAccount = 671,\n/*\n*********************************************************\n* Reference for the individual allocation ticket        *\n* See IndividualAllocID (467) for description and valid *\n* values.                                               *\n*********************************************************\n*/\n  LegIndividualAllocID = 672,\n/*\n*******************************************************\n* Leg allocation quantity.                            *\n* See AllocQty (80) for description and valid values. *\n*******************************************************\n*/\n  LegAllocQty = 673,\n/*\n****************************************************************\n* The source of the LegAllocAccount (67)                       *\n* See AllocAcctIDSource (66) for description and valid values. *\n****************************************************************\n*/\n  LegAllocAcctIDSource = 674,\n/*\n***********************************************************\n* Identifies settlement currency for the Leg.             *\n* See SettlCurrency (20) for description and valid values *\n***********************************************************\n*/\n  LegSettlCurrency = 675,\n/*\n**************************************************************\n* LegBenchmarkPrice (679) currency                           *\n* See BenchmarkCurveCurrency (220) for description and valid *\n* values.                                                    *\n**************************************************************\n*/\n  LegBenchmarkCurveCurrency = 676,\n/*\n*********************************************************\n* Name of the Leg Benchmark Curve.                      *\n* See BenchmarkCurveName (22) for description and valid *\n* values.                                               *\n*********************************************************\n*/\n  LegBenchmarkCurveName = 677,\n/*\n***********************************************************\n* Identifies the point on the Leg Benchmark Curve.        *\n* See BenchmarkCurvePoint (222) for description and valid *\n* values.                                                 *\n***********************************************************\n*/\n  LegBenchmarkCurvePoint = 678,\n/*\n**************************************************************\n* Used to identify the price of the benchmark security.      *\n* See BenchmarkPrice (662) for description and valid values. *\n**************************************************************\n*/\n  LegBenchmarkPrice = 679,\n/*\n**********************************************************\n* The price type of the LegBenchmarkPrice.               *\n* See BenchmarkPriceType (663) for description and valid *\n* values.                                                *\n**********************************************************\n*/\n  LegBenchmarkPriceType = 680,\n/*\n****************************************************\n* Bid price of this leg.                           *\n* See BidPx (32) for description and valid values. *\n****************************************************\n*/\n  LegBidPx = 681,\n/*\n****************************************************\n* Leg-specific IOI quantity.                       *\n* See IOIQty (27) for description and valid values *\n****************************************************\n*/\n  LegIOIQty = 682,\n/*\n*************************************\n* Number of leg stipulation entries *\n*************************************\n*/\n  NoLegStipulations = 683,\n/*\n*****************************************************\n* Offer price of this leg.                          *\n* See OfferPx (33) for description and valid values *\n*****************************************************\n*/\n  LegOfferPx = 684,\n/*\n****************************************************************\n* The price type of the LegBidPx (68) and/or LegOfferPx (684). *\n* See PriceType (423) for description and valid values         *\n****************************************************************\n*/\n  LegPriceType = 686,\n/*\n******************************************************\n* Quantity of this leg, e.g. in Quote dialog.        *\n* See Quantity (53) for description and valid values *\n******************************************************\n*/\n  LegQty = 687,\n/*\n**************************************************************\n* For Fixed Income, type of Stipulation for this leg.        *\n* See StipulationType (233) for description and valid values *\n**************************************************************\n*/\n  LegStipulationType = 688,\n/*\n***************************************************************\n* For Fixed Income, value of stipulation.                     *\n* See StipulationValue (234) for description and valid values *\n***************************************************************\n*/\n  LegStipulationValue = 689,\n/*\n**************************************************************\n* For Fixed Income, used instead of LegQty (687) or          *\n* LegOrderQty (685) to requests the respondent to calculate  *\n* the quantity based on the quantity on the opposite side of *\n* the swap.                                                  *\n**************************************************************\n*/\n  LegSwapType = 690,\n/*\n************************************************\n* For Fixed Income, identifies MBS / ABS pool. *\n************************************************\n*/\n  Pool = 691,\n/*\n***************************************************\n* Code to represent price type requested in Quote *\n***************************************************\n*/\n  QuotePriceType = 692,\n/*\n****************************************\n* Message reference for Quote Response *\n****************************************\n*/\n  QuoteRespID = 693,\n/*\n*****************************************\n* Identifies the type of Quote Response *\n*****************************************\n*/\n  QuoteRespType = 694,\n/*\n***********************************************************\n* Code to qualify Quote use                               *\n* See IOIQualifier (04) for description and valid values. *\n***********************************************************\n*/\n  QuoteQualifier = 695,\n/*\n***************************************************************\n* Date to which the yield has been calculated (i.e. maturity, *\n* par call or current call, pre-refunded date).               *\n***************************************************************\n*/\n  YieldRedemptionDate = 696,\n/*\n*************************************************\n* Price to which the yield has been calculated. *\n*************************************************\n*/\n  YieldRedemptionPrice = 697,\n/*\n*********************************************************\n* The price type of the YieldRedemptionPrice (697)      *\n* See PriceType (423) for description and valid values. *\n*********************************************************\n*/\n  YieldRedemptionPriceType = 698,\n/*\n*************************************************************\n* The identifier of the benchmark security, e.g. Treasury   *\n* against Corporate bond.                                   *\n* See SecurityID (tag 48) for description and valid values. *\n*************************************************************\n*/\n  BenchmarkSecurityID = 699,\n/*\n*****************************************************\n* Indicates a trade that reverses a previous trade. *\n*****************************************************\n*/\n  ReversalIndicator = 700,\n/*\n****************************************************************\n* Include as needed to clarify yield irregularities associated *\n* with date, e.g. when it falls on a non-business day.         *\n****************************************************************\n*/\n  YieldCalcDate = 701,\n/*\n*******************************\n* Number of position entries. *\n*******************************\n*/\n  NoPositions = 702,\n/*\n****************************************************************\n* Used to identify the type of quantity that is being returned *\n****************************************************************\n*/\n  PosType = 703,\n/*\n*****************\n* Long Quantity *\n*****************\n*/\n  LongQty = 704,\n/*\n******************\n* Short Quantity *\n******************\n*/\n  ShortQty = 705,\n/*\n***************************\n* Status of this position *\n***************************\n*/\n  PosQtyStatus = 706,\n/*\n***************************\n* Type of Position amount *\n***************************\n*/\n  PosAmtType = 707,\n/*\n*******************\n* Position amount *\n*******************\n*/\n  PosAmt = 708,\n/*\n***********************************************\n* Identifies the type of position transaction *\n***********************************************\n*/\n  PosTransType = 709,\n/*\n*************************************************************\n* Unique identifier for the position maintenance request as *\n* assigned by the submitter                                 *\n*************************************************************\n*/\n  PosReqID = 710,\n/*\n********************************************************\n* Number of underlying legs that make up the security. *\n********************************************************\n*/\n  NoUnderlyings = 711,\n/*\n**************************************\n* Maintenance Action to be performed *\n**************************************\n*/\n  PosMaintAction = 712,\n/*\n*************************************************************\n* Reference to the PosReqID (710) of a previous maintenance *\n* request that is being replaced or canceled.               *\n*************************************************************\n*/\n  OrigPosReqRefID = 713,\n/*\n***************************************************************\n* Reference to a PosMaintRptID (721) from a previous Position *\n* Maintenance Report that is being replaced or canceled.      *\n***************************************************************\n*/\n  PosMaintRptRefID = 714,\n/*\n****************************************************************\n* The \"Clearing Business Date\" referred to by this maintenance *\n* request.                                                     *\n****************************************************************\n*/\n  ClearingBusinessDate = 715,\n/*\n********************************************\n* Identifies a specific settlement session *\n********************************************\n*/\n  SettlSessID = 716,\n/*\n************************************************\n* SubID value associated with SettlSessID (76) *\n************************************************\n*/\n  SettlSessSubID = 717,\n/*\n********************************************************\n* Type of adjustment to be applied, used for PCS & PAJ *\n********************************************************\n*/\n  AdjustmentType = 718,\n/*\n****************************************************************\n* Required to be set to true (Y) when a position maintenance   *\n* request is being performed contrary to current money         *\n* position.                                                    *\n* Required when an exercise of an out of the money position is *\n* requested or an abandonement (do not exercise ) for an in    *\n* the money position.                                          *\n****************************************************************\n*/\n  ContraryInstructionIndicator = 719,\n/*\n************************************************************\n* Indicates if requesting a rollover of prior day\u0019s spread *\n* submissions.                                             *\n************************************************************\n*/\n  PriorSpreadIndicator = 720,\n/*\n**********************************************\n* Unique identifier for this position report *\n**********************************************\n*/\n  PosMaintRptID = 721,\n/*\n******************************************\n* Status of Position Maintenance Request *\n******************************************\n*/\n  PosMaintStatus = 722,\n/*\n*******************************************\n* Result of Position Maintenance Request. *\n*******************************************\n*/\n  PosMaintResult = 723,\n/*\n*************************************************************\n* Unique identifier for the position maintenance request as *\n* assigned by the submitter                                 *\n*************************************************************\n*/\n  PosReqType = 724,\n/*\n********************************************************\n* Identifies how the response to the request should be *\n* transmitted                                          *\n********************************************************\n*/\n  ResponseTransportType = 725,\n/*\n****************************************************************\n* URI (Uniform Resource Identifier) for details) or other      *\n* pre-arranged value. Used in conjunction with                 *\n* ResponseTransportType (725) value of Out-of-Band to identify *\n* the out-of-band destination.                                 *\n* See \"Appendix 6-B FIX Fields Based Upon Other Standards\"     *\n****************************************************************\n*/\n  ResponseDestination = 726,\n/*\n****************************************************\n* Total number of Position Reports being returned. *\n****************************************************\n*/\n  TotalNumPosReports = 727,\n/*\n*************************************************************\n* Result of Request for Position                            *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  PosReqResult = 728,\n/*\n***********************************\n* Status of Request for Positions *\n***********************************\n*/\n  PosReqStatus = 729,\n/*\n********************\n* Settlement price *\n********************\n*/\n  SettlPrice = 730,\n/*\n****************************\n* Type of settlement price *\n****************************\n*/\n  SettlPriceType = 731,\n/*\n**********************************************\n* Underlying security\u0019s SettlPrice.          *\n* See SettlPrice (730) field for description *\n**********************************************\n*/\n  UnderlyingSettlPrice = 732,\n/*\n*************************************************\n* Underlying security\u0019s SettlPriceType.         *\n* See SettlPriceType (73) field for description *\n*************************************************\n*/\n  UnderlyingSettlPriceType = 733,\n/*\n*****************************\n* Previous settlement price *\n*****************************\n*/\n  PriorSettlPrice = 734,\n/*\n********************************************************\n* Number of repeating groups of QuoteQualifiers (695). *\n********************************************************\n*/\n  NoQuoteQualifiers = 735,\n/*\n***********************************************************\n* Currency code of settlement denomination for a specific *\n* AllocAccount (79).                                      *\n***********************************************************\n*/\n  AllocSettlCurrency = 736,\n/*\n***************************************************************\n* Total amount due expressed in settlement currency (includes *\n* the effect of the forex transaction) for a specific         *\n* AllocAccount (79).                                          *\n***************************************************************\n*/\n  AllocSettlCurrAmt = 737,\n/*\n***************************************************\n* Amount of interest (i.e. lump-sum) at maturity. *\n***************************************************\n*/\n  InterestAtMaturity = 738,\n/*\n****************************************************************\n* The effective date of a new securities issue determined by   *\n* its underwriters. Often but not always the same as the Issue *\n* Date and the Interest Accrual Date                           *\n****************************************************************\n*/\n  LegDatedDate = 739,\n/*\n**************************************************************\n* For Fixed Income, identifies MBS / ABS pool for a specific *\n* leg of a multi-leg instrument.                             *\n* See Pool (69) for description and valid values.            *\n**************************************************************\n*/\n  LegPool = 740,\n/*\n*********************************************************\n* Amount of interest (i.e. lump-sum) at maturity at the *\n* account-level.                                        *\n*********************************************************\n*/\n  AllocInterestAtMaturity = 741,\n/*\n**************************************************************\n* Amount of Accrued Interest for convertible bonds and fixed *\n* income at the allocation-level.                            *\n**************************************************************\n*/\n  AllocAccruedInterestAmt = 742,\n/*\n*********************\n* Date of delivery. *\n*********************\n*/\n  DeliveryDate = 743,\n/*\n***********************************************\n* Method under which assignment was conducted *\n***********************************************\n*/\n  AssignmentMethod = 744,\n/*\n*****************************************************\n* Quantity Increment used in performing assignment. *\n*****************************************************\n*/\n  AssignmentUnit = 745,\n/*\n***************************************************\n* Open interest that was eligible for assignment. *\n***************************************************\n*/\n  OpenInterest = 746,\n/*\n****************************************************\n* Exercise Method used to in performing assignment *\n****************************************************\n*/\n  ExerciseMethod = 747,\n/*\n*******************************************\n* Total number of trade reports returned. *\n*******************************************\n*/\n  TotNumTradeReports = 748,\n/*\n*************************************************************\n* Result of Trade Request                                   *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  TradeRequestResult = 749,\n/*\n****************************\n* Status of Trade Request. *\n****************************\n*/\n  TradeRequestStatus = 750,\n/*\n*************************************************************\n* Reason Trade Capture Request was rejected.                *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  TradeReportRejectReason = 751,\n/*\n****************************************************************\n* Used to indicate if the side being reported on Trade Capture *\n* Report represents a leg of a multileg instrument or a single *\n* security                                                     *\n****************************************************************\n*/\n  SideMultiLegReportingType = 752,\n/*\n**************************************\n* Number of position amount entries. *\n**************************************\n*/\n  NoPosAmt = 753,\n/*\n*************************************************************\n* Identifies whether or not an allocation has been          *\n* automatically accepted on behalf of the Carry Firm by the *\n* Clearing House.                                           *\n*************************************************************\n*/\n  AutoAcceptIndicator = 754,\n/*\n****************************************************\n* Unique identifier for Allocation Report message. *\n****************************************************\n*/\n  AllocReportID = 755,\n/*\n***************************************************************\n* Number of Nested2PartyID (757), Nested2PartyIDSource (758), *\n* and Nested2PartyRole (759) entries                          *\n***************************************************************\n*/\n  NoNested2PartyIDs = 756,\n/*\n*************************************************************\n* PartyID value within a \"second instance\" Nested repeating *\n* group.                                                    *\n* Same values as PartyID (448)                              *\n*************************************************************\n*/\n  Nested2PartyID = 757,\n/*\n*********************************************************\n* PartyIDSource value within a \"second instance\" Nested *\n* repeating group.                                      *\n* Same values as PartyIDSource (447)                    *\n*********************************************************\n*/\n  Nested2PartyIDSource = 758,\n/*\n***************************************************************\n* PartyRole value within a \"second instance\" Nested repeating *\n* group.                                                      *\n* Same values as PartyRole (452)                              *\n***************************************************************\n*/\n  Nested2PartyRole = 759,\n/*\n****************************************************************\n* PartySubID value within a \"second instance\" Nested repeating *\n* group.                                                       *\n* Same values as PartySubID (523)                              *\n****************************************************************\n*/\n  Nested2PartySubID = 760,\n/*\n***************************************************************\n* Identifies class or source of the BenchmarkSecurityID (699) *\n* value. Required if BenchmarkSecurityID is specified.        *\n* Same values as the SecurityIDSource (22) field              *\n***************************************************************\n*/\n  BenchmarkSecurityIDSource = 761,\n/*\n***************************************************************\n* Sub-type qualification/identification of the SecurityType   *\n* (e.g. for SecurityType=\"REPO\").                             *\n* Example Values:                                             *\n* General = General Collateral (for SecurityType=REPO)        *\n* For SecurityType=\"MLEG\" markets can provide the name of the *\n* option or futures strategy, such as Calendar, Vertical,     *\n* Butterfly, etc.                                             *\n* NOTE: Additional values may be used by mutual agreement of  *\n* the counterparties                                          *\n***************************************************************\n*/\n  SecuritySubType = 762,\n/*\n***************************************************\n* Underlying security\u0019s SecuritySubType.          *\n* See SecuritySubType (762) field for description *\n***************************************************\n*/\n  UnderlyingSecuritySubType = 763,\n/*\n***************************************************\n* SecuritySubType of the leg instrument.          *\n* See SecuritySubType (762) field for description *\n***************************************************\n*/\n  LegSecuritySubType = 764,\n/*\n**********************************************************\n* The maximum percentage that execution of one side of a *\n* program trade can exceed execution of the other.       *\n**********************************************************\n*/\n  AllowableOneSidednessPct = 765,\n/*\n**************************************************************\n* The maximum amount that execution of one side of a program *\n* trade can exceed execution of the other.                   *\n**************************************************************\n*/\n  AllowableOneSidednessValue = 766,\n/*\n*********************************************************\n* The currency that AllowableOneSidednessValue (766) is *\n* expressed in if AllowableOneSidednessValue is used.   *\n*********************************************************\n*/\n  AllowableOneSidednessCurr = 767,\n/*\n*******************************************\n* Number of TrdRegTimestamp (769) entries *\n*******************************************\n*/\n  NoTrdRegTimestamps = 768,\n/*\n*************************************************************\n* Traded / Regulatory timestamp value. Use to store time    *\n* information required by government regulators or self     *\n* regulatory organizations (such as an exchange or clearing *\n* house).                                                   *\n*************************************************************\n*/\n  TrdRegTimestamp = 769,\n/*\n************************************************************\n* Traded / Regulatory timestamp type                       *\n* Note of Applicability: values are required in US futures *\n* markets by the CFTC to support computerized trade        *\n* reconstruction.                                          *\n* (see Volume : \"Glossary\" for value definitions)          *\n************************************************************\n*/\n  TrdRegTimestampType = 770,\n/*\n****************************************************************\n* Text which identifies the \"origin\" (i.e. system which was    *\n* used to generate the time stamp) for the Traded / Regulatory *\n* timestamp value.                                             *\n****************************************************************\n*/\n  TrdRegTimestampOrigin = 771,\n/*\n***************************************************************\n* Reference identifier to be used with ConfirmTransType (666) *\n* = Replace or Cancel                                         *\n***************************************************************\n*/\n  ConfirmRefID = 772,\n/*\n**********************************************************\n* Identifies the type of Confirmation message being sent *\n**********************************************************\n*/\n  ConfirmType = 773,\n/*\n******************************************************\n* Identifies the reason for rejecting a Confirmation *\n******************************************************\n*/\n  ConfirmRejReason = 774,\n/*\n**************************************************************\n* Method for booking out this order. Used when notifying a   *\n* broker that an order to be settled by that broker is to be *\n* booked out as an OTC derivative (e.g. CFD or similar).     *\n**************************************************************\n*/\n  BookingType = 775,\n/*\n**************************************************************\n* Identified reason for rejecting an individual AllocAccount *\n* (79) detail.                                               *\n* Same values as AllocRejCode (88)                           *\n**************************************************************\n*/\n  IndividualAllocRejCode = 776,\n/*\n*********************************************************\n* Unique identifier for Settlement Instruction message. *\n*********************************************************\n*/\n  SettlInstMsgID = 777,\n/*\n*************************************************************\n* Number of settlement instructions within repeating group. *\n*************************************************************\n*/\n  NoSettlInst = 778,\n/*\n************************************************************\n* Timestamp of last update to data item (or creation if no *\n* updates made since creation).                            *\n************************************************************\n*/\n  LastUpdateTime = 779,\n/*\n**************************************************************\n* Used to indicate whether settlement instructions are       *\n* provided on an allocation instruction message, and if not, *\n* how they are to be derived                                 *\n**************************************************************\n*/\n  AllocSettlInstType = 780,\n/*\n***************************************************************\n* Number of SettlPartyID (782), SettlPartyIDSource (783), and *\n* SettlPartyRole (784) entries                                *\n***************************************************************\n*/\n  NoSettlPartyIDs = 781,\n/*\n***************************************************************\n* PartyID value within a settlement parties component. Nested *\n* repeating group.                                            *\n* Same values as PartyID (448)                                *\n***************************************************************\n*/\n  SettlPartyID = 782,\n/*\n**************************************************************\n* PartyIDSource value within a settlement parties component. *\n* Same values as PartyIDSource (447)                         *\n**************************************************************\n*/\n  SettlPartyIDSource = 783,\n/*\n**********************************************************\n* PartyRole value within a settlement parties component. *\n* Same values as PartyRole (452)                         *\n**********************************************************\n*/\n  SettlPartyRole = 784,\n/*\n***********************************************************\n* PartySubID value within a settlement parties component. *\n* Same values as PartySubID (523)                         *\n***********************************************************\n*/\n  SettlPartySubID = 785,\n/*\n****************************************\n* Type of SettlPartySubID (785) value. *\n* Same values as PartySubIDType (803)  *\n****************************************\n*/\n  SettlPartySubIDType = 786,\n/*\n***************************************************************\n* Used to indicate whether a delivery instruction is used for *\n* securities or cash settlement                               *\n***************************************************************\n*/\n  DlvyInstType = 787,\n/*\n*********************************\n* Type of financing termination *\n*********************************\n*/\n  TerminationType = 788,\n/*\n*************************************************\n* Next expected MsgSeqNum value to be received. *\n*************************************************\n*/\n  NextExpectedMsgSeqNum = 789,\n/*\n************************************************************\n* Can be used to uniquely identify a specific Order Status *\n* Request message.                                         *\n************************************************************\n*/\n  OrdStatusReqID = 790,\n/*\n*******************************************************\n* Unique ID of settlement instruction request message *\n*******************************************************\n*/\n  SettlInstReqID = 791,\n/*\n****************************************************************\n* Identifies reason for rejection (of a settlement instruction *\n* request message)                                             *\n****************************************************************\n*/\n  SettlInstReqRejCode = 792,\n/*\n****************************************************************\n* Secondary allocation identifier. Unlike the AllocID (70),    *\n* this can be shared across a number of allocation instruction *\n* or allocation report messages, thereby making it possible to *\n* pass an identifier for an original allocation message on     *\n* multiple messages (e.g. from one party to a second to a      *\n* third, across cancel and replace messages etc.).             *\n****************************************************************\n*/\n  SecondaryAllocID = 793,\n/*\n***********************************************************\n* Describes the specific type or purpose of an Allocation *\n* Report message                                          *\n***********************************************************\n*/\n  AllocReportType = 794,\n/*\n*************************************************************\n* Reference identifier to be used with AllocTransType (7) = *\n* Replace or Cancel                                         *\n*************************************************************\n*/\n  AllocReportRefID = 795,\n/*\n****************************************************************\n* Reason for cancelling or replacing an Allocation Instruction *\n* or Allocation Report message                                 *\n****************************************************************\n*/\n  AllocCancReplaceReason = 796,\n/*\n***********************************************************\n* Indicates whether or not this message is a drop copy of *\n* another message.                                        *\n***********************************************************\n*/\n  CopyMsgIndicator = 797,\n/*\n***********************************************************\n* Type of account associated with a confirmation or other *\n* trade-level message                                     *\n***********************************************************\n*/\n  AllocAccountType = 798,\n/*\n**************************************\n* Average price for a specific order *\n**************************************\n*/\n  OrderAvgPx = 799,\n/*\n****************************************************************\n* Quantity of the order that is being booked out as part of an *\n* Allocation Instruction or Allocation Report message          *\n****************************************************************\n*/\n  OrderBookingQty = 800,\n/*\n***********************************************************\n* Number of SettlPartySubID (785) and SettlPartySubIDType *\n* (786) entries                                           *\n***********************************************************\n*/\n  NoSettlPartySubIDs = 801,\n/*\n**************************************************************\n* Number of PartySubID (523)and PartySubIDType (803) entries *\n**************************************************************\n*/\n  NoPartySubIDs = 802,\n/*\n***************************************************************\n* Type of PartySubID (523) value                              *\n* 4000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\n  PartySubIDType = 803,\n/*\n*************************************************************\n* Number of NestedPartySubID (545) and NestedPartySubIDType *\n* (805) entries                                             *\n*************************************************************\n*/\n  NoNestedPartySubIDs = 804,\n/*\n*****************************************\n* Type of NestedPartySubID (545) value. *\n* Same values as PartySubIDType (803)   *\n*****************************************\n*/\n  NestedPartySubIDType = 805,\n/*\n***************************************************************\n* Number of Nested2PartySubID (760) and Nested2PartySubIDType *\n* (807) entries. Second instance of <NestedParties>.          *\n***************************************************************\n*/\n  NoNested2PartySubIDs = 806,\n/*\n*************************************************************\n* Type of Nested2PartySubID (760) value. Second instance of *\n* <NestedParties>.                                          *\n* Same values as PartySubIDType (803)                       *\n*************************************************************\n*/\n  Nested2PartySubIDType = 807,\n/*\n***************************************************************\n* Response to allocation to be communicated to a counterparty *\n* through an intermediary, i.e. clearing house. Used in       *\n* conjunction with AllocType = \"Request to Intermediary\" and  *\n* AllocReportType = \"Request to Intermediary\"                 *\n***************************************************************\n*/\n  AllocIntermedReqType = 808,\n/*\n************************************************************\n* Underlying price associate with a derivative instrument. *\n************************************************************\n*/\n  UnderlyingPx = 810,\n/*\n*******************************************\n* Delta calculated from theoretical price *\n*******************************************\n*/\n  PriceDelta = 811,\n/*\n***************************************************************\n* Used to specify the maximum number of application messages  *\n* that can be queued bedore a corrective action needs to take *\n* place to resolve the queuing issue.                         *\n***************************************************************\n*/\n  ApplQueueMax = 812,\n/*\n**************************************************************\n* Current number of application messages that were queued at *\n* the time that the message was created by the counterparty. *\n**************************************************************\n*/\n  ApplQueueDepth = 813,\n/*\n**************************************************************\n* Resolution taken when ApplQueueDepth (813) exceeds         *\n* ApplQueueMax (812) or system specified maximum queue size. *\n**************************************************************\n*/\n  ApplQueueResolution = 814,\n/*\n**********************************************************\n* Action to take to resolve an application message queue *\n* (backlog).                                             *\n**********************************************************\n*/\n  ApplQueueAction = 815,\n/*\n*********************************************\n* Number of alternative market data sources *\n*********************************************\n*/\n  NoAltMDSource = 816,\n/*\n**********************************************************\n* Session layer source for market data                   *\n* (For the standard FIX session layer, this would be the *\n* TargetCompID (56) where market data can be obtained).  *\n**********************************************************\n*/\n  AltMDSourceID = 817,\n/*\n****************************************************************\n* Secondary trade report identifier - can be used to associate *\n* an additional identifier with a trade.                       *\n****************************************************************\n*/\n  SecondaryTradeReportID = 818,\n/*\n*****************************\n* Average Pricing Indicator *\n*****************************\n*/\n  AvgPxIndicator = 819,\n/*\n***************************************************************\n* Used to link a group of trades together. Useful for linking *\n* a group of trades together for average price calculations.  *\n***************************************************************\n*/\n  TradeLinkID = 820,\n/*\n************************************************************\n* Specific device number, terminal number or station where *\n* order was entered                                        *\n************************************************************\n*/\n  OrderInputDevice = 821,\n/*\n*************************************************************\n* Trading Session in which the underlying instrument trades *\n*************************************************************\n*/\n  UnderlyingTradingSessionID = 822,\n/*\n**********************************************************\n* Trading Session sub identifier in which the underlying *\n* instrument trades                                      *\n**********************************************************\n*/\n  UnderlyingTradingSessionSubID = 823,\n/*\n***************************************************************\n* Reference to the leg of a multileg instrument to which this *\n* trade refers                                                *\n***************************************************************\n*/\n  TradeLegRefID = 824,\n/*\n****************************************************************\n* Used to report any exchange rules that apply to this trade.  *\n* Primarily intended for US futures markets. Certain trading   *\n* practices are permitted by the CFTC, such as large lot       *\n* trading, block trading, all or none trades. If the rules are *\n* used, the exchanges are required to indicate these rules on  *\n* the trade.                                                   *\n****************************************************************\n*/\n  ExchangeRule = 825,\n/*\n***********************************************\n* Identifies how the trade is to be allocated *\n***********************************************\n*/\n  TradeAllocIndicator = 826,\n/*\n**************************************************************\n* Part of trading cycle when an instrument expires. Field is *\n* applicable for derivatives.                                *\n**************************************************************\n*/\n  ExpirationCycle = 827,\n/*\n*****************\n* Type of Trade *\n*****************\n*/\n  TrdType = 828,\n/*\n*******************************************\n* Further qualification to the trade type *\n*******************************************\n*/\n  TrdSubType = 829,\n/*\n*************************************\n* Reason trade is being transferred *\n*************************************\n*/\n  TransferReason = 830,\n/*\n***************************************************************\n* Total Number of Assignment Reports being returned to a firm *\n***************************************************************\n*/\n  TotNumAssignmentReports = 832,\n/*\n***********************************************\n* Unique identifier for the Assignment Report *\n***********************************************\n*/\n  AsgnRptID = 833,\n/*\n**************************************************************\n* Amount that a position has to be in the money before it is *\n* exercised.                                                 *\n**************************************************************\n*/\n  ThresholdAmount = 834,\n/*\n*********************************************\n* Describes whether peg is static or floats *\n*********************************************\n*/\n  PegMoveType = 835,\n/*\n****************************\n* Type of Peg Offset value *\n****************************\n*/\n  PegOffsetType = 836,\n/*\n*********************\n* Type of Peg Limit *\n*********************\n*/\n  PegLimitType = 837,\n/*\n***********************************************************\n* If the calculated peg price is not a valid tick price,  *\n* specifies whether to round the price to be more or less *\n* aggressive                                              *\n***********************************************************\n*/\n  PegRoundDirection = 838,\n/*\n**********************************************\n* The price the order is currently pegged at *\n**********************************************\n*/\n  PeggedPrice = 839,\n/*\n************************\n* The scope of the peg *\n************************\n*/\n  PegScope = 840,\n/*\n************************************************************\n* Describes whether discretionay price is static or floats *\n************************************************************\n*/\n  DiscretionMoveType = 841,\n/*\n***********************************\n* Type of Discretion Offset value *\n***********************************\n*/\n  DiscretionOffsetType = 842,\n/*\n****************************\n* Type of Discretion Limit *\n****************************\n*/\n  DiscretionLimitType = 843,\n/*\n*************************************************************\n* If the calculated discretionary price is not a valid tick *\n* price, specifies whether to round the price to be more or *\n* less aggressive                                           *\n*************************************************************\n*/\n  DiscretionRoundDirection = 844,\n/*\n************************************************\n* The current discretionary price of the order *\n************************************************\n*/\n  DiscretionPrice = 845,\n/*\n*******************************\n* The scope of the discretion *\n*******************************\n*/\n  DiscretionScope = 846,\n/*\n***************************************************************\n* The target strategy of the order                            *\n* 1000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\n  TargetStrategy = 847,\n/*\n****************************************************************\n* Field to allow further specification of the TargetStrategy \u0013 *\n* usage to be agreed between counterparties                    *\n****************************************************************\n*/\n  TargetStrategyParameters = 848,\n/*\n***************************************************************\n* For a TargetStrategy=Participate order specifies the target *\n* particpation rate. For other order types this is a volume   *\n* limit (i.e. do not be more than this percent of the market  *\n* volume)                                                     *\n***************************************************************\n*/\n  ParticipationRate = 849,\n/*\n****************************************************************\n* For communication of the performance of the order versus the *\n* target strategy                                              *\n****************************************************************\n*/\n  TargetStrategyPerformance = 850,\n/*\n**************************************************************\n* Indicator to identify whether this fill was a result of a  *\n* liquidity provider providing or liquidity taker taking the *\n* liquidity. Applicable only for OrdStatus of Partial or     *\n* Filled.                                                    *\n**************************************************************\n*/\n  LastLiquidityInd = 851,\n/*\n********************************************************\n* Indicates if a trade should be reported via a market *\n* reporting service.                                   *\n********************************************************\n*/\n  PublishTrdIndicator = 852,\n/*\n*************************\n* Reason for short sale *\n*************************\n*/\n  ShortSaleReason = 853,\n/*\n**************************************************\n* Type of quantity specified in a quantity field *\n**************************************************\n*/\n  QtyType = 854,\n/*\n***********************************************************\n* Additional TrdType (see tag 828) assigned to a trade by *\n* trade match system.                                     *\n***********************************************************\n*/\n  SecondaryTrdType = 855,\n/*\n************************\n* Type of Trade Report *\n************************\n*/\n  TradeReportType = 856,\n/*\n*************************************************************\n* Indicates how the orders being booked and allocated by an *\n* Allocation Instruction or Allocation Report message are   *\n* identified, i.e. by explicit definition in the NoOrders   *\n* group or not.                                             *\n*************************************************************\n*/\n  AllocNoOrdersType = 857,\n/*\n***************************************************************\n* Commission to be shared with a third party, e.g. as part of *\n* a directed brokerage commission sharing arrangement.        *\n***************************************************************\n*/\n  SharedCommission = 858,\n/*\n********************************************************\n* Unique identifier for a Confirmation Request message *\n********************************************************\n*/\n  ConfirmReqID = 859,\n/*\n***************************************************************\n* Used to express average price as percent of par (used where *\n* AvgPx field is expressed in some other way)                 *\n***************************************************************\n*/\n  AvgParPx = 860,\n/*\n***************************************************************\n* Reported price (used to differentiate from AvgPx on a       *\n* confirmation of a marked-up or marked-down principal trade) *\n***************************************************************\n*/\n  ReportedPx = 861,\n/*\n**********************************************\n* Number of repeating OrderCapacity entries. *\n**********************************************\n*/\n  NoCapacities = 862,\n/*\n***************************************************************\n* Quantity executed under a specific OrderCapacity (e.g.      *\n* quantity executed as agent, quantity executed as principal) *\n***************************************************************\n*/\n  OrderCapacityQty = 863,\n/*\n******************************************\n* Number of repeating EventType entries. *\n******************************************\n*/\n  NoEvents = 864,\n/*\n***************************************\n* Code to represent the type of event *\n***************************************\n*/\n  EventType = 865,\n/*\n*****************\n* Date of event *\n*****************\n*/\n  EventDate = 866,\n/*\n********************************************************\n* Predetermined price of issue at event, if applicable *\n********************************************************\n*/\n  EventPx = 867,\n/*\n**********************************\n* Comments related to the event. *\n**********************************\n*/\n  EventText = 868,\n/*\n************************************************\n* Percent at risk due to lowest possible call. *\n************************************************\n*/\n  PctAtRisk = 869,\n/*\n************************************************\n* Number of repeating InstrAttribType entries. *\n************************************************\n*/\n  NoInstrAttrib = 870,\n/*\n******************************************************\n* Code to represent the type of instrument attribute *\n******************************************************\n*/\n  InstrAttribType = 871,\n/*\n***********************************************************\n* Attribute value appropriate to the InstrAttribType (87) *\n* field.                                                  *\n***********************************************************\n*/\n  InstrAttribValue = 872,\n/*\n****************************************************************\n* The effective date of a new securities issue determined by   *\n* its underwriters. Often but not always the same as the Issue *\n* Date and the Interest Accrual Date                           *\n****************************************************************\n*/\n  DatedDate = 873,\n/*\n****************************************************************\n* The start date used for calculating accrued interest on debt *\n* instruments which are being sold between interest payment    *\n* dates. Often but not always the same as the Issue Date and   *\n* the Dated Date                                               *\n****************************************************************\n*/\n  InterestAccrualDate = 874,\n/*\n********************************************************\n* The program under which a commercial paper is issued *\n********************************************************\n*/\n  CPProgram = 875,\n/*\n********************************************************\n* The registration type of a commercial paper issuance *\n********************************************************\n*/\n  CPRegType = 876,\n/*\n**************************************************************\n* The program under which the underlying commercial paper is *\n* issued                                                     *\n**************************************************************\n*/\n  UnderlyingCPProgram = 877,\n/*\n************************************************************\n* The registration type of the underlying commercial paper *\n* issuance                                                 *\n************************************************************\n*/\n  UnderlyingCPRegType = 878,\n/*\n********************************************************\n* Unit amount of the underlying security (par, shares, *\n* currency, etc.)                                      *\n********************************************************\n*/\n  UnderlyingQty = 879,\n/*\n********************************************************\n* Identifier assigned to a trade by a matching system. *\n********************************************************\n*/\n  TrdMatchID = 880,\n/*\n**************************************************************\n* Used to refer to a previous SecondaryTradeReportRefID when *\n* amending the transaction (cancel, replace, release, or     *\n* reversal).                                                 *\n**************************************************************\n*/\n  SecondaryTradeReportRefID = 881,\n/*\n*********************************************************\n* Price (percent-of-par or per unit) of the underlying  *\n* security or basket. \"Dirty\" means it includes accrued *\n* interest                                              *\n*********************************************************\n*/\n  UnderlyingDirtyPrice = 882,\n/*\n********************************************************\n* Price (percent-of-par or per unit) of the underlying *\n* security or basket at the end of the agreement.      *\n********************************************************\n*/\n  UnderlyingEndPrice = 883,\n/*\n****************************************************************\n* Currency value attributed to this collateral at the start of *\n* the agreement                                                *\n****************************************************************\n*/\n  UnderlyingStartValue = 884,\n/*\n**********************************************************\n* Currency value currently attributed to this collateral *\n**********************************************************\n*/\n  UnderlyingCurrentValue = 885,\n/*\n**************************************************************\n* Currency value attributed to this collateral at the end of *\n* the agreement                                              *\n**************************************************************\n*/\n  UnderlyingEndValue = 886,\n/*\n********************************************\n* Number of underlying stipulation entries *\n********************************************\n*/\n  NoUnderlyingStips = 887,\n/*\n****************************************\n* Type of stipulation.                 *\n* Same values as StipulationType (233) *\n****************************************\n*/\n  UnderlyingStipType = 888,\n/*\n*****************************************\n* Value of stipulation.                 *\n* Same values as StipulationValue (234) *\n*****************************************\n*/\n  UnderlyingStipValue = 889,\n/*\n**************************************************************\n* Net Money at maturity if Zero Coupon and maturity value is *\n* different from par value                                   *\n**************************************************************\n*/\n  MaturityNetMoney = 890,\n/*\n*********************************************\n* Defines the unit for a miscellaneous fee. *\n*********************************************\n*/\n  MiscFeeBasis = 891,\n/*\n***************************************************************\n* Total number of NoAlloc entries across all messages. Should *\n* be the sum of all NoAllocs in each message that has         *\n* repeating NoAlloc entries related to the same AllocID or    *\n* AllocReportID. Used to support fragmentation.               *\n***************************************************************\n*/\n  TotNoAllocs = 892,\n/*\n****************************************************************\n* Indicates whether this message is the last in a sequence of  *\n* messages for those messages that support fragmentation, such *\n* as Allocation Instruction, Mass Quote, Security List,        *\n* Derivative Security List                                     *\n****************************************************************\n*/\n  LastFragment = 893,\n/*\n*********************************\n* Collateral Request Identifier *\n*********************************\n*/\n  CollReqID = 894,\n/*\n************************************\n* Reason for Collateral Assignment *\n************************************\n*/\n  CollAsgnReason = 895,\n/*\n**********************************\n* Collateral inquiry qualifiers: *\n**********************************\n*/\n  CollInquiryQualifier = 896,\n/*\n****************************************\n* Number of trades in repeating group. *\n****************************************\n*/\n  NoTrades = 897,\n/*\n****************************************************************\n* The fraction of the cash consideration that must be          *\n* collateralized, expressed as a percent. A MarginRatio of 02% *\n* indicates that the value of the collateral (after deducting  *\n* for \"haircut\") must exceed the cash consideration by 2%.     *\n****************************************************************\n*/\n  MarginRatio = 898,\n/*\n*******************************************************\n* Excess margin amount (deficit if value is negative) *\n*******************************************************\n*/\n  MarginExcess = 899,\n/*\n**************************************************************\n* TotalNetValue is determined as follows:                    *\n* At the initial collateral assignment TotalNetValue is the  *\n* sum of (UnderlyingStartValue * (1-haircut)).               *\n* In a collateral substitution TotalNetValue is the sum of   *\n* (UnderlyingCurrentValue * (1-haircut)).                    *\n* For listed derivatives clearing margin management, this is *\n* the collateral value which equals (Market value * haircut) *\n**************************************************************\n*/\n  TotalNetValue = 900,\n/*\n******************************************\n* Starting consideration less repayments *\n******************************************\n*/\n  CashOutstanding = 901,\n/*\n************************************\n* Collateral Assignment Identifier *\n************************************\n*/\n  CollAsgnID = 902,\n/*\n******************************************\n* Collateral Assignment Transaction Type *\n******************************************\n*/\n  CollAsgnTransType = 903,\n/*\n**********************************\n* Collateral Response Identifier *\n**********************************\n*/\n  CollRespID = 904,\n/*\n***************************************\n* Collateral Assignment Response Type *\n***************************************\n*/\n  CollAsgnRespType = 905,\n/*\n***************************************\n* Collateral Assignment Reject Reason *\n***************************************\n*/\n  CollAsgnRejectReason = 906,\n/*\n***********************************************************\n* Collateral Assignment Identifier to which a transaction *\n* refers                                                  *\n***********************************************************\n*/\n  CollAsgnRefID = 907,\n/*\n********************************\n* Collateral Report Identifier *\n********************************\n*/\n  CollRptID = 908,\n/*\n*********************************\n* Collateral Inquiry Identifier *\n*********************************\n*/\n  CollInquiryID = 909,\n/*\n*********************\n* Collateral Status *\n*********************\n*/\n  CollStatus = 910,\n/*\n*************************************************************\n* Total number or reports returned in response to a request *\n*************************************************************\n*/\n  TotNumReports = 911,\n/*\n****************************************************************\n* Indicates whether this message is that last report message   *\n* in response to a request, such as Order Mass Status Request. *\n****************************************************************\n*/\n  LastRptRequested = 912,\n/*\n**************************************************************\n* The full name of the base standard agreement, annexes and  *\n* amendments in place between the principals applicable to a *\n* financing transaction.                                     *\n**************************************************************\n*/\n  AgreementDesc = 913,\n/*\n***********************************************************\n* A common reference to the applicable standing agreement *\n* between the counterparties to a financing transaction.  *\n***********************************************************\n*/\n  AgreementID = 914,\n/*\n**************************************************************\n* A reference to the date the underlying agreement specified *\n* by AgreementID and AgreementDesc was executed.             *\n**************************************************************\n*/\n  AgreementDate = 915,\n/*\n****************************************************************\n* Start date of a financing deal, i.e. the date the buyer pays *\n* the seller cash and takes control of the collateral          *\n****************************************************************\n*/\n  StartDate = 916,\n/*\n**********************************************************\n* End date of a financing deal, i.e. the date the seller *\n* reimburses the buyer and takes back control of the     *\n* collateral                                             *\n**********************************************************\n*/\n  EndDate = 917,\n/*\n***********************************************************\n* Contractual currency forming the basis of a financing   *\n* agreement and associated transactions. Usually, but not *\n* always, the same as the trade currency.                 *\n***********************************************************\n*/\n  AgreementCurrency = 918,\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\n  DeliveryType = 919,\n/*\n*****************************************************\n* Accrued Interest Amount applicable to a financing *\n* transaction on the End Date.                      *\n*****************************************************\n*/\n  EndAccruedInterestAmt = 920,\n/*\n***************************************************************\n* Starting dirty cash consideration of a financing deal, i.e. *\n* paid to the seller on the Start Date.                       *\n***************************************************************\n*/\n  StartCash = 921,\n/*\n*************************************************************\n* Ending dirty cash consideration of a financing deal. i.e. *\n* reimbursed to the buyer on the End Date.                  *\n*************************************************************\n*/\n  EndCash = 922,\n/*\n*****************************************\n* Unique identifier for a User Request. *\n*****************************************\n*/\n  UserRequestID = 923,\n/*\n***********************************************************\n* Indicates the action required by a User Request Message *\n***********************************************************\n*/\n  UserRequestType = 924,\n/*\n******************************\n* New Password or passphrase *\n******************************\n*/\n  NewPassword = 925,\n/*\n**********************************\n* Indicates the status of a user *\n**********************************\n*/\n  UserStatus = 926,\n/*\n*****************************************************\n* A text description associated with a user status. *\n*****************************************************\n*/\n  UserStatusText = 927,\n/*\n************************************************\n* Indicates the status of a network connection *\n************************************************\n*/\n  StatusValue = 928,\n/*\n********************************************************\n* A text description associated with a network status. *\n********************************************************\n*/\n  StatusText = 929,\n/*\n*******************************************\n* Assigned value used to identify a firm. *\n*******************************************\n*/\n  RefCompID = 930,\n/*\n**************************************************************\n* Assigned value used to identify specific elements within a *\n* firm.                                                      *\n**************************************************************\n*/\n  RefSubID = 931,\n/*\n*********************************************\n* Unique identifier for a network response. *\n*********************************************\n*/\n  NetworkResponseID = 932,\n/*\n*********************************************\n* Unique identifier for a network resquest. *\n*********************************************\n*/\n  NetworkRequestID = 933,\n/*\n***************************************************************\n* Identifier of the previous Network Response message sent to *\n* a counterparty, used to allow incremental updates.          *\n***************************************************************\n*/\n  LastNetworkResponseID = 934,\n/*\n**********************************************************\n* Indicates the type and level of details required for a *\n* Network Status Request Message                         *\n* Boolean logic applies EG If you want to subscribe for  *\n* changes to certain id\u0019s then UserRequestType =0 (8+2), *\n* Snapshot for certain ID\u0019s = 9 (8+)                     *\n**********************************************************\n*/\n  NetworkRequestType = 935,\n/*\n**************************************************\n* Number of CompID entries in a repeating group. *\n**************************************************\n*/\n  NoCompIDs = 936,\n/*\n**************************************************\n* Indicates the type of Network Response Message *\n**************************************************\n*/\n  NetworkStatusResponseType = 937,\n/*\n****************************************************************\n* Number of CollInquiryQualifier entries in a repeating group. *\n****************************************************************\n*/\n  NoCollInquiryQualifier = 938,\n/*\n***********************\n* Trade Report Status *\n***********************\n*/\n  TrdRptStatus = 939,\n/*\n************************************************\n* Identifies the status of the ConfirmationAck *\n************************************************\n*/\n  AffirmStatus = 940,\n/*\n*******************************************************\n* Currency in which the strike price of an underlying *\n* instrument is denominated                           *\n*******************************************************\n*/\n  UnderlyingStrikeCurrency = 941,\n/*\n***************************************************************\n* Currency in which the strike price of a instrument leg of a *\n* multileg instrument is denominated                          *\n***************************************************************\n*/\n  LegStrikeCurrency = 942,\n/*\n*************************************************************\n* A code that represents a time interval in which a fill or *\n* trade occurred.                                           *\n* Required for US futures markets.                          *\n*************************************************************\n*/\n  TimeBracket = 943,\n/*\n*********************************************************\n* Action proposed for an Underlying Instrument instance *\n*********************************************************\n*/\n  CollAction = 944,\n/*\n********************************\n* Status of Collateral Inquiry *\n********************************\n*/\n  CollInquiryStatus = 945,\n/*\n*************************************************************\n* Result returned in response to Collateral Inquiry         *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\n  CollInquiryResult = 946,\n/*\n*****************************************************\n* Currency in which the StrikePrice is denominated. *\n*****************************************************\n*/\n  StrikeCurrency = 947,\n/*\n***************************************************************\n* Number of Nested3PartyID (949), Nested3PartyIDSource (950), *\n* and Nested3PartyRole (95) entries                           *\n***************************************************************\n*/\n  NoNested3PartyIDs = 948,\n/*\n************************************************************\n* PartyID value within a \"third instance\" Nested repeating *\n* group.                                                   *\n* Same values as PartyID (448)                             *\n************************************************************\n*/\n  Nested3PartyID = 949,\n/*\n********************************************************\n* PartyIDSource value within a \"third instance\" Nested *\n* repeating group.                                     *\n* Same values as PartyIDSource (447)                   *\n********************************************************\n*/\n  Nested3PartyIDSource = 950,\n/*\n**************************************************************\n* PartyRole value within a \"third instance\" Nested repeating *\n* group.                                                     *\n* Same values as PartyRole (452)                             *\n**************************************************************\n*/\n  Nested3PartyRole = 951,\n/*\n**********************************************\n* Number of Nested3PartySubIDs (953) entries *\n**********************************************\n*/\n  NoNested3PartySubIDs = 952,\n/*\n***************************************************************\n* PartySubID value within a \"third instance\" Nested repeating *\n* group.                                                      *\n* Same values as PartySubID (523)                             *\n***************************************************************\n*/\n  Nested3PartySubID = 953,\n/*\n*********************************************************\n* PartySubIDType value within a \"third instance\" Nested *\n* repeating group.                                      *\n* Same values as PartySubIDType (803)                   *\n*********************************************************\n*/\n  Nested3PartySubIDType = 954,\n/*\n***********************************************************\n* Specifies when the contract (i.e. MBS/TBA) will settle. *\n***********************************************************\n*/\n  LegContractSettlMonth = 955,\n/*\n****************************************************************\n* The start date used for calculating accrued interest on debt *\n* instruments which are being sold between interest payment    *\n* dates. Often but not always the same as the Issue Date and   *\n* the Dated Date                                               *\n****************************************************************\n*/\n  LegInterestAccrualDate = 956\n}\n"]}