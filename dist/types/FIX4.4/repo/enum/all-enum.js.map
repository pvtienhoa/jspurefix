{"version":3,"file":"all-enum.js","sourceRoot":"","sources":["../../../../../src/types/FIX4.4/repo/enum/all-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n*************************************\n* Broker's side of advertised trade *\n*************************************\n*/\nexport enum AdvSide {\n  Buy = 'B',\n  Sell = 'S',\n  Cross = 'X',\n  Trade = 'T'\n}\n\n/*\n*****************************************************\n* Identifies advertisement message transaction type *\n*****************************************************\n*/\nexport enum AdvTransType {\n  New = 'N',\n  Cancel = 'C',\n  Replace = 'R'\n}\n\n/*\n*******************\n* Commission type *\n*******************\n*/\nexport enum CommType {\n  PerUnit = '1',\n  Percent = '2',\n  Absolute = '3',\n  PercentageWaivedCashDiscount = '4',\n  PercentageWaivedEnhancedUnits = '5',\n  PointsPerBondOrContract = '6'\n}\n\n/*\n****************************************************************\n* Instructions for order handling on exchange trading floor.   *\n* If more than one instruction is applicable to an order, this *\n* field can contain multiple instructions separated by space.  *\n****************************************************************\n*/\nexport enum ExecInst {\n  StayOnOfferSide = '0',\n  NotHeld = '1',\n  Work = '2',\n  GoAlong = '3',\n  OverTheDay = '4',\n  Held = '5',\n  ParticipateDoNotInitiate = '6',\n  StrictScale = '7',\n  TryToScale = '8',\n  StayOnBidSide = '9',\n  NoCross = 'A',\n  OkToCross = 'B',\n  CallFirst = 'C',\n  PercentOfVolume = 'D',\n  DoNotIncrease = 'E',\n  DoNotReduce = 'F',\n  AllOrNone = 'G',\n  ReinstateOnSystemFailure = 'H',\n  InstitutionsOnly = 'I',\n  ReinstateOnTradingHalt = 'J',\n  CancelOnTradingHalt = 'K',\n  LastPeg = 'L',\n  MidPricePeg = 'M',\n  NonNegotiable = 'N',\n  OpeningPeg = 'O',\n  MarketPeg = 'P',\n  CancelOnSystemFailure = 'Q',\n  PrimaryPeg = 'R',\n  Suspend = 'S',\n  CustomerDisplayInstruction = 'U',\n  Netting = 'V',\n  PegToVwap = 'W',\n  TradeAlong = 'X',\n  TryToStop = 'Y',\n  CancelIfNotBest = 'Z',\n  TrailingStopPeg = 'a',\n  StrictLimit = 'b',\n  IgnorePriceValidityChecks = 'c',\n  PegToLimitPrice = 'd',\n  WorkToTargetStrategy = 'e'\n}\n\n/*\n***********************************************************\n* Instructions for order handling on Broker trading floor *\n***********************************************************\n*/\nexport enum HandlInst {\n  AutomatedExecutionNoIntervention = '1',\n  AutomatedExecutionInterventionOk = '2',\n  ManualOrder = '3'\n}\n\n/*\n************************************************************\n* Identifies class or source of the SecurityID (48) value. *\n* Required if SecurityID is specified.                     *\n************************************************************\n*/\nexport enum SecurityIDSource {\n  Cusip = '1',\n  Sedol = '2',\n  Quik = '3',\n  IsinNumber = '4',\n  RicCode = '5',\n  IsoCurrencyCode = '6',\n  IsoCountryCode = '7',\n  ExchangeSymbol = '8',\n  ConsolidatedTapeAssociation = '9',\n  BloombergSymbol = 'A',\n  Wertpapier = 'B',\n  Dutch = 'C',\n  Valoren = 'D',\n  Sicovam = 'E',\n  Belgian = 'F',\n  Common = 'G',\n  ClearingHouse = 'H',\n  IsdaFpMlSpecification = 'I',\n  OptionPriceReportingAuthority = 'J'\n}\n\n/*\n**********************************\n* Relative quality of indication *\n**********************************\n*/\nexport enum IOIQltyInd {\n  Low = 'L',\n  Medium = 'M',\n  High = 'H'\n}\n\n/*\n****************************************************************\n* Quantity (e.g. number of shares) in numeric form or relative *\n* size.                                                        *\n****************************************************************\n*/\nexport enum IOIQty {\n  Small = 'S',\n  Medium = 'M',\n  Large = 'L'\n}\n\n/*\n*******************************************\n* Identifies IOI message transaction type *\n*******************************************\n*/\nexport enum IOITransType {\n  New = 'N',\n  Cancel = 'C',\n  Replace = 'R'\n}\n\n/*\n**************************************\n* Broker capacity in order execution *\n**************************************\n*/\nexport enum LastCapacity {\n  Agent = '1',\n  CrossAsAgent = '2',\n  CrossAsPrincipal = '3',\n  Principal = '4'\n}\n\n/*\n***************************************************************\n* Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always *\n* unencrypted)                                                *\n* Note: A \"U\" as the first character in the MsgType field     *\n* (i.e. U, U2, etc) indicates that the message format is      *\n* privately defined between the sender and receiver.          *\n***************************************************************\n*/\nexport enum MsgType {\n  Heartbeat = '0',\n  TestRequest = '1',\n  ResendRequest = '2',\n  Reject = '3',\n  SequenceReset = '4',\n  Logout = '5',\n  Ioi = '6',\n  Advertisement = '7',\n  ExecutionReport = '8',\n  OrderCancelReject = '9',\n  Logon = 'A',\n  News = 'B',\n  Email = 'C',\n  NewOrderSingle = 'D',\n  NewOrderList = 'E',\n  OrderCancelRequest = 'F',\n  OrderCancelReplaceRequest = 'G',\n  OrderStatusRequest = 'H',\n  AllocationInstruction = 'J',\n  ListCancelRequest = 'K',\n  ListExecute = 'L',\n  ListStatusRequest = 'M',\n  ListStatus = 'N',\n  AllocationInstructionAck = 'P',\n  DontKnowTrade = 'Q',\n  QuoteRequest = 'R',\n  Quote = 'S',\n  SettlementInstructions = 'T',\n  MarketDataRequest = 'V',\n  MarketDataSnapshotFullRefresh = 'W',\n  MarketDataIncrementalRefresh = 'X',\n  MarketDataRequestReject = 'Y',\n  QuoteCancel = 'Z',\n  QuoteStatusRequest = 'a',\n  MassQuoteAcknowledgement = 'b',\n  SecurityDefinitionRequest = 'c',\n  SecurityDefinition = 'd',\n  SecurityStatusRequest = 'e',\n  SecurityStatus = 'f',\n  TradingSessionStatusRequest = 'g',\n  TradingSessionStatus = 'h',\n  MassQuote = 'i',\n  BusinessMessageReject = 'j',\n  BidRequest = 'k',\n  BidResponse = 'l',\n  ListStrikePrice = 'm',\n  XmlNonFix = 'n',\n  RegistrationInstructions = 'o',\n  RegistrationInstructionsResponse = 'p',\n  OrderMassCancelRequest = 'q',\n  OrderMassCancelReport = 'r',\n  NewOrderCross = 's',\n  CrossOrderCancelReplaceRequest = 't',\n  CrossOrderCancelRequest = 'u',\n  SecurityTypeRequest = 'v',\n  SecurityTypes = 'w',\n  SecurityListRequest = 'x',\n  SecurityList = 'y',\n  DerivativeSecurityListRequest = 'z',\n  DerivativeSecurityList = 'AA',\n  NewOrderMultileg = 'AB',\n  MultilegOrderCancelReplace = 'AC',\n  TradeCaptureReportRequest = 'AD',\n  TradeCaptureReport = 'AE',\n  OrderMassStatusRequest = 'AF',\n  QuoteRequestReject = 'AG',\n  RfqRequest = 'AH',\n  QuoteStatusReport = 'AI',\n  QuoteResponse = 'AJ',\n  Confirmation = 'AK',\n  PositionMaintenanceRequest = 'AL',\n  PositionMaintenanceReport = 'AM',\n  RequestForPositions = 'AN',\n  RequestForPositionsAck = 'AO',\n  PositionReport = 'AP',\n  TradeCaptureReportRequestAck = 'AQ',\n  TradeCaptureReportAck = 'AR',\n  AllocationReport = 'AS',\n  AllocationReportAck = 'AT',\n  ConfirmationAck = 'AU',\n  SettlementInstructionRequest = 'AV',\n  AssignmentReport = 'AW',\n  CollateralRequest = 'AX',\n  CollateralAssignment = 'AY',\n  CollateralResponse = 'AZ',\n  CollateralReport = 'BA',\n  CollateralInquiry = 'BB',\n  NetworkCounterpartySystemStatusRequest = 'BC',\n  NetworkCounterpartySystemStatusResponse = 'BD',\n  UserRequest = 'BE',\n  UserResponse = 'BF',\n  CollateralInquiryAck = 'BG',\n  ConfirmationRequest = 'BH'\n}\n\n/*\n***************************************************************\n* Identifies current status of order.                         *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\nexport enum OrdStatus {\n  New = '0',\n  PartiallyFilled = '1',\n  Filled = '2',\n  DoneForDay = '3',\n  Canceled = '4',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C',\n  AcceptedForBidding = 'D',\n  PendingReplace = 'E'\n}\n\n/*\n********************************************************\n* Order type                                           *\n* *** SOME VALUES ARE NO LONGER USED - See \"Deprecated *\n* (Phased-out) Features and Supported Approach\" ***    *\n* (see Volume : \"Glossary\" for value definitions)      *\n********************************************************\n*/\nexport enum OrdType {\n  Market = '1',\n  Limit = '2',\n  Stop = '3',\n  StopLimit = '4',\n  WithOrWithout = '6',\n  LimitOrBetter = '7',\n  LimitWithOrWithout = '8',\n  OnBasis = '9',\n  PreviouslyQuoted = 'D',\n  PreviouslyIndicated = 'E',\n  ForexSwap = 'G',\n  Funari = 'I',\n  MarketIfTouched = 'J',\n  MarketWithLeftOverAsLimit = 'K',\n  PreviousFundValuationPoint = 'L',\n  NextFundValuationPoint = 'M',\n  Pegged = 'P'\n}\n\n/*\n**********************************************************\n* Indicates possible retransmission of message with this *\n* sequence number                                        *\n**********************************************************\n*/\nexport enum PossDupFlag {\n  PossibleDuplicate = 'Y',\n  OriginalTransmission = 'N'\n}\n\n/*\n*****************\n* Side of order *\n*****************\n*/\nexport enum Side {\n  Buy = '1',\n  Sell = '2',\n  BuyMinus = '3',\n  SellPlus = '4',\n  SellShort = '5',\n  SellShortExempt = '6',\n  Undisclosed = '7',\n  Cross = '8',\n  CrossShort = '9',\n  CrossShortExempt = 'A',\n  AsDefined = 'B',\n  Opposite = 'C',\n  Subscribe = 'D',\n  Redeem = 'E',\n  Lend = 'F',\n  Borrow = 'G'\n}\n\n/*\n**************************************************************\n* Specifies how long the order remains in effect. Absence of *\n* this field is interpreted as DAY.                          *\n**************************************************************\n*/\nexport enum TimeInForce {\n  Day = '0',\n  GoodTillCancel = '1',\n  AtTheOpening = '2',\n  ImmediateOrCancel = '3',\n  FillOrKill = '4',\n  GoodTillCrossing = '5',\n  GoodTillDate = '6',\n  AtTheClose = '7'\n}\n\n/*\n****************\n* Urgency flag *\n****************\n*/\nexport enum Urgency {\n  Normal = '0',\n  Flash = '1',\n  Background = '2'\n}\n\n/*\n****************************************************************\n* Indicates order settlement period. If present, SettlDate     *\n* (64) overrides this field. If both SettlType (63) and        *\n* SettDate (64) are omitted, the default for SettlType (63) is *\n* 0 (Regular)                                                  *\n* Regular is defined as the default settlement period for the  *\n* particular security on the exchange of execution.            *\n* In Fixed Income the contents of this field may influence the *\n* instrument definition if the SecurityID (48) is ambiguous.   *\n* In the US an active Treasury offering may be re-opened, and  *\n* for a time one CUSIP will apply to both the current and      *\n* \"when-issued\" securities. Supplying a value of \"7\" clarifies *\n* the instrument description; any other value or the absence   *\n* of this field should cause the respondent to default to the  *\n* active issue.                                                *\n****************************************************************\n*/\nexport enum SettlType {\n  Regular = '0',\n  Cash = '1',\n  NextDay = '2',\n  TPlus2 = '3',\n  TPlus3 = '4',\n  TPlus4 = '5',\n  Future = '6',\n  WhenAndIfIssued = '7',\n  SellersOption = '8',\n  TPlus5 = '9'\n}\n\n/*\n***************************************************************\n* Identifies allocation transaction type                      *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\nexport enum AllocTransType {\n  New = '0',\n  Replace = '1',\n  Cancel = '2'\n}\n\n/*\n***************************************************************\n* Indicates whether the resulting position after a trade      *\n* should be an opening position or closing position. Used for *\n* omnibus accounting - where accounts are held on a gross     *\n* basis instead of being netted together.                     *\n***************************************************************\n*/\nexport enum PositionEffect {\n  Open = 'O',\n  Close = 'C',\n  Rolled = 'R',\n  Fifo = 'F'\n}\n\n/*\n*************************************************************\n* Processing code for sub-account. Absence of this field in *\n* AllocAccount (79) / AllocPrice (366) /AllocQty (80) /     *\n* ProcessCode instance indicates regular trade.             *\n*************************************************************\n*/\nexport enum ProcessCode {\n  Regular = '0',\n  SoftDollar = '1',\n  StepIn = '2',\n  StepOut = '3',\n  SoftDollarStepIn = '4',\n  SoftDollarStepOut = '5',\n  PlanSponsor = '6'\n}\n\n/*\n***********************************\n* Identifies status of allocation *\n***********************************\n*/\nexport enum AllocStatus {\n  Accepted = 0,\n  BlockLevelReject = 1,\n  AccountLevelReject = 2,\n  Received = 3,\n  Incomplete = 4,\n  RejectedByIntermediary = 5\n}\n\n/*\n***********************************\n* Identifies reason for rejection *\n***********************************\n*/\nexport enum AllocRejCode {\n  UnknownAccount = 0,\n  IncorrectQuantity = 1,\n  IncorrectAveragegPrice = 2,\n  UnknownExecutingBrokerMnemonic = 3,\n  CommissionDifference = 4,\n  UnknownOrderId = 5,\n  UnknownListId = 6,\n  OtherSeeText = 7,\n  IncorrectAllocatedQuantity = 8,\n  CalculationDifference = 9,\n  UnknownOrStaleExecId = 10,\n  MismatchedData = 11,\n  UnknownClOrdId = 12,\n  WarehouseRequestRejected = 13\n}\n\n/*\n**********************\n* Email message type *\n**********************\n*/\nexport enum EmailType {\n  New = '0',\n  Reply = '1',\n  AdminReply = '2'\n}\n\n/*\n****************************************************************\n* Indicates that message may contain information that has been *\n* sent under another sequence number.                          *\n****************************************************************\n*/\nexport enum PossResend {\n  PossibleResend = 'Y',\n  OriginalTransmission = 'N'\n}\n\n/*\n************************\n* Method of encryption *\n************************\n*/\nexport enum EncryptMethod {\n  None = 0,\n  Pkcs = 1,\n  Des = 2,\n  Pkcsdes = 3,\n  Pgpdes = 4,\n  Pgpdesmd5 = 5,\n  Pem = 6\n}\n\n/*\n************************************************\n* Code to identify reason for cancel rejection *\n************************************************\n*/\nexport enum CxlRejReason {\n  TooLateToCancel = 0,\n  UnknownOrder = 1,\n  BrokerCredit = 2,\n  OrderAlreadyInPendingStatus = 3,\n  UnableToProcessOrderMassCancelRequest = 4,\n  OrigOrdModTime = 5,\n  DuplicateClOrdId = 6,\n  Other = 99\n}\n\n/*\n************************************************\n* Code to identify reason for order rejection. *\n************************************************\n*/\nexport enum OrdRejReason {\n  BrokerCredit = 0,\n  UnknownSymbol = 1,\n  ExchangeClosed = 2,\n  OrderExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownOrder = 5,\n  DuplicateOrder = 6,\n  DuplicateOfAVerballyCommunicatedOrder = 7,\n  StaleOrder = 8,\n  TradeAlongRequired = 9,\n  InvalidInvestorId = 10,\n  UnsupportedOrderCharacteristic = 11,\n  IncorrectQuantity = 13,\n  IncorrectAllocatedQuantity = 14,\n  UnknownAccount = 15,\n  Other = 99\n}\n\n/*\n***************************\n* Code to qualify IOI use *\n***************************\n*/\nexport enum IOIQualifier {\n  AllOrNone = 'A',\n  MarketOnClose = 'B',\n  AtTheClose = 'C',\n  Vwap = 'D',\n  InTouchWith = 'I',\n  Limit = 'L',\n  MoreBehind = 'M',\n  AtTheOpen = 'O',\n  TakingAPosition = 'P',\n  AtTheMarket = 'Q',\n  ReadyToTrade = 'R',\n  PortfolioShown = 'S',\n  ThroughTheDay = 'T',\n  Versus = 'V',\n  Indication = 'W',\n  CrossingOpportunity = 'X',\n  AtTheMidpoint = 'Y',\n  PreOpen = 'Z'\n}\n\n/*\n******************************************************\n* Identifies party of trade responsible for exchange *\n* reporting.                                         *\n******************************************************\n*/\nexport enum ReportToExch {\n  ReceiverReports = 'Y',\n  SenderReports = 'N'\n}\n\n/*\n**********************************************************\n* Indicates whether the broker is to locate the stock in *\n* conjunction with a short sell order.                   *\n**********************************************************\n*/\nexport enum LocateReqd {\n  Yes = 'Y',\n  No = 'N'\n}\n\n/*\n*********************************************************\n* Indicates request for forex accommodation trade to be *\n* executed along with security transaction.             *\n*********************************************************\n*/\nexport enum ForexReq {\n  ExecuteForexAfterSecurityTrade = 'Y',\n  DoNotExecuteForexAfterSecurityTrade = 'N'\n}\n\n/*\n************************************************************\n* Indicates that the Sequence Reset message is replacing   *\n* administrative or application messages which will not be *\n* resent.                                                  *\n************************************************************\n*/\nexport enum GapFillFlag {\n  GapFillMessage = 'Y',\n  SequenceReset = 'N'\n}\n\n/*\n**********************************\n* Reason for execution rejection *\n**********************************\n*/\nexport enum DKReason {\n  UnknownSymbol = 'A',\n  WrongSide = 'B',\n  QuantityExceedsOrder = 'C',\n  NoMatchingOrder = 'D',\n  PriceExceedsLimit = 'E',\n  CalculationDifference = 'F',\n  Other = 'Z'\n}\n\n/*\n****************************************************************\n* Indicates that IOI is the result of an existing agency order *\n* or a facilitation position resulting from an agency order,   *\n* not from principal trading or order solicitation activity.   *\n****************************************************************\n*/\nexport enum IOINaturalFlag {\n  Natural = 'Y',\n  NotNatural = 'N'\n}\n\n/*\n***************************************\n* Indicates type of miscellaneous fee *\n***************************************\n*/\nexport enum MiscFeeType {\n  Regulatory = '1',\n  Tax = '2',\n  LocalCommission = '3',\n  ExchangeFees = '4',\n  Stamp = '5',\n  Levy = '6',\n  Other = '7',\n  Markup = '8',\n  ConsumptionTax = '9',\n  PerTransaction = '10',\n  Conversion = '11',\n  Agent = '12'\n}\n\n/*\n***********************************************************\n* Indicates that the both sides of the FIX session should *\n* reset sequence numbers.                                 *\n***********************************************************\n*/\nexport enum ResetSeqNumFlag {\n  Yes = 'Y',\n  No = 'N'\n}\n\n/*\n***************************************************************\n* Describes the specific ExecutionRpt (i.e. Pending Cancel)   *\n* while OrdStatus (39) will always identify the current order *\n* status (i.e. Partially Filled)                              *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\nexport enum ExecType {\n  New = '0',\n  DoneForDay = '3',\n  Canceled = '4',\n  Replaced = '5',\n  PendingCancel = '6',\n  Stopped = '7',\n  Rejected = '8',\n  Suspended = '9',\n  PendingNew = 'A',\n  Calculated = 'B',\n  Expired = 'C',\n  Restated = 'D',\n  PendingReplace = 'E',\n  Trade = 'F',\n  TradeCorrect = 'G',\n  TradeCancel = 'H',\n  OrderStatus = 'I'\n}\n\n/*\n***********************************************************\n* Specifies whether or not SettlCurrFxRate (55) should be *\n* multiplied or divided                                   *\n***********************************************************\n*/\nexport enum SettlCurrFxRateCalc {\n  Multiply = 'M',\n  Divide = 'D'\n}\n\n/*\n***************************************************************\n* Indicates mode used for Settlement Instructions message.    *\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\n* and Supported Approach\" ***                                 *\n***************************************************************\n*/\nexport enum SettlInstMode {\n  StandingInstructionsProvided = '1',\n  SpecificOrderForASingleAccount = '4',\n  RequestReject = '5'\n}\n\n/*\n****************************************************\n* Settlement Instructions message transaction type *\n****************************************************\n*/\nexport enum SettlInstTransType {\n  New = 'N',\n  Cancel = 'C',\n  Replace = 'R',\n  Restate = 'T'\n}\n\n/*\n***********************************************\n* Indicates source of Settlement Instructions *\n***********************************************\n*/\nexport enum SettlInstSource {\n  BrokerCredit = '1',\n  Institution = '2',\n  Investor = '3'\n}\n\n/*\n***************************************************************\n* Indicates type of security. See also the Product (460) and  *\n* CFICode (46) fields. It is recommended that CFICode be used *\n* instead of SecurityType for non-Fixed Income instruments.   *\n* Example values (grouped by Product field value) (Note:      *\n* additional values may be used by mutual agreement of the    *\n* counterparties):                                            *\n* * Identify the Issuer in the \"Issuer\" field(06)             *\n* *** REPLACED values - See \"Replaced Features and Supported  *\n* Approach\" ***                                               *\n* NOTE: Additional values may be used by mutual agreement of  *\n* the counterparties)                                         *\n***************************************************************\n*/\nexport enum SecurityType {\n  Future = 'FUT',\n  Option = 'OPT',\n  EuroSupranationalCoupons = 'EUSUPRA',\n  FederalAgencyCoupon = 'FAC',\n  FederalAgencyDiscountNote = 'FADN',\n  PrivateExportFunding = 'PEF',\n  UsdSupranationalCoupons = 'SUPRA',\n  CorporateBond = 'CORP',\n  CorporatePrivatePlacement = 'CPP',\n  ConvertibleBond = 'CB',\n  DualCurrency = 'DUAL',\n  EuroCorporateBond = 'EUCORP',\n  IndexedLinked = 'XLINKD',\n  StructuredNotes = 'STRUCT',\n  YankeeCorporateBond = 'YANK',\n  ForeignExchangeContract = 'FOR',\n  CommonStock = 'CS',\n  PreferredStock = 'PS',\n  BradyBond = 'BRADY',\n  EuroSovereigns = 'EUSOV',\n  UsTreasuryBond = 'TBOND',\n  InterestStripFromAnyBondOrNote = 'TINT',\n  TreasuryInflationProtectedSecurities = 'TIPS',\n  PrincipalStripOfACallableBondOrNote = 'TCAL',\n  PrincipalStripFromANonCallableBondOrNote = 'TPRN',\n  UsTreasuryNoteOld = 'UST',\n  UsTreasuryBillOld = 'USTB',\n  UsTreasuryNote = 'TNOTE',\n  UsTreasuryBill = 'TBILL',\n  Repurchase = 'REPO',\n  Forward = 'FORWARD',\n  BuySellback = 'BUYSELL',\n  SecuritiesLoan = 'SECLOAN',\n  SecuritiesPledge = 'SECPLEDGE',\n  TermLoan = 'TERM',\n  RevolverLoan = 'RVLV',\n  Revolver = 'RVLVTRM',\n  BridgeLoan = 'BRIDGE',\n  LetterOfCredit = 'LOFC',\n  SwingLineFacility = 'SWING',\n  DebtorInPossession = 'DINP',\n  Defaulted = 'DEFLTED',\n  Withdrawn = 'WITHDRN',\n  Replaced = 'REPLACD',\n  Matured = 'MATURED',\n  Amended = 'AMENDED',\n  Retired = 'RETIRED',\n  BankersAcceptance = 'BA',\n  BankNotes = 'BN',\n  BillOfExchanges = 'BOX',\n  CertificateOfDeposit = 'CD',\n  CallLoans = 'CL',\n  CommercialPaper = 'CP',\n  DepositNotes = 'DN',\n  EuroCertificateOfDeposit = 'EUCD',\n  EuroCommercialPaper = 'EUCP',\n  LiquidityNote = 'LQN',\n  MediumTermNotes = 'MTN',\n  Overnight = 'ONITE',\n  PromissoryNote = 'PN',\n  PlazosFijos = 'PZFJ',\n  ShortTermLoanNote = 'STN',\n  TimeDeposit = 'TD',\n  ExtendedCommNote = 'XCN',\n  YankeeCertificateOfDeposit = 'YCD',\n  AssetBackedSecurities = 'ABS',\n  Corp = 'CMBS',\n  CollateralizedMortgageObligation = 'CMO',\n  IoetteMortgage = 'IET',\n  MortgageBackedSecurities = 'MBS',\n  MortgageInterestOnly = 'MIO',\n  MortgagePrincipalOnly = 'MPO',\n  MortgagePrivatePlacement = 'MPP',\n  MiscellaneousPassThrough = 'MPT',\n  Pfandbriefe = 'PFAND',\n  ToBeAnnounced = 'TBA',\n  OtherAnticipationNotes = 'AN',\n  CertificateOfObligation = 'COFO',\n  CertificateOfParticipation = 'COFP',\n  GeneralObligationBonds = 'GO',\n  MandatoryTender = 'MT',\n  RevenueAnticipationNote = 'RAN',\n  RevenueBonds = 'REV',\n  SpecialAssessment = 'SPCLA',\n  SpecialObligation = 'SPCLO',\n  SpecialTax = 'SPCLT',\n  TaxAnticipationNote = 'TAN',\n  TaxAllocation = 'TAXA',\n  TaxExemptCommercialPaper = 'TECP',\n  TaxRevenueAnticipationNote = 'TRAN',\n  VariableRateDemandNote = 'VRDN',\n  Warrant = 'WAR',\n  MutualFund = 'MF',\n  MultilegInstrument = 'MLEG',\n  NoSecurityType = 'NONE'\n}\n\n/*\n*****************************************************\n* Identifies the Standing Instruction database used *\n*****************************************************\n*/\nexport enum StandInstDbType {\n  Other = 0,\n  Dtcsid = 1,\n  ThomsonAlert = 2,\n  AGlobalCustodian = 3,\n  AccountNet = 4\n}\n\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\nexport enum SettlDeliveryType {\n  Versus = 0,\n  Free = 1,\n  TriParty = 2,\n  HoldInCustody = 3\n}\n\n/*\n**************************************************************\n* Identifies the type of Allocation linkage when AllocLinkID *\n* (96) is used.                                              *\n**************************************************************\n*/\nexport enum AllocLinkType {\n  FxNetting = 0,\n  FxSwap = 1\n}\n\n/*\n****************************************************\n* Indicates whether an Option is for a put or call *\n****************************************************\n*/\nexport enum PutOrCall {\n  Put = 0,\n  Call = 1\n}\n\n/*\n*************************************************\n* Used for derivative products, such as options *\n*************************************************\n*/\nexport enum CoveredOrUncovered {\n  Covered = 0,\n  Uncovered = 1\n}\n\n/*\n**************************************************************\n* Indicates whether or not details should be communicated to *\n* BrokerOfCredit (i.e. step-in broker).                      *\n**************************************************************\n*/\nexport enum NotifyBrokerOfCredit {\n  DetailsShouldBeCommunicated = 'Y',\n  DetailsShouldNotBeCommunicated = 'N'\n}\n\n/*\n***************************************************************\n* Indicates how the receiver (i.e. third party) of Allocation *\n* message should handle/process the account details           *\n***************************************************************\n*/\nexport enum AllocHandlInst {\n  Match = 1,\n  Forward = 2,\n  ForwardAndMatch = 3\n}\n\n/*\n**************************************************\n* Indicates the type of RoutingID (27) specified *\n**************************************************\n*/\nexport enum RoutingType {\n  TargetFirm = 1,\n  TargetList = 2,\n  BlockFirm = 3,\n  BlockList = 4\n}\n\n/*\n***********************\n* Type of Stipulation *\n***********************\n*/\nexport enum StipulationType {\n  AlternativeMinimumTax = 'AMT',\n  AutoReinvestment = 'AUTOREINV',\n  BankQualified = 'BANKQUAL',\n  BargainConditions = 'BGNCON',\n  CouponRange = 'COUPON',\n  IsoCurrencyCode = 'CURRENCY',\n  CustomStart = 'CUSTOMDATE',\n  Geographics = 'GEOG',\n  ValuationDiscount = 'HAIRCUT',\n  Insured = 'INSURED',\n  IssueDate = 'ISSUE',\n  Issuer = 'ISSUER',\n  IssueSizeRange = 'ISSUESIZE',\n  LookbackDays = 'LOOKBACK',\n  ExplicitLotIdentifier = 'LOT',\n  LotVariance = 'LOTVAR',\n  MaturityYearAndMonth = 'MAT',\n  MaturityRange = 'MATURITY',\n  MaximumSubstitutions = 'MAXSUBS',\n  MinimumQuantity = 'MINQTY',\n  MinimumIncrement = 'MININCR',\n  MinimumDenomination = 'MINDNOM',\n  PaymentFrequency = 'PAYFREQ',\n  NumberOfPieces = 'PIECES',\n  PoolsMaximum = 'PMAX',\n  PoolsPerMillion = 'PPM',\n  PoolsPerLot = 'PPL',\n  PoolsPerTrade = 'PPT',\n  PriceRange = 'PRICE',\n  PricingFrequency = 'PRICEFREQ',\n  ProductionYear = 'PROD',\n  CallProtection = 'PROTECT',\n  Purpose = 'PURPOSE',\n  BenchmarkPriceSource = 'PXSOURCE',\n  RatingSourceAndRange = 'RATING',\n  TypeOfRedemption = 'REDEMPTION',\n  Restricted = 'RESTRICTED',\n  MarketSector = 'SECTOR',\n  SecurityTypeIncludedOrExcluded = 'SECTYPE',\n  Structure = 'STRUCT',\n  SubstitutionsFrequency = 'SUBSFREQ',\n  SubstitutionsLeft = 'SUBSLEFT',\n  FreeformText = 'TEXT',\n  TradeVariance = 'TRDVAR',\n  WeightedAverageCoupon = 'WAC',\n  WeightedAverageLifeCoupon = 'WAL',\n  WeightedAverageLoanAge = 'WALA',\n  WeightedAverageMaturity = 'WAM',\n  WholePool = 'WHOLE',\n  YieldRange = 'YIELD'\n}\n\n/*\n*****************\n* Type of yield *\n*****************\n*/\nexport enum YieldType {\n  AfterTaxYield = 'AFTERTAX',\n  AnnualYield = 'ANNUAL',\n  YieldAtIssue = 'ATISSUE',\n  YieldToAverageMaturity = 'AVGMATURITY',\n  BookYield = 'BOOK',\n  YieldToNextCall = 'CALL',\n  YieldChangeSinceClose = 'CHANGE',\n  ClosingYield = 'CLOSE',\n  CompoundYield = 'COMPOUND',\n  CurrentYield = 'CURRENT',\n  TrueGrossYield = 'GROSS',\n  GvntEquivalentYield = 'GOVTEQUIV',\n  YieldWithInflationAssumption = 'INFLATION',\n  InverseFloaterBondYield = 'INVERSEFLOATER',\n  MostRecentClosingYield = 'LASTCLOSE',\n  ClosingYieldMostRecentMonth = 'LASTMONTH',\n  ClosingYieldMostRecentQuarter = 'LASTQUARTER',\n  ClosingYieldMostRecentYear = 'LASTYEAR',\n  YieldToLongestAverageLife = 'LONGAVGLIFE',\n  MarkToMarketYield = 'MARK',\n  YieldToMaturity = 'MATURITY',\n  YieldToNextRefund = 'NEXTREFUND',\n  OpenAverageYield = 'OPENAVG',\n  YieldToNextPut = 'PUT',\n  PreviousCloseYield = 'PREVCLOSE',\n  ProceedsYield = 'PROCEEDS',\n  SemiAnnualYield = 'SEMIANNUAL',\n  YieldToShortestAverageLife = 'SHORTAVGLIFE',\n  SimpleYield = 'SIMPLE',\n  TaxEquivalentYield = 'TAXEQUIV',\n  YieldToTenderDate = 'TENDER',\n  TrueYield = 'TRUE',\n  YieldValueOf132 = 'VALUE1/32',\n  YieldToWorst = 'WORST'\n}\n\n/*\n***********************************************************\n* Driver and part of trade in the event that the Security *\n* Master file was wrong at the point of entry             *\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\n***********************************************************\n*/\nexport enum TradedFlatSwitch {\n  TradedFlat = 'Y',\n  NotTradedFlat = 'N'\n}\n\n/*\n*****************************\n* Subscription Request Type *\n*****************************\n*/\nexport enum SubscriptionRequestType {\n  Snapshot = '0',\n  SnapshotAndUpdates = '1',\n  DisablePreviousSnapshot = '2'\n}\n\n/*\n********************************************\n* Specifies the type of Market Data update *\n********************************************\n*/\nexport enum MDUpdateType {\n  FullRefresh = 0,\n  IncrementalRefresh = 1\n}\n\n/*\n***************************************************************\n* Specifies whether or not book entries should be aggregated. *\n***************************************************************\n*/\nexport enum AggregatedBook {\n  BookEntriesToBeAggregated = 'Y',\n  BookEntriesShouldNotBeAggregated = 'N'\n}\n\n/*\n**************************\n* Type Market Data entry *\n**************************\n*/\nexport enum MDEntryType {\n  Bid = '0',\n  Offer = '1',\n  Trade = '2',\n  IndexValue = '3',\n  OpeningPrice = '4',\n  ClosingPrice = '5',\n  SettlementPrice = '6',\n  TradingSessionHighPrice = '7',\n  TradingSessionLowPrice = '8',\n  TradingSessionVwapPrice = '9',\n  Imbalance = 'A',\n  TradeVolume = 'B',\n  OpenInterest = 'C'\n}\n\n/*\n***************************\n* Direction of the \"tick\" *\n***************************\n*/\nexport enum TickDirection {\n  PlusTick = '0',\n  ZeroPlusTick = '1',\n  MinusTick = '2',\n  ZeroMinusTick = '3'\n}\n\n/*\n*********************************************************\n* Space-delimited list of conditions describing a quote *\n*********************************************************\n*/\nexport enum QuoteCondition {\n  Open = 'A',\n  Closed = 'B',\n  ExchangeBest = 'C',\n  ConsolidatedBest = 'D',\n  Locked = 'E',\n  Crossed = 'F',\n  Depth = 'G',\n  FastTrading = 'H',\n  NonFirm = 'I'\n}\n\n/*\n*********************************************************\n* Space-delimited list of conditions describing a trade *\n*********************************************************\n*/\nexport enum TradeCondition {\n  Cash = 'A',\n  AveragePriceTrade = 'B',\n  CashTrade = 'C',\n  NextDay = 'D',\n  Opening = 'E',\n  IntradayTradeDetail = 'F',\n  Rule127Trade = 'G',\n  Rule155Trade = 'H',\n  SoldLast = 'I',\n  NextDayTrade = 'J',\n  Opened = 'K',\n  Seller = 'L',\n  Sold = 'M',\n  StoppedStock = 'N',\n  ImbalanceMoreBuyers = 'P',\n  ImbalanceMoreSellers = 'Q',\n  OpeningPrice = 'R'\n}\n\n/*\n*************************************\n* Type of Market Data update action *\n*************************************\n*/\nexport enum MDUpdateAction {\n  New = '0',\n  Change = '1',\n  Delete = '2'\n}\n\n/*\n*****************************************************\n* Reason for the rejection of a Market Data request *\n*****************************************************\n*/\nexport enum MDReqRejReason {\n  UnknownSymbol = '0',\n  DuplicateMdReqId = '1',\n  InsufficientBandwidth = '2',\n  InsufficientPermissions = '3',\n  UnsupportedSubscriptionRequestType = '4',\n  UnsupportedMarketDepth = '5',\n  UnsupportedMdUpdateType = '6',\n  UnsupportedAggregatedBook = '7',\n  UnsupportedMdEntryType = '8',\n  UnsupportedTradingSessionId = '9',\n  UnsupportedScope = 'A',\n  UnsupportedOpenCloseSettleFlag = 'B',\n  UnsupportedMdImplicitDelete = 'C'\n}\n\n/*\n***********************\n* Reason for deletion *\n***********************\n*/\nexport enum DeleteReason {\n  Cancellation = '0',\n  Error = '1'\n}\n\n/*\n**************************************************\n* Flag that identifies a market data entry       *\n* (Prior to FIX 4.3 this field was of type char) *\n**************************************************\n*/\nexport enum OpenCloseSettlFlag {\n  DailyOpen = '0',\n  SessionOpen = '1',\n  DeliverySettlementEntry = '2',\n  ExpectedEntry = '3',\n  EntryFromPreviousBusinessDay = '4',\n  TheoreticalPriceValue = '5'\n}\n\n/*\n****************************************\n* Identifies a firm\u0019s financial status *\n****************************************\n*/\nexport enum FinancialStatus {\n  Bankrupt = '1',\n  PendingDelisting = '2'\n}\n\n/*\n*******************************************\n* Identifies the type of Corporate Action *\n*******************************************\n*/\nexport enum CorporateAction {\n  ExDividend = 'A',\n  ExDistribution = 'B',\n  ExRights = 'C',\n  New = 'D',\n  ExInterest = 'E'\n}\n\n/*\n******************************************************\n* Identifies the status of the quote acknowledgement *\n******************************************************\n*/\nexport enum QuoteStatus {\n  Accepted = 0,\n  CancelForSymbol = 1,\n  CanceledForSecurityType = 2,\n  CanceledForUnderlying = 3,\n  CanceledAll = 4,\n  Rejected = 5,\n  RemovedFromMarket = 6,\n  Expired = 7,\n  Query = 8,\n  QuoteNotFound = 9,\n  Pending = 10,\n  Pass = 11,\n  LockedMarketWarning = 12,\n  CrossMarketWarning = 13,\n  CanceledDueToLockMarket = 14,\n  CanceledDueToCrossMarket = 15\n}\n\n/*\n****************************************\n* Identifies the type of quote cancel. *\n****************************************\n*/\nexport enum QuoteCancelType {\n  CancelForOneOrMoreSecurities = 1,\n  CancelForSecurityType = 2,\n  CancelForUnderlyingSecurity = 3,\n  CancelAllQuotes = 4\n}\n\n/*\n*****************************\n* Reason Quote was rejected *\n*****************************\n*/\nexport enum QuoteRejectReason {\n  UnknownSymbol = 1,\n  Exchange = 2,\n  QuoteRequestExceedsLimit = 3,\n  TooLateToEnter = 4,\n  UnknownQuote = 5,\n  DuplicateQuote = 6,\n  InvalidBid = 7,\n  InvalidPrice = 8,\n  NotAuthorizedToQuoteSecurity = 9,\n  Other = 99\n}\n\n/*\n****************************************************************\n* Level of Response requested from receiver of quote messages. *\n****************************************************************\n*/\nexport enum QuoteResponseLevel {\n  NoAcknowledgement = 0,\n  AcknowledgeOnlyNegativeOrErroneousQuotes = 1,\n  AcknowledgeEachQuoteMessage = 2\n}\n\n/*\n*******************************************************\n* Indicates the type of Quote Request being generated *\n*******************************************************\n*/\nexport enum QuoteRequestType {\n  Manual = 1,\n  Automatic = 2\n}\n\n/*\n****************************************\n* Type of Security Definition Request. *\n****************************************\n*/\nexport enum SecurityRequestType {\n  RequestSecurityIdentityAndSpecifications = 0,\n  RequestSecurityIdentityForSpecifications = 1,\n  RequestListSecurityTypes = 2,\n  RequestListSecurities = 3\n}\n\n/*\n************************************************\n* Type of Security Definition message response *\n************************************************\n*/\nexport enum SecurityResponseType {\n  AcceptAsIs = 1,\n  AcceptWithRevisions = 2,\n  RejectSecurityProposal = 5,\n  CannotMatchSelectionCriteria = 6\n}\n\n/*\n**************************************************************\n* Indicates whether or not message is being sent as a result *\n* of a subscription request or not.                          *\n**************************************************************\n*/\nexport enum UnsolicitedIndicator {\n  MessageIsBeingSentUnsolicited = 'Y',\n  MessageIsBeingSentAsAResultOfAPriorRequest = 'N'\n}\n\n/*\n***************************************************************\n* Identifies the trading status applicable to the transaction *\n***************************************************************\n*/\nexport enum SecurityTradingStatus {\n  OpeningDelay = 1,\n  TradingHalt = 2,\n  Resume = 3,\n  NoOpen = 4,\n  PriceIndication = 5,\n  TradingRangeIndication = 6,\n  MarketImbalanceBuy = 7,\n  MarketImbalanceSell = 8,\n  MarketOnCloseImbalanceBuy = 9,\n  MarketOnCloseImbalanceSell = 10,\n  NoMarketImbalance = 12,\n  NoMarketOnCloseImbalance = 13,\n  ItsPreOpening = 14,\n  NewPriceIndication = 15,\n  TradeDisseminationTime = 16,\n  ReadyToTrade = 17,\n  NotAvailableForTrading = 18,\n  NotTradedOnThisMarket = 19,\n  UnknownOrInvalid = 20,\n  PreOpen = 21,\n  OpeningRotation = 22,\n  FastMarket = 23\n}\n\n/*\n************************************************************\n* Denotes the reason for the Opening Delay or Trading Halt *\n************************************************************\n*/\nexport enum HaltReason {\n  OrderImbalance = 'I',\n  EquipmentChangeover = 'X',\n  NewsPending = 'P',\n  NewsDissemination = 'D',\n  OrderInflux = 'E',\n  AdditionalInformation = 'M'\n}\n\n/*\n*************************************************************\n* Indicates whether or not the halt was due to Common Stock *\n* trading being halted.                                     *\n*************************************************************\n*/\nexport enum InViewOfCommon {\n  HaltWasDueToCommonStockBeingHalted = 'Y',\n  HaltWasNotRelatedToAHaltOfTheCommonStock = 'N'\n}\n\n/*\n************************************************************\n* Indicates whether or not the halt was due to the Related *\n* Security being halted.                                   *\n************************************************************\n*/\nexport enum DueToRelated {\n  RelatedToSecurityHalt = 'Y',\n  NotRelatedToSecurityHalt = 'N'\n}\n\n/*\n*************************************\n* Identifies the type of adjustment *\n*************************************\n*/\nexport enum Adjustment {\n  Cancel = 1,\n  Error = 2,\n  Correction = 3\n}\n\n/*\n*********************\n* Method of trading *\n*********************\n*/\nexport enum TradSesMethod {\n  Electronic = 1,\n  OpenOutcry = 2,\n  TwoParty = 3\n}\n\n/*\n************************\n* Trading Session Mode *\n************************\n*/\nexport enum TradSesMode {\n  Testing = 1,\n  Simulated = 2,\n  Production = 3\n}\n\n/*\n********************************\n* State of the trading session *\n********************************\n*/\nexport enum TradSesStatus {\n  Unknown = 0,\n  Halted = 1,\n  Open = 2,\n  Closed = 3,\n  PreOpen = 4,\n  PreClose = 5,\n  RequestRejected = 6\n}\n\n/*\n*****************************************************\n* Type of message encoding (non-ASCII (non-English) *\n* characters) used in a message\u0019s \"Encoded\" fields. *\n*****************************************************\n*/\nexport enum MessageEncoding {\n  Iso2022Jp = 'ISO-2022-JP',\n  Eucjp = 'EUC-JP',\n  ShiftJis = 'Shift_JIS',\n  Utf8 = 'UTF-8'\n}\n\n/*\n**************************************************************\n* Code to identify reason for a session-level Reject message *\n**************************************************************\n*/\nexport enum SessionRejectReason {\n  InvalidTagNumber = 0,\n  RequiredTagMissing = 1,\n  TagNotDefinedForThisMessageType = 2,\n  UndefinedTag = 3,\n  TagSpecifiedWithoutAValue = 4,\n  ValueIsIncorrect = 5,\n  IncorrectDataFormatForValue = 6,\n  DecryptionProblem = 7,\n  SignatureProblem = 8,\n  CompIdProblem = 9,\n  SendingTimeAccuracyProblem = 10,\n  InvalidMsgType = 11,\n  XmlValidationError = 12,\n  TagAppearsMoreThanOnce = 13,\n  TagSpecifiedOutOfRequiredOrder = 14,\n  RepeatingGroupFieldsOutOfOrder = 15,\n  IncorrectNumInGroupCountForRepeatingGroup = 16,\n  Non = 17,\n  Other = 99\n}\n\n/*\n*******************************************\n* Identifies the Bid Request message type *\n*******************************************\n*/\nexport enum BidRequestTransType {\n  New = 'N',\n  Cancel = 'C'\n}\n\n/*\n*****************************************************\n* Indicates whether or not the order was solicited. *\n*****************************************************\n*/\nexport enum SolicitedFlag {\n  WasSolicited = 'Y',\n  WasNotSolicited = 'N'\n}\n\n/*\n************************************************************\n* Code to identify reason for an ExecutionRpt message sent *\n* with ExecType=Restated or used when communicating an     *\n* unsolicited cancel.                                      *\n************************************************************\n*/\nexport enum ExecRestatementReason {\n  GtCorporateAction = 0,\n  GtRenewal = 1,\n  VerbalChange = 2,\n  RepricingOfOrder = 3,\n  BrokerOption = 4,\n  PartialDeclineOfOrderQty = 5,\n  CancelOnTradingHalt = 6,\n  CancelOnSystemFailure = 7,\n  Market = 8,\n  Canceled = 9,\n  WarehouseRecap = 10,\n  Other = 99\n}\n\n/*\n*********************************************************\n* Code to identify reason for a Business Message Reject *\n* message                                               *\n*********************************************************\n*/\nexport enum BusinessRejectReason {\n  Other = 0,\n  UnknownId = 1,\n  UnknownSecurity = 2,\n  UnsupportedMessageType = 3,\n  ApplicationNotAvailable = 4,\n  ConditionallyRequiredFieldMissing = 5,\n  NotAuthorized = 6,\n  DeliverToFirmNotAvailableAtThisTime = 7\n}\n\n/*\n*******************************************\n* Specifies the direction of the messsage *\n*******************************************\n*/\nexport enum MsgDirection {\n  Send = 'S',\n  Receive = 'R'\n}\n\n/*\n***************************************************************\n* Code to identify the price a DiscretionOffsetValue (389) is *\n* related to and should be mathematically added to            *\n***************************************************************\n*/\nexport enum DiscretionInst {\n  RelatedToDisplayedPrice = '0',\n  RelatedToMarketPrice = '1',\n  RelatedToPrimaryPrice = '2',\n  RelatedToLocalPrimaryPrice = '3',\n  RelatedToMidpointPrice = '4',\n  RelatedToLastTradePrice = '5',\n  RelatedToVwap = '6'\n}\n\n/*\n********************************************\n* Code to identify the type of Bid Request *\n********************************************\n*/\nexport enum BidType {\n  NonDisclosed = 1,\n  Disclosed = 2,\n  NoBiddingProcess = 3\n}\n\n/*\n****************************************************\n* Code to identify the type of BidDescriptor (400) *\n****************************************************\n*/\nexport enum BidDescriptorType {\n  Sector = 1,\n  Country = 2,\n  Index = 3\n}\n\n/*\n***************************************************************\n* Code to identify which \"SideValue\" the value refers to.     *\n* SideValue and SideValue2 are used as opposed to Buy or Sell *\n* so that the basket can be quoted either way as Buy or Sell. *\n***************************************************************\n*/\nexport enum SideValueInd {\n  SideValue1 = 1,\n  SideValue2 = 2\n}\n\n/*\n****************************************************\n* Code to identify the type of liquidity indicator *\n****************************************************\n*/\nexport enum LiquidityIndType {\n  FiveDayMovingAverage = 1,\n  TwentyDayMovingAverage = 2,\n  NormalMarketSize = 3,\n  Other = 4\n}\n\n/*\n******************************************************\n* Indicates whether or not to exchange for phsyical. *\n******************************************************\n*/\nexport enum ExchangeForPhysical {\n  True = 'Y',\n  False = 'N'\n}\n\n/*\n**************************************************************\n* Code to identify the desired frequency of progress reports *\n**************************************************************\n*/\nexport enum ProgRptReqs {\n  BuySideRequests = 1,\n  SellSideSends = 2,\n  RealTimeExecutionReports = 3\n}\n\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross                                                        *\n****************************************************************\n*/\nexport enum IncTaxInd {\n  Net = 1,\n  Gross = 2\n}\n\n/*\n***************************************\n* Code to represent the type of trade *\n***************************************\n*/\nexport enum BidTradeType {\n  RiskTrade = 'R',\n  VwapGuarantee = 'G',\n  Agency = 'A',\n  GuaranteedClose = 'J'\n}\n\n/*\n******************************************\n* Code to represent the basis price type *\n******************************************\n*/\nexport enum BasisPxType {\n  ClosingPriceAtMorningSession = '2',\n  ClosingPrice = '3',\n  CurrentPrice = '4',\n  Sq = '5',\n  VwapThroughADay = '6',\n  VwapThroughAMorningSession = '7',\n  VwapThroughAnAfternoonSession = '8',\n  VwapThroughADayExcept = '9',\n  VwapThroughAMorningSessionExcept = 'A',\n  VwapThroughAnAfternoonSessionExcept = 'B',\n  Strike = 'C',\n  Open = 'D',\n  Others = 'Z'\n}\n\n/*\n************************************\n* Code to represent the price type *\n************************************\n*/\nexport enum PriceType {\n  Percentage = 1,\n  PerUnit = 2,\n  FixedAmount = 3,\n  Discount = 4,\n  Premium = 5,\n  Spread = 6,\n  TedPrice = 7,\n  TedYield = 8,\n  Yield = 9,\n  FixedCabinetTradePrice = 10,\n  VariableCabinetTradePrice = 11\n}\n\n/*\n********************************************************\n* Code to identify whether to book out executions on a *\n* part-filled GT order on the day of execution or to   *\n* accumulate                                           *\n********************************************************\n*/\nexport enum GTBookingInst {\n  BookOutAllTradesOnDayOfExecution = 0,\n  AccumulateUntilFilledOrExpired = 1,\n  AccumulateUntilVerballlyNotifiedOtherwise = 2\n}\n\n/*\n*************************************\n* Code to represent the status type *\n*************************************\n*/\nexport enum ListStatusType {\n  Ack = 1,\n  Response = 2,\n  Timed = 3,\n  ExecStarted = 4,\n  AllDone = 5,\n  Alert = 6\n}\n\n/*\n****************************************************************\n* Code to represent whether value is net (inclusive of tax) or *\n* gross                                                        *\n****************************************************************\n*/\nexport enum NetGrossInd {\n  Net = 1,\n  Gross = 2\n}\n\n/*\n************************************************\n* Code to represent the status of a list order *\n************************************************\n*/\nexport enum ListOrderStatus {\n  InBiddingProcess = 1,\n  ReceivedForExecution = 2,\n  Executing = 3,\n  Cancelling = 4,\n  Alert = 5,\n  AllDone = 6,\n  Reject = 7\n}\n\n/*\n********************************************\n* Identifies the type of ListExecInst (69) *\n********************************************\n*/\nexport enum ListExecInstType {\n  Immediate = '1',\n  WaitForInstruction = '2',\n  SellDriven = '3',\n  BuyDrivenCashTopUp = '4',\n  BuyDrivenCashWithdraw = '5'\n}\n\n/*\n*************************************************************\n* Identifies the type of request that a Cancel Reject is in *\n* response to                                               *\n*************************************************************\n*/\nexport enum CxlRejResponseTo {\n  OrderCancelRequest = '1',\n  OrderCancel = '2'\n}\n\n/*\n**************************************************************\n* Used to indicate what an Execution Report represents (e.g. *\n* used with multi-leg securities, such as option strategies, *\n* spreads, etc.).                                            *\n**************************************************************\n*/\nexport enum MultiLegReportingType {\n  SingleSecurity = '1',\n  IndividualLegOfAMultiLegSecurity = '2',\n  MultiLegSecurity = '3'\n}\n\n/*\n*************************************************************\n* Identifies class or source of the PartyID (448) value.    *\n* Required if PartyID is specified. Note: applicable values *\n* depend upon PartyRole (452) specified.                    *\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"     *\n*************************************************************\n*/\nexport enum PartyIDSource {\n  KoreanInvestorId = '1',\n  TaiwaneseForeignInvestorId = '2',\n  TaiwaneseTradingAcct = '3',\n  MalaysianCentralDepository = '4',\n  ChineseInvestorId = '5',\n  UkNationalInsuranceOrPensionNumber = '6',\n  UsSocialSecurityNumber = '7',\n  UsEmployerOrTaxIdNumber = '8',\n  AustralianBusinessNumber = '9',\n  Bic = 'B',\n  GeneralIdentifier = 'C',\n  Proprietary = 'D',\n  IsoCountryCode = 'E',\n  SettlementEntityLocation = 'F',\n  Mic = 'G',\n  CsdParticipant = 'H',\n  AustralianTaxFileNumber = 'A',\n  IsitcAcronym = 'I'\n}\n\n/*\n***************************************************************\n* Identifies the type or role of the PartyID (448) specified. *\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"       *\n***************************************************************\n*/\nexport enum PartyRole {\n  ExecutingFirm = 1,\n  BrokerOfCredit = 2,\n  ClientId = 3,\n  ClearingFirm = 4,\n  InvestorId = 5,\n  IntroducingFirm = 6,\n  EnteringFirm = 7,\n  Locate = 8,\n  FundManagerClientId = 9,\n  SettlementLocation = 10,\n  OrderOriginationTrader = 11,\n  ExecutingTrader = 12,\n  OrderOriginationFirm = 13,\n  GiveupClearingFirm = 14,\n  CorrespondantClearingFirm = 15,\n  ExecutingSystem = 16,\n  ContraFirm = 17,\n  ContraClearingFirm = 18,\n  SponsoringFirm = 19,\n  UnderlyingContraFirm = 20,\n  ClearingOrganization = 21,\n  Exchange = 22,\n  CustomerAccount = 24,\n  CorrespondentClearingOrganization = 25,\n  CorrespondentBroker = 26,\n  Buyer = 27,\n  Custodian = 28,\n  Intermediary = 29,\n  Agent = 30,\n  SubCustodian = 31,\n  Beneficiary = 32,\n  InterestedParty = 33,\n  RegulatoryBody = 34,\n  LiquidityProvider = 35,\n  EnteringTrader = 36,\n  ContraTrader = 37,\n  PositionAccount = 38\n}\n\n/*\n************************************************************\n* Indicates the type of product the security is associated *\n* with. See also the CFICode (46) and SecurityType (67)    *\n* fields.                                                  *\n************************************************************\n*/\nexport enum Product {\n  Agency = 1,\n  Commodity = 2,\n  Corporate = 3,\n  Currency = 4,\n  Equity = 5,\n  Government = 6,\n  Index = 7,\n  Loan = 8,\n  Moneymarket = 9,\n  Mortgage = 10,\n  Municipal = 11,\n  Other = 12,\n  Financing = 13\n}\n\n/*\n***************************************************************\n* Indicates whether or not this FIX Session is a \"test\" vs.   *\n* \"production\" connection. Useful for preventing \"accidents\". *\n***************************************************************\n*/\nexport enum TestMessageIndicator {\n  True = 'Y',\n  Fales = 'N'\n}\n\n/*\n****************************************************************\n* Specifies which direction to round For CIV \u0013 indicates       *\n* whether or not the quantity of shares/units is to be rounded *\n* and in which direction where CashOrdQty (52) or (for CIV     *\n* only) OrderPercent (56) are specified on an order.           *\n* The default is for rounding to be at the discretion of the   *\n* executing broker or fund manager.                            *\n* e.g. for an order specifying CashOrdQty or OrderPercent if   *\n* the calculated number of shares/units was 325.76 and         *\n* RoundingModulus (469) was 0 \u0013 \"round down\" would give 320    *\n* units, \"round up\" would give 330 units and \"round to         *\n* nearest\" would give 320 units.                               *\n****************************************************************\n*/\nexport enum RoundingDirection {\n  RoundToNearest = '0',\n  RoundDown = '1',\n  RoundUp = '2'\n}\n\n/*\n***************************************************************\n* A code identifying the payment method for a (fractional)    *\n* distribution.                                               *\n* 13 through 998 are reserved for future use                  *\n* Values above 000 are available for use by private agreement *\n* among counterparties                                        *\n***************************************************************\n*/\nexport enum DistribPaymentMethod {\n  Crest = 1,\n  Nscc = 2,\n  Euroclear = 3,\n  Clearstream = 4,\n  Cheque = 5,\n  TelegraphicTransfer = 6,\n  FedWire = 7,\n  DirectCredit = 8,\n  AchCredit = 9,\n  Bpay = 10,\n  HighValueClearingSystemHvacs = 11,\n  ReinvestInFund = 12\n}\n\n/*\n******************************************************\n* For CIV \u0013 A one character code identifying whether *\n* Cancellation rights/Cooling off period applies     *\n******************************************************\n*/\nexport enum CancellationRights {\n  Yes = 'Y',\n  NoExecutionOnly = 'N',\n  NoWaiverAgreement = 'M',\n  NoInstitutional = 'O'\n}\n\n/*\n************************************************************\n* A one character code identifying Money laundering status *\n************************************************************\n*/\nexport enum MoneyLaunderingStatus {\n  ExemptBelowLimit = '1',\n  ExemptMoneyType = '2',\n  ExemptAuthorised = '3',\n  Passed = 'Y',\n  NotChecked = 'N'\n}\n\n/*\n***************************************************************\n* For CIV - Identifies how the execution price LastPx (3) was *\n* calculated from the fund unit/share price(s) calculated at  *\n* the fund valuation point                                    *\n***************************************************************\n*/\nexport enum ExecPriceType {\n  BidPrice = 'B',\n  CreationPrice = 'C',\n  CreationPricePlusAdjustmentPercent = 'D',\n  CreationPricePlusAdjustmentAmount = 'E',\n  OfferPrice = 'O',\n  OfferPriceMinusAdjustmentPercent = 'P',\n  OfferPriceMinusAdjustmentAmount = 'Q',\n  SinglePrice = 'S'\n}\n\n/*\n***************************************************************\n* A code identifying the Settlement payment method.           *\n* 16 through 998 are reserved for future use                  *\n* Values above 000 are available for use by private agreement *\n* among counterparties                                        *\n***************************************************************\n*/\nexport enum PaymentMethod {\n  Crest = 1,\n  Nscc = 2,\n  Euroclear = 3,\n  Clearstream = 4,\n  Cheque = 5,\n  TelegraphicTransfer = 6,\n  FedWire = 7,\n  DebitCard = 8,\n  DirectDebit = 9,\n  DirectCredit = 10,\n  CreditCard = 11,\n  AchDebit = 12,\n  AchCredit = 13,\n  Bpay = 14,\n  HighValueClearingSystem = 15\n}\n\n/*\n***************************************************************\n* For CIV - a code identifying the type of tax exempt account *\n* in which purchased shares/units are to be held              *\n***************************************************************\n*/\nexport enum TaxAdvantageType {\n  None = 0,\n  MaxiIsa = 1,\n  Tessa = 2,\n  MiniCashIsa = 3,\n  MiniStocksAndSharesIsa = 4,\n  MiniInsuranceIsa = 5,\n  CurrentYearPayment = 6,\n  PriorYearPayment = 7,\n  AssetTransfer = 8,\n  EmployeePriorYear = 9,\n  EmployeeCurrentYear = 10,\n  EmployerPriorYear = 11,\n  EmployerCurrentYear = 12,\n  NonFundPrototypeIra = 13,\n  NonFundQualifiedPlan = 14,\n  DefinedContributionPlan = 15,\n  Ira = 16,\n  IraRollover = 17,\n  Keogh = 18,\n  ProfitSharingPlan = 19,\n  Us401K = 20,\n  SelfDirectedIra = 21,\n  Us403B = 22,\n  Us457 = 23,\n  RothIraPrototype = 24,\n  RothIraNonPrototype = 25,\n  RothConversionIraPrototype = 26,\n  RothConversionIraNonPrototype = 27,\n  EducationIraPrototype = 28,\n  EducationIraNonPrototype = 29\n}\n\n/*\n***********************************************************\n* A one character code identifying whether the Fund based *\n* renewal commission is to be waived.                     *\n***********************************************************\n*/\nexport enum FundRenewWaiv {\n  Yes = 'Y',\n  No = 'N'\n}\n\n/*\n**************************************************************\n* Registration status as returned by the broker or (for CIV) *\n* the fund manager                                           *\n**************************************************************\n*/\nexport enum RegistStatus {\n  Accepted = 'A',\n  Rejected = 'R',\n  Held = 'H',\n  Reminder = 'N'\n}\n\n/*\n**************************************************************\n* Reason(s) why Registration Instructions has been rejected. *\n* The reason may be further amplified in the                 *\n* RegistRejReasonCode field.                                 *\n* Possible values of reason code include:                    *\n**************************************************************\n*/\nexport enum RegistRejReasonCode {\n  InvalidAccountType = 1,\n  InvalidTaxExemptType = 2,\n  InvalidOwnershipType = 3,\n  NoRegDetails = 4,\n  InvalidRegSeqNo = 5,\n  InvalidRegDetails = 6,\n  InvalidMailingDetails = 7,\n  InvalidMailingInstructions = 8,\n  InvalidInvestorId = 9,\n  InvalidInvestorIdSource = 10,\n  InvalidDateOfBirth = 11,\n  InvalidCountry = 12,\n  InvalidDistribInstns = 13,\n  InvalidPercentage = 14,\n  InvalidPaymentMethod = 15,\n  InvalidAccountName = 16,\n  InvalidAgentCode = 17,\n  InvalidAccountNum = 18,\n  Other = 99\n}\n\n/*\n*********************************************************\n* Identifies Registration Instructions transaction type *\n*********************************************************\n*/\nexport enum RegistTransType {\n  New = '0',\n  Replace = '1',\n  Cancel = '2'\n}\n\n/*\n**************************************************\n* The relationship between Registration parties. *\n**************************************************\n*/\nexport enum OwnershipType {\n  JointTrustees = '2',\n  JointInvestors = 'J',\n  TenantsInCommon = 'T'\n}\n\n/*\n**************************************************************\n* Type of ContAmtValue (520).                                *\n* NOTE That Commission Amount / % in Contract Amounts is the *\n* commission actually charged, rather than the commission    *\n* instructions given in Fields 2/3.                          *\n**************************************************************\n*/\nexport enum ContAmtType {\n  CommissionAmount = 1,\n  CommissionPercent = 2,\n  InitialChargeAmount = 3,\n  InitialChargePercent = 4,\n  DiscountAmount = 5,\n  DiscountPercent = 6,\n  DilutionLevyAmount = 7,\n  DilutionLevyPercent = 8,\n  ExitChargeAmount = 9,\n  ExitChargePercent = 10,\n  FundBasedRenewalCommissionPercent = 11,\n  ProjectedFundValue = 12,\n  FundBasedRenewalCommissionOnOrder = 13,\n  FundBasedRenewalCommissionOnFund = 14,\n  NetSettlementAmount = 15\n}\n\n/*\n********************************\n* Identifies the type of owner *\n********************************\n*/\nexport enum OwnerType {\n  IndividualInvestor = 1,\n  PublicCompany = 2,\n  PrivateCompany = 3,\n  IndividualTrustee = 4,\n  CompanyTrustee = 5,\n  PensionPlan = 6,\n  CustodianUnderGiftsToMinorsAct = 7,\n  Trusts = 8,\n  Fiduciaries = 9,\n  NetworkingSubAccount = 10,\n  NonProfitOrganization = 11,\n  CorporateBody = 12,\n  Nominee = 13\n}\n\n/*\n***************************************************************\n* Designates the capacity of the firm placing the order       *\n* (as of FIX 4.3, this field replaced Rule80A (tag 47) --used *\n* in conjunction with OrderRestrictions (529) field)          *\n* (see Volume : \"Glossary\" for value definitions)             *\n***************************************************************\n*/\nexport enum OrderCapacity {\n  Agency = 'A',\n  Proprietary = 'G',\n  Individual = 'I',\n  Principal = 'P',\n  RisklessPrincipal = 'R',\n  AgentForOtherMember = 'W'\n}\n\n/*\n***********************************************************\n* Restrictions associated with an order. If more than one *\n* restriction is applicable to an order, this field can   *\n* contain multiple instructions separated by space.       *\n***********************************************************\n*/\nexport enum OrderRestrictions {\n  ProgramTrade = '1',\n  IndexArbitrage = '2',\n  NonIndexArbitrage = '3',\n  CompetingMarketMaker = '4',\n  ActingAsMarketMakerOrSpecialistInSecurity = '5',\n  ActingAsMarketMakerOrSpecialistInUnderlying = '6',\n  ForeignEntity = '7',\n  ExternalMarketParticipant = '8',\n  ExternalInterConnectedMarketLinkage = '9',\n  RisklessArbitrage = 'A'\n}\n\n/*\n************************************************\n* Specifies scope of Order Mass Cancel Request *\n************************************************\n*/\nexport enum MassCancelRequestType {\n  CancelOrdersForASecurity = '1',\n  CancelOrdersForAnUnderlyingSecurity = '2',\n  CancelOrdersForAProduct = '3',\n  CancelOrdersForAcfiCode = '4',\n  CancelOrdersForASecurityType = '5',\n  CancelOrdersForATradingSession = '6',\n  CancelAllOrders = '7'\n}\n\n/*\n*************************************************************\n* Specifies the action taken by counterparty order handling *\n* system as a result of the Order Mass Cancel Request       *\n*************************************************************\n*/\nexport enum MassCancelResponse {\n  CancelRequestRejected = '0',\n  CancelOrdersForASecurity = '1',\n  CancelOrdersForAnUnderlyingSecurity = '2',\n  CancelOrdersForAProduct = '3',\n  CancelOrdersForAcfiCode = '4',\n  CancelOrdersForASecurityType = '5',\n  CancelOrdersForATradingSession = '6',\n  CancelAllOrders = '7'\n}\n\n/*\n*************************************************\n* Reason Order Mass Cancel Request was rejected *\n*************************************************\n*/\nexport enum MassCancelRejectReason {\n  MassCancelNotSupported = '0',\n  InvalidOrUnknownSecurity = '1',\n  InvalidOrUnkownUnderlyingSecurity = '2',\n  InvalidOrUnknownProduct = '3',\n  InvalidOrUnknownCfiCode = '4',\n  InvalidOrUnknownSecurityType = '5',\n  InvalidOrUnknownTradingSession = '6',\n  Other = '99'\n}\n\n/*\n****************************************************************\n* Identifies the type of quote.                                *\n* An indicative quote is used to inform a counterparty of a    *\n* market. An indicative quote does not result directly in a    *\n* trade.                                                       *\n* A tradeable quote is submitted to a market and will result   *\n* directly in a trade against other orders and quotes in a     *\n* market.                                                      *\n* A restricted tradeable quote is submitted to a market and    *\n* within a certain restriction (possibly based upon price or   *\n* quantity) will automatically trade against orders. Order     *\n* that do not comply with restrictions are sent to the quote   *\n* issuer who can choose to accept or decline the order.        *\n* A counter quote is used in the negotiation model. See Volume *\n* 7 \u0013 Product: Fixed Income for example usage.                 *\n****************************************************************\n*/\nexport enum QuoteType {\n  Indicative = 0,\n  Tradeable = 1,\n  RestrictedTradeable = 2,\n  Counter = 3\n}\n\n/*\n****************************************************************\n* Identifies whether an order is a margin order or a           *\n* non-margin order. This is primarily used when sending orders *\n* to Japanese exchanges to indicate sell margin or buy to      *\n* cover. The same tag could be assigned also by buy-side to    *\n* indicate the intent to sell or buy margin and the sell-side  *\n* to accept or reject (base on some validation criteria) the   *\n* margin request.                                              *\n****************************************************************\n*/\nexport enum CashMargin {\n  Cash = '1',\n  MarginOpen = '2',\n  MarginClose = '3'\n}\n\n/*\n***************************************\n* Defines the scope of a data element *\n***************************************\n*/\nexport enum Scope {\n  LocalMarket = '1',\n  National = '2',\n  Global = '3'\n}\n\n/*\n************************************************************\n* Defines how a server handles distribution of a truncated *\n* book. Defaults to broker option.                         *\n************************************************************\n*/\nexport enum MDImplicitDelete {\n  Yes = 'Y',\n  No = 'N'\n}\n\n/*\n*********************************************\n* Type of cross being submitted to a market *\n*********************************************\n*/\nexport enum CrossType {\n  CrossAon = 1,\n  CrossIoc = 2,\n  CrossOneSide = 3,\n  CrossSamePrice = 4\n}\n\n/*\n**************************************************************\n* Indicates if one side or the other of a cross order should *\n* be prioritized.                                            *\n* The definition of prioritization is left to the market. In *\n* some markets prioritization means which side of the cross  *\n* order is applied to the market first. In other markets \u0013   *\n* prioritization may mean that the prioritized side is fully *\n* executed (sometimes referred to as the side being          *\n* protected).                                                *\n**************************************************************\n*/\nexport enum CrossPrioritization {\n  None = 0,\n  BuySideIsPrioritized = 1,\n  SellSideIsPrioritized = 2\n}\n\n/*\n*********************************************\n* Number of Side repeating group instances. *\n*********************************************\n*/\nexport enum NoSides {\n  OneSide = 1,\n  BothSides = 2\n}\n\n/*\n*********************************************************\n* Identifies the type/criteria of Security List Request *\n*********************************************************\n*/\nexport enum SecurityListRequestType {\n  Symbol = 0,\n  SecurityTypeAnd = 1,\n  Product = 2,\n  TradingSessionId = 3,\n  AllSecurities = 4\n}\n\n/*\n******************************************************\n* The results returned to a Security Request message *\n******************************************************\n*/\nexport enum SecurityRequestResult {\n  ValidRequest = 0,\n  InvalidOrUnsupportedRequest = 1,\n  NoInstrumentsFound = 2,\n  NotAuthorizedToRetrieveInstrumentData = 3,\n  InstrumentDataTemporarilyUnavailable = 4,\n  RequestForInstrumentDataNotSupported = 5\n}\n\n/*\n************************************************************\n* Indicates the method of execution reporting requested by *\n* issuer of the order                                      *\n************************************************************\n*/\nexport enum MultiLegRptTypeReq {\n  ReportByMulitlegSecurityOnly = 0,\n  ReportByMultilegSecurityAndInstrumentLegs = 1,\n  ReportByInstrumentLegsOnly = 2\n}\n\n/*\n*************************************************************\n* Indicates the reason a Trading Session Status Request was *\n* rejected                                                  *\n*************************************************************\n*/\nexport enum TradSesStatusRejReason {\n  UnknownOrInvalidTradingSessionId = 1,\n  Other = 99\n}\n\n/*\n********************************\n* Type of Trade Capture Report *\n********************************\n*/\nexport enum TradeRequestType {\n  AllTrades = 0,\n  MatchedTradesMatchingCriteria = 1,\n  UnmatchedTradesThatMatchCriteria = 2,\n  UnreportedTradesThatMatchCriteria = 3,\n  AdvisoriesThatMatchCriteria = 4\n}\n\n/*\n********************************************************\n* Indicates if the trade capture report was previously *\n* reported to the counterparty                         *\n********************************************************\n*/\nexport enum PreviouslyReported {\n  PerviouslyReportedToCounterparty = 'Y',\n  NotReportedToCounterparty = 'N'\n}\n\n/*\n********************************************************\n* The status of this trade with respect to matching or *\n* comparison                                           *\n********************************************************\n*/\nexport enum MatchStatus {\n  Compared = '0',\n  Uncompared = '1',\n  AdvisoryOrAlert = '2'\n}\n\n/*\n*************************************************************\n* The point in the matching process at which this trade was *\n* matched                                                   *\n*************************************************************\n*/\nexport enum MatchType {\n  ExactMatchPlus4BadgesExecTime = 'A1',\n  ExactMatchPlus4Badges = 'A2',\n  ExactMatchPlus2BadgesExecTime = 'A3',\n  ExactMatchPlus2Badges = 'A4',\n  ExactMatchPlusExecTime = 'A5',\n  StampedAdvisoriesOrSpecialistAccepts = 'AQ',\n  A1ExactMatchSummarizedQuantity = 'S1',\n  A2ExactMatchSummarizedQuantity = 'S2',\n  A3ExactMatchSummarizedQuantity = 'S3',\n  A4ExactMatchSummarizedQuantity = 'S4',\n  A5ExactMatchSummarizedQuantity = 'S5',\n  ExactMatchMinusBadgesTimes = 'M1',\n  SummarizedMatchMinusBadgesTimes = 'M2',\n  OcsLockedIn = 'MT',\n  ActAcceptedTrade = 'M3',\n  ActDefaultTrade = 'M4',\n  ActDefaultAfterM2 = 'M5',\n  Actm6Match = 'M6'\n}\n\n/*\n*********************************************\n* This trade is to be treated as an odd lot *\n*********************************************\n*/\nexport enum OddLot {\n  TreatAsOddLot = 'Y',\n  TreatAsRoundLot = 'N'\n}\n\n/*\n******************************************************\n* Eligibility of this trade for clearing and central *\n* counterparty processing                            *\n******************************************************\n*/\nexport enum ClearingInstruction {\n  ProcessNormally = 0,\n  ExcludeFromAllNetting = 1,\n  BilateralNettingOnly = 2,\n  ExClearing = 3,\n  SpecialTrade = 4,\n  MultilateralNetting = 5,\n  ClearAgainstCentralCounterparty = 6,\n  ExcludeFromCentralCounterparty = 7,\n  ManualMode = 8,\n  AutomaticPostingMode = 9,\n  AutomaticGiveUpMode = 10,\n  QualifiedServiceRepresentativeQsr = 11,\n  CustomerTrade = 12,\n  SelfClearing = 13\n}\n\n/*\n********************************************\n* Type of account associated with an order *\n********************************************\n*/\nexport enum AccountType {\n  CarriedCustomerSide = 1,\n  CarriedNonCustomerSide = 2,\n  HouseTrader = 3,\n  FloorTrader = 4,\n  CarriedNonCustomerSideCrossMargined = 6,\n  HouseTraderCrossMargined = 7,\n  JointBackOfficeAccount = 8\n}\n\n/*\n***************************************************************\n* Capacity of customer placing the order                      *\n* Primarily used by futures exchanges to indicate the CTICode *\n* (customer type indicator) as required by the US CFTC        *\n* (Commodity Futures Trading Commission).                     *\n***************************************************************\n*/\nexport enum CustOrderCapacity {\n  MemberTradingForTheirOwnAccount = 1,\n  ClearingFirmTradingForItsProprietaryAccount = 2,\n  MemberTradingForAnotherMember = 3,\n  AllOther = 4\n}\n\n/*\n****************************\n* Mass Status Request Type *\n****************************\n*/\nexport enum MassStatusReqType {\n  StatusForOrdersForASecurity = 1,\n  StatusForOrdersForAnUnderlyingSecurity = 2,\n  StatusForOrdersForAProduct = 3,\n  StatusForOrdersForAcfiCode = 4,\n  StatusForOrdersForASecurityType = 5,\n  StatusForOrdersForATradingSession = 6,\n  StatusForAllOrders = 7,\n  StatusForOrdersForAPartyId = 8\n}\n\n/*\n*********************************************************\n* Indicates whether or not automatic booking can occur. *\n*********************************************************\n*/\nexport enum DayBookingInst {\n  Auto = '0',\n  SpeakWithOrderInitiatorBeforeBooking = '1',\n  Accumulate = '2'\n}\n\n/*\n***********************************************\n* Indicates what constitutes a bookable unit. *\n***********************************************\n*/\nexport enum BookingUnit {\n  EachPartialExecutionIsABookableUnit = '0',\n  AggregatePartialExecutionsOnThisOrder = '1',\n  AggregateExecutionsForThisSymbol = '2'\n}\n\n/*\n******************************************\n* Indicates the method of preallocation. *\n******************************************\n*/\nexport enum PreallocMethod {\n  ProRata = '0',\n  DoNotProRata = '1'\n}\n\n/*\n***********************************************************\n* Describes the specific type or purpose of an Allocation *\n* message (i.e. \"Buyside Calculated\")                     *\n***********************************************************\n*/\nexport enum AllocType {\n  Calculated = 1,\n  Preliminary = 2,\n  ReadyToBook = 5,\n  WarehouseInstruction = 7,\n  RequestToIntermediary = 8\n}\n\n/*\n************************************************************\n* Indicates type of fee being assessed of the customer for *\n* trade executions at an exchange. Applicable for futures  *\n* markets only at this time.                               *\n* (Values source CBOT, CME, NYBOT, and NYMEX):             *\n************************************************************\n*/\nexport enum ClearingFeeIndicator {\n  FirstYearDelegate = '1',\n  SecondYearDelegate = '2',\n  ThirdYearDelegate = '3',\n  FourthYearDelegate = '4',\n  FifthYearDelegate = '5',\n  SixthYearDelegate = '9',\n  CboeMember = 'B',\n  NonMemberAndCustomer = 'C',\n  EquityMemberAndClearingMember = 'E',\n  FullAndAssociateMember = 'F',\n  Firms106HAnd106J = 'H',\n  Gim = 'I',\n  Lessee106FEmployees = 'L',\n  AllOtherOwnershipTypes = 'M'\n}\n\n/*\n****************************************************************\n* Indicates if the order is currently being worked. Applicable *\n* only for OrdStatus = \"New\". For open outcry markets this     *\n* indicates that the order is being worked in the crowd. For   *\n* electronic markets it indicates that the order has           *\n* transitioned from a contingent order to a market order.      *\n****************************************************************\n*/\nexport enum WorkingIndicator {\n  Working = 'Y',\n  NotWorking = 'N'\n}\n\n/*\n*************************************************************\n* Indicates if a Cancel/Replace has caused an order to lose *\n* book priority                                             *\n*************************************************************\n*/\nexport enum PriorityIndicator {\n  PriorityUnchanged = 0,\n  LostPriorityAsResultOfOrderChange = 1\n}\n\n/*\n************************************************************\n* Indicates that this message is to serve as the final and *\n* legal confirmation.                                      *\n************************************************************\n*/\nexport enum LegalConfirm {\n  LegalConfirm = 'Y',\n  DoesNotConsituteALegalConfirm = 'N'\n}\n\n/*\n******************************\n* Reason Quote was rejected: *\n******************************\n*/\nexport enum QuoteRequestRejectReason {\n  UnknownSymbol = 1,\n  Exchange = 2,\n  QuoteRequestExceedsLimit = 3,\n  TooLateToEnter = 4,\n  InvalidPrice = 5,\n  NotAuthorizedToRequestQuote = 6,\n  NoMatchForInquiry = 7,\n  NoMarketForInstrument = 8,\n  NoInventory = 9,\n  Pass = 10,\n  Other = 99\n}\n\n/*\n****************************************************************\n* Used to identify the source of the Account (1) code. This is *\n* especially useful if the account is a new account that the   *\n* Respondent may not have setup yet in their system.           *\n****************************************************************\n*/\nexport enum AcctIDSource {\n  Bic = 1,\n  SidCode = 2,\n  Tfm = 3,\n  Omgeo = 4,\n  DtccCode = 5,\n  Other = 99\n}\n\n/*\n**********************************************\n* Identifies the status of the Confirmation. *\n**********************************************\n*/\nexport enum ConfirmStatus {\n  Received = 1,\n  MismatchedAccount = 2,\n  MissingSettlementInstructions = 3,\n  Confirmed = 4,\n  RequestRejected = 5\n}\n\n/*\n************************************************\n* Identifies the Confirmation transaction type *\n************************************************\n*/\nexport enum ConfirmTransType {\n  New = 0,\n  Replace = 1,\n  Cancel = 2\n}\n\n/*\n***********************************\n* Identifies the form of delivery *\n***********************************\n*/\nexport enum DeliveryForm {\n  BookEntry = 1,\n  Bearer = 2\n}\n\n/*\n**************************************************************\n* For Fixed Income, used instead of LegQty (687) or          *\n* LegOrderQty (685) to requests the respondent to calculate  *\n* the quantity based on the quantity on the opposite side of *\n* the swap.                                                  *\n**************************************************************\n*/\nexport enum LegSwapType {\n  ParForPar = 1,\n  ModifiedDuration = 2,\n  Risk = 4,\n  Proceeds = 5\n}\n\n/*\n***************************************************\n* Code to represent price type requested in Quote *\n***************************************************\n*/\nexport enum QuotePriceType {\n  Percent = 1,\n  PerShare = 2,\n  FixedAmount = 3,\n  Discount = 4,\n  Premium = 5,\n  Spread = 6,\n  TedPrice = 7,\n  TedYield = 8,\n  YieldSpread = 9,\n  Yield = 10\n}\n\n/*\n*****************************************\n* Identifies the type of Quote Response *\n*****************************************\n*/\nexport enum QuoteRespType {\n  Hit = 1,\n  Counter = 2,\n  Expired = 3,\n  Cover = 4,\n  DoneAway = 5,\n  Pass = 6\n}\n\n/*\n****************************************************************\n* Used to identify the type of quantity that is being returned *\n****************************************************************\n*/\nexport enum PosType {\n  TransactionQuantity = 'TQ',\n  IntraSpreadQty = 'IAS',\n  InterSpreadQty = 'IES',\n  EndOfDayQty = 'FIN',\n  StartOfDayQty = 'SOD',\n  OptionExerciseQty = 'EX',\n  OptionAssignment = 'AS',\n  TransactionFromExercise = 'TX',\n  TransactionFromAssignment = 'TA',\n  PitTradeQty = 'PIT',\n  TransferTradeQty = 'TRF',\n  ElectronicTradeQty = 'ETR',\n  AllocationTradeQty = 'ALC',\n  AdjustmentQty = 'PA',\n  AsOfTradeQty = 'ASF',\n  DeliveryQty = 'DLV',\n  TotalTransactionQty = 'TOT',\n  CrossMarginQty = 'XM',\n  IntegralSplit = 'SPL'\n}\n\n/*\n***************************\n* Status of this position *\n***************************\n*/\nexport enum PosQtyStatus {\n  Submitted = 0,\n  Accepted = 1,\n  Rejected = 2\n}\n\n/*\n***************************\n* Type of Position amount *\n***************************\n*/\nexport enum PosAmtType {\n  FinalMarkToMarketAmount = 'FMTM',\n  IncrementalMarkToMarketAmount = 'IMTM',\n  TradeVariationAmount = 'TVAR',\n  StartOfDayMarkToMarketAmount = 'SMTM',\n  PremiumAmount = 'PREM',\n  CashResidualAmount = 'CRES',\n  CashAmount = 'CASH',\n  ValueAdjustedAmount = 'VADJ'\n}\n\n/*\n***********************************************\n* Identifies the type of position transaction *\n***********************************************\n*/\nexport enum PosTransType {\n  Exercise = 1,\n  DoNotExercise = 2,\n  PositionAdjustment = 3,\n  PositionChangeSubmission = 4,\n  Pledge = 5\n}\n\n/*\n**************************************\n* Maintenance Action to be performed *\n**************************************\n*/\nexport enum PosMaintAction {\n  New = 1,\n  Replace = 2,\n  Cancel = 3\n}\n\n/*\n********************************************\n* Identifies a specific settlement session *\n********************************************\n*/\nexport enum SettlSessID {\n  Intraday = 'ITD',\n  RegularTradingHours = 'RTH',\n  ElectronicTradingHours = 'ETH'\n}\n\n/*\n********************************************************\n* Type of adjustment to be applied, used for PCS & PAJ *\n********************************************************\n*/\nexport enum AdjustmentType {\n  ProcessRequestAsMarginDisposition = 0,\n  DeltaPlus = 1,\n  DeltaMinus = 2,\n  Final = 3\n}\n\n/*\n******************************************\n* Status of Position Maintenance Request *\n******************************************\n*/\nexport enum PosMaintStatus {\n  Accepted = 0,\n  AcceptedWithWarnings = 1,\n  Rejected = 2,\n  Completed = 3,\n  CompletedWithWarnings = 4\n}\n\n/*\n*******************************************\n* Result of Position Maintenance Request. *\n*******************************************\n*/\nexport enum PosMaintResult {\n  SuccessfulCompletion = 0,\n  Rejected = 1,\n  Other = 99\n}\n\n/*\n*************************************************************\n* Unique identifier for the position maintenance request as *\n* assigned by the submitter                                 *\n*************************************************************\n*/\nexport enum PosReqType {\n  Positions = 0,\n  Trades = 1,\n  Exercises = 2,\n  Assignments = 3\n}\n\n/*\n********************************************************\n* Identifies how the response to the request should be *\n* transmitted                                          *\n********************************************************\n*/\nexport enum ResponseTransportType {\n  Inband = 0,\n  OutOfBand = 1\n}\n\n/*\n*************************************************************\n* Result of Request for Position                            *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\nexport enum PosReqResult {\n  ValidRequest = 0,\n  InvalidOrUnsupportedRequest = 1,\n  NoPositionsFoundThatMatchCriteria = 2,\n  NotAuthorizedToRequestPositions = 3,\n  RequestForPositionNotSupported = 4,\n  Other = 99\n}\n\n/*\n***********************************\n* Status of Request for Positions *\n***********************************\n*/\nexport enum PosReqStatus {\n  Completed = 0,\n  CompletedWithWarnings = 1,\n  Rejected = 2\n}\n\n/*\n****************************\n* Type of settlement price *\n****************************\n*/\nexport enum SettlPriceType {\n  Final = 1,\n  Theoretical = 2\n}\n\n/*\n***********************************************\n* Method under which assignment was conducted *\n***********************************************\n*/\nexport enum AssignmentMethod {\n  Random = 'R',\n  ProRata = 'P'\n}\n\n/*\n****************************************************\n* Exercise Method used to in performing assignment *\n****************************************************\n*/\nexport enum ExerciseMethod {\n  Automatic = 'A',\n  Manual = 'M'\n}\n\n/*\n*************************************************************\n* Result of Trade Request                                   *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\nexport enum TradeRequestResult {\n  Successful = 0,\n  InvalidOrUnknownInstrument = 1,\n  InvalidTypeOfTradeRequested = 2,\n  InvalidParties = 3,\n  InvalidTransportTypeRequested = 4,\n  InvalidDestinationRequested = 5,\n  TradeRequestTypeNotSupported = 8,\n  NotAuthorized = 9,\n  Other = 99\n}\n\n/*\n****************************\n* Status of Trade Request. *\n****************************\n*/\nexport enum TradeRequestStatus {\n  Accepted = 0,\n  Completed = 1,\n  Rejected = 2\n}\n\n/*\n*************************************************************\n* Reason Trade Capture Request was rejected.                *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\nexport enum TradeReportRejectReason {\n  Successful = 0,\n  InvalidPartyOnformation = 1,\n  UnknownInstrument = 2,\n  UnauthorizedToReportTrades = 3,\n  InvalidTradeType = 4,\n  Other = 99\n}\n\n/*\n****************************************************************\n* Used to indicate if the side being reported on Trade Capture *\n* Report represents a leg of a multileg instrument or a single *\n* security                                                     *\n****************************************************************\n*/\nexport enum SideMultiLegReportingType {\n  SingleSecurity = 1,\n  IndividualLegOfAMultilegSecurity = 2,\n  MultilegSecurity = 3\n}\n\n/*\n************************************************************\n* Traded / Regulatory timestamp type                       *\n* Note of Applicability: values are required in US futures *\n* markets by the CFTC to support computerized trade        *\n* reconstruction.                                          *\n* (see Volume : \"Glossary\" for value definitions)          *\n************************************************************\n*/\nexport enum TrdRegTimestampType {\n  ExecutionTime = 1,\n  TimeIn = 2,\n  TimeOut = 3,\n  BrokerReceipt = 4,\n  BrokerExecution = 5\n}\n\n/*\n**********************************************************\n* Identifies the type of Confirmation message being sent *\n**********************************************************\n*/\nexport enum ConfirmType {\n  Status = 1,\n  Confirmation = 2,\n  ConfirmationRequestRejected = 3\n}\n\n/*\n******************************************************\n* Identifies the reason for rejecting a Confirmation *\n******************************************************\n*/\nexport enum ConfirmRejReason {\n  MismatchedAccount = 1,\n  MissingSettlementInstructions = 2,\n  Other = 99\n}\n\n/*\n**************************************************************\n* Method for booking out this order. Used when notifying a   *\n* broker that an order to be settled by that broker is to be *\n* booked out as an OTC derivative (e.g. CFD or similar).     *\n**************************************************************\n*/\nexport enum BookingType {\n  RegularBooking = 0,\n  Cfd = 1,\n  TotalReturnSwap = 2\n}\n\n/*\n**************************************************************\n* Used to indicate whether settlement instructions are       *\n* provided on an allocation instruction message, and if not, *\n* how they are to be derived                                 *\n**************************************************************\n*/\nexport enum AllocSettlInstType {\n  UseDefaultInstructions = 0,\n  DeriveFromParametersProvided = 1,\n  FullDetailsProvided = 2,\n  SsidbiDsProvided = 3,\n  PhoneForInstructions = 4\n}\n\n/*\n***************************************************************\n* Used to indicate whether a delivery instruction is used for *\n* securities or cash settlement                               *\n***************************************************************\n*/\nexport enum DlvyInstType {\n  Securities = 'S',\n  Cash = 'C'\n}\n\n/*\n*********************************\n* Type of financing termination *\n*********************************\n*/\nexport enum TerminationType {\n  Overnight = 1,\n  Term = 2,\n  Flexible = 3,\n  Open = 4\n}\n\n/*\n****************************************************************\n* Identifies reason for rejection (of a settlement instruction *\n* request message)                                             *\n****************************************************************\n*/\nexport enum SettlInstReqRejCode {\n  UnableToProcessRequest = 0,\n  UnknownAccount = 1,\n  NoMatchingSettlementInstructionsFound = 2,\n  Other = 99\n}\n\n/*\n***********************************************************\n* Describes the specific type or purpose of an Allocation *\n* Report message                                          *\n***********************************************************\n*/\nexport enum AllocReportType {\n  SellsideCalculatedUsingPreliminary = 3,\n  SellsideCalculatedWithoutPreliminary = 4,\n  WarehouseRecap = 5,\n  RequestToIntermediary = 8\n}\n\n/*\n****************************************************************\n* Reason for cancelling or replacing an Allocation Instruction *\n* or Allocation Report message                                 *\n****************************************************************\n*/\nexport enum AllocCancReplaceReason {\n  OriginalDetailsIncomplete = 1,\n  ChangeInUnderlyingOrderDetails = 2,\n  Other = 99\n}\n\n/*\n***********************************************************\n* Type of account associated with a confirmation or other *\n* trade-level message                                     *\n***********************************************************\n*/\nexport enum AllocAccountType {\n  CarriedCustomerSide = 1,\n  CarriedNonCustomerSide = 2,\n  HouseTrader = 3,\n  FloorTrader = 4,\n  CarriedNonCustomerSideCrossMargined = 6,\n  HouseTraderCrossMargined = 7,\n  JointBackOfficeAccount = 8\n}\n\n/*\n***************************************************************\n* Type of PartySubID (523) value                              *\n* 4000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\nexport enum PartySubIDType {\n  Firm = 1,\n  Person = 2,\n  System = 3,\n  Application = 4,\n  FullLegalNameOfFirm = 5,\n  PostalAddress = 6,\n  PhoneNumber = 7,\n  EmailAddress = 8,\n  ContactName = 9,\n  SecuritiesAccountNumber = 10,\n  RegistrationNumber = 11,\n  RegisteredAddressForConfirmation = 12,\n  RegulatoryStatus = 13,\n  RegistrationName = 14,\n  CashAccountNumber = 15,\n  Bic = 16,\n  CsdParticipantMemberCode = 17,\n  RegisteredAddress = 18,\n  FundAccountName = 19,\n  TelexNumber = 20,\n  FaxNumber = 21,\n  SecuritiesAccountName = 22,\n  CashAccountName = 23,\n  Department = 24,\n  LocationDesk = 25,\n  PositionAccountType = 26\n}\n\n/*\n***************************************************************\n* Response to allocation to be communicated to a counterparty *\n* through an intermediary, i.e. clearing house. Used in       *\n* conjunction with AllocType = \"Request to Intermediary\" and  *\n* AllocReportType = \"Request to Intermediary\"                 *\n***************************************************************\n*/\nexport enum AllocIntermedReqType {\n  PendingAccept = 1,\n  PendingRelease = 2,\n  PendingReversal = 3,\n  Accept = 4,\n  BlockLevelReject = 5,\n  AccountLevelReject = 6\n}\n\n/*\n**************************************************************\n* Resolution taken when ApplQueueDepth (813) exceeds         *\n* ApplQueueMax (812) or system specified maximum queue size. *\n**************************************************************\n*/\nexport enum ApplQueueResolution {\n  NoActionTaken = 0,\n  QueueFlushed = 1,\n  OverlayLast = 2,\n  EndSession = 3\n}\n\n/*\n**********************************************************\n* Action to take to resolve an application message queue *\n* (backlog).                                             *\n**********************************************************\n*/\nexport enum ApplQueueAction {\n  NoActionTaken = 0,\n  QueueFlushed = 1,\n  OverlayLast = 2,\n  EndSession = 3\n}\n\n/*\n*****************************\n* Average Pricing Indicator *\n*****************************\n*/\nexport enum AvgPxIndicator {\n  NoAveragePricing = 0,\n  Trade = 1,\n  LastTrade = 2\n}\n\n/*\n***********************************************\n* Identifies how the trade is to be allocated *\n***********************************************\n*/\nexport enum TradeAllocIndicator {\n  AllocationNotRequired = 0,\n  AllocationRequired = 1,\n  UseAllocationProvidedWithTheTrade = 2\n}\n\n/*\n**************************************************************\n* Part of trading cycle when an instrument expires. Field is *\n* applicable for derivatives.                                *\n**************************************************************\n*/\nexport enum ExpirationCycle {\n  ExpireOnTradingSessionClose = 0,\n  ExpireOnTradingSessionOpen = 1\n}\n\n/*\n*****************\n* Type of Trade *\n*****************\n*/\nexport enum TrdType {\n  RegularTrade = 0,\n  BlockTrade = 1,\n  Efp = 2,\n  Transfer = 3,\n  LateTrade = 4,\n  TTrade = 5,\n  WeightedAveragePriceTrade = 6,\n  BunchedTrade = 7,\n  LateBunchedTrade = 8,\n  PriorReferencePriceTrade = 9,\n  AfterHoursTrade = 10\n}\n\n/*\n*********************************************\n* Describes whether peg is static or floats *\n*********************************************\n*/\nexport enum PegMoveType {\n  Floating = 0,\n  Fixed = 1\n}\n\n/*\n****************************\n* Type of Peg Offset value *\n****************************\n*/\nexport enum PegOffsetType {\n  Price = 0,\n  BasisPoints = 1,\n  Ticks = 2,\n  PriceTier = 3\n}\n\n/*\n*********************\n* Type of Peg Limit *\n*********************\n*/\nexport enum PegLimitType {\n  OrBetter = 0,\n  Strict = 1,\n  OrWorse = 2\n}\n\n/*\n***********************************************************\n* If the calculated peg price is not a valid tick price,  *\n* specifies whether to round the price to be more or less *\n* aggressive                                              *\n***********************************************************\n*/\nexport enum PegRoundDirection {\n  MoreAggressive = 1,\n  MorePassive = 2\n}\n\n/*\n************************\n* The scope of the peg *\n************************\n*/\nexport enum PegScope {\n  Local = 1,\n  National = 2,\n  Global = 3,\n  NationalExcludingLocal = 4\n}\n\n/*\n************************************************************\n* Describes whether discretionay price is static or floats *\n************************************************************\n*/\nexport enum DiscretionMoveType {\n  Floating = 0,\n  Fixed = 1\n}\n\n/*\n***********************************\n* Type of Discretion Offset value *\n***********************************\n*/\nexport enum DiscretionOffsetType {\n  Price = 0,\n  BasisPoints = 1,\n  Ticks = 2,\n  PriceTier = 3\n}\n\n/*\n****************************\n* Type of Discretion Limit *\n****************************\n*/\nexport enum DiscretionLimitType {\n  OrBetter = 0,\n  Strict = 1,\n  OrWorse = 2\n}\n\n/*\n*************************************************************\n* If the calculated discretionary price is not a valid tick *\n* price, specifies whether to round the price to be more or *\n* less aggressive                                           *\n*************************************************************\n*/\nexport enum DiscretionRoundDirection {\n  MoreAggressive = 1,\n  MorePassive = 2\n}\n\n/*\n*******************************\n* The scope of the discretion *\n*******************************\n*/\nexport enum DiscretionScope {\n  Local = 1,\n  National = 2,\n  Global = 3,\n  NationalExcludingLocal = 4\n}\n\n/*\n***************************************************************\n* The target strategy of the order                            *\n* 1000+ = Reserved and available for bi-laterally agreed upon *\n* user defined values                                         *\n***************************************************************\n*/\nexport enum TargetStrategy {\n  Vwap = 1,\n  Participate = 2,\n  MininizeMarketImpact = 3\n}\n\n/*\n**************************************************************\n* Indicator to identify whether this fill was a result of a  *\n* liquidity provider providing or liquidity taker taking the *\n* liquidity. Applicable only for OrdStatus of Partial or     *\n* Filled.                                                    *\n**************************************************************\n*/\nexport enum LastLiquidityInd {\n  AddedLiquidity = 1,\n  RemovedLiquidity = 2,\n  LiquidityRoutedOut = 3\n}\n\n/*\n********************************************************\n* Indicates if a trade should be reported via a market *\n* reporting service.                                   *\n********************************************************\n*/\nexport enum PublishTrdIndicator {\n  ReportTrade = 'Y',\n  DoNotReportTrade = 'N'\n}\n\n/*\n*************************\n* Reason for short sale *\n*************************\n*/\nexport enum ShortSaleReason {\n  DealerSoldShort = 0,\n  DealerSoldShortExempt = 1,\n  SellingCustomerSoldShort = 2,\n  SellingCustomerSoldShortExempt = 3,\n  QualifiedServiceRepresentative = 4,\n  QsrOrAguContraSideSoldShortExempt = 5\n}\n\n/*\n**************************************************\n* Type of quantity specified in a quantity field *\n**************************************************\n*/\nexport enum QtyType {\n  Units = 0,\n  Contracts = 1\n}\n\n/*\n************************\n* Type of Trade Report *\n************************\n*/\nexport enum TradeReportType {\n  Submit = 0,\n  Alleged = 1,\n  Accept = 2,\n  Decline = 3,\n  Addendum = 4,\n  No = 5,\n  TradeReportCancel = 6,\n  LockedIn = 7\n}\n\n/*\n*************************************************************\n* Indicates how the orders being booked and allocated by an *\n* Allocation Instruction or Allocation Report message are   *\n* identified, i.e. by explicit definition in the NoOrders   *\n* group or not.                                             *\n*************************************************************\n*/\nexport enum AllocNoOrdersType {\n  NotSpecified = 0,\n  ExplicitListProvided = 1\n}\n\n/*\n***************************************\n* Code to represent the type of event *\n***************************************\n*/\nexport enum EventType {\n  Put = 1,\n  Call = 2,\n  Tender = 3,\n  SinkingFundCall = 4,\n  Other = 99\n}\n\n/*\n******************************************************\n* Code to represent the type of instrument attribute *\n******************************************************\n*/\nexport enum InstrAttribType {\n  Flat = 1,\n  ZeroCoupon = 2,\n  InterestBearing = 3,\n  NoPeriodicPayments = 4,\n  VariableRate = 5,\n  LessFeeForPut = 6,\n  SteppedCoupon = 7,\n  CouponPeriod = 8,\n  When = 9,\n  OriginalIssueDiscount = 10,\n  Callable = 11,\n  EscrowedToMaturity = 12,\n  EscrowedToRedemptionDate = 13,\n  PreRefunded = 14,\n  InDefault = 15,\n  Unrated = 16,\n  Taxable = 17,\n  Indexed = 18,\n  SubjectToAlternativeMinimumTax = 19,\n  OriginalIssueDiscountPrice = 20,\n  CallableBelowMaturityValue = 21,\n  CallableWithoutNotice = 22,\n  Text = 99\n}\n\n/*\n********************************************************\n* The program under which a commercial paper is issued *\n********************************************************\n*/\nexport enum CPProgram {\n  Program3A3 = 1,\n  Program42 = 2,\n  Other = 99\n}\n\n/*\n*********************************************\n* Defines the unit for a miscellaneous fee. *\n*********************************************\n*/\nexport enum MiscFeeBasis {\n  Absolute = 0,\n  PerUnit = 1,\n  Percentage = 2\n}\n\n/*\n****************************************************************\n* Indicates whether this message is the last in a sequence of  *\n* messages for those messages that support fragmentation, such *\n* as Allocation Instruction, Mass Quote, Security List,        *\n* Derivative Security List                                     *\n****************************************************************\n*/\nexport enum LastFragment {\n  LastMessage = 'Y',\n  NotLastMessage = 'N'\n}\n\n/*\n************************************\n* Reason for Collateral Assignment *\n************************************\n*/\nexport enum CollAsgnReason {\n  Initial = 0,\n  Scheduled = 1,\n  TimeWarning = 2,\n  MarginDeficiency = 3,\n  MarginExcess = 4,\n  ForwardCollateralDemand = 5,\n  EventOfDefault = 6,\n  AdverseTaxEvent = 7\n}\n\n/*\n**********************************\n* Collateral inquiry qualifiers: *\n**********************************\n*/\nexport enum CollInquiryQualifier {\n  TradeDate = 0,\n  GcInstrument = 1,\n  CollateralInstrument = 2,\n  SubstitutionEligible = 3,\n  NotAssigned = 4,\n  PartiallyAssigned = 5,\n  FullyAssigned = 6,\n  OutstandingTrades = 7\n}\n\n/*\n******************************************\n* Collateral Assignment Transaction Type *\n******************************************\n*/\nexport enum CollAsgnTransType {\n  New = 0,\n  Replace = 1,\n  Cancel = 2,\n  Release = 3,\n  Reverse = 4\n}\n\n/*\n***************************************\n* Collateral Assignment Response Type *\n***************************************\n*/\nexport enum CollAsgnRespType {\n  Received = 0,\n  Accepted = 1,\n  Declined = 2,\n  Rejected = 3\n}\n\n/*\n***************************************\n* Collateral Assignment Reject Reason *\n***************************************\n*/\nexport enum CollAsgnRejectReason {\n  UnknownDeal = 0,\n  UnknownOrInvalidInstrument = 1,\n  UnauthorizedTransaction = 2,\n  InsufficientCollateral = 3,\n  InvalidTypeOfCollateral = 4,\n  ExcessiveSubstitution = 5,\n  Other = 99\n}\n\n/*\n*********************\n* Collateral Status *\n*********************\n*/\nexport enum CollStatus {\n  Unassigned = 0,\n  PartiallyAssigned = 1,\n  AssignmentProposed = 2,\n  Assigned = 3,\n  Challenged = 4\n}\n\n/*\n*********************************\n* Identifies type of settlement *\n*********************************\n*/\nexport enum DeliveryType {\n  VersusPayment = 0,\n  Free = 1,\n  TriParty = 2,\n  HoldInCustody = 3\n}\n\n/*\n***********************************************************\n* Indicates the action required by a User Request Message *\n***********************************************************\n*/\nexport enum UserRequestType {\n  LogOnUser = 1,\n  LogOffUser = 2,\n  ChangePasswordForUser = 3,\n  RequestIndividualUserStatus = 4\n}\n\n/*\n**********************************\n* Indicates the status of a user *\n**********************************\n*/\nexport enum UserStatus {\n  LoggedIn = 1,\n  NotLoggedIn = 2,\n  UserNotRecognised = 3,\n  PasswordIncorrect = 4,\n  PasswordChanged = 5,\n  Other = 6\n}\n\n/*\n************************************************\n* Indicates the status of a network connection *\n************************************************\n*/\nexport enum StatusValue {\n  Connected = 1,\n  NotConnectedUnexpected = 2,\n  NotConnectedExpected = 3,\n  InProcess = 4\n}\n\n/*\n**********************************************************\n* Indicates the type and level of details required for a *\n* Network Status Request Message                         *\n* Boolean logic applies EG If you want to subscribe for  *\n* changes to certain id\u0019s then UserRequestType =0 (8+2), *\n* Snapshot for certain ID\u0019s = 9 (8+)                     *\n**********************************************************\n*/\nexport enum NetworkRequestType {\n  Snapshot = 1,\n  Subscribe = 2,\n  StopSubscribing = 4,\n  LevelOfDetail = 8\n}\n\n/*\n**************************************************\n* Indicates the type of Network Response Message *\n**************************************************\n*/\nexport enum NetworkStatusResponseType {\n  Full = 1,\n  IncrementalUpdate = 2\n}\n\n/*\n***********************\n* Trade Report Status *\n***********************\n*/\nexport enum TrdRptStatus {\n  Accepted = 0,\n  Rejected = 1\n}\n\n/*\n************************************************\n* Identifies the status of the ConfirmationAck *\n************************************************\n*/\nexport enum AffirmStatus {\n  Received = 1,\n  ConfirmRejected = 2,\n  Affirmed = 3\n}\n\n/*\n*********************************************************\n* Action proposed for an Underlying Instrument instance *\n*********************************************************\n*/\nexport enum CollAction {\n  Retain = 0,\n  Add = 1,\n  Remove = 2\n}\n\n/*\n********************************\n* Status of Collateral Inquiry *\n********************************\n*/\nexport enum CollInquiryStatus {\n  Accepted = 0,\n  AcceptedWithWarnings = 1,\n  Completed = 2,\n  CompletedWithWarnings = 3,\n  Rejected = 4\n}\n\n/*\n*************************************************************\n* Result returned in response to Collateral Inquiry         *\n* 4000+ Reserved and available for bi-laterally agreed upon *\n* user-defined values                                       *\n*************************************************************\n*/\nexport enum CollInquiryResult {\n  Successful = 0,\n  InvalidOrUnknownInstrument = 1,\n  InvalidOrUnknownCollateralType = 2,\n  InvalidParties = 3,\n  InvalidTransportTypeRequested = 4,\n  InvalidDestinationRequested = 5,\n  NoCollateralFoundForTheTradeSpecified = 6,\n  NoCollateralFoundForTheOrderSpecified = 7,\n  CollateralInquiryTypeNotSupported = 8,\n  UnauthorizedForCollateralInquiry = 9,\n  Other = 99\n}\n\n"]}