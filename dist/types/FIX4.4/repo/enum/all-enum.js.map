{"version":3,"file":"all-enum.js","sourceRoot":"","sources":["../../../../../src/types/FIX4.4/repo/enum/all-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n*************************************\r\n* Broker's side of advertised trade *\r\n*************************************\r\n*/\r\nexport enum AdvSide {\r\n  Buy = 'B',\r\n  Sell = 'S',\r\n  Cross = 'X',\r\n  Trade = 'T'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Identifies advertisement message transaction type *\r\n*****************************************************\r\n*/\r\nexport enum AdvTransType {\r\n  New = 'N',\r\n  Cancel = 'C',\r\n  Replace = 'R'\r\n}\r\n\r\n/*\r\n*******************\r\n* Commission type *\r\n*******************\r\n*/\r\nexport enum CommType {\r\n  PerUnit = '1',\r\n  Percent = '2',\r\n  Absolute = '3',\r\n  PercentageWaivedCashDiscount = '4',\r\n  PercentageWaivedEnhancedUnits = '5',\r\n  PointsPerBondOrContract = '6'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Instructions for order handling on exchange trading floor.   *\r\n* If more than one instruction is applicable to an order, this *\r\n* field can contain multiple instructions separated by space.  *\r\n****************************************************************\r\n*/\r\nexport enum ExecInst {\r\n  StayOnOfferSide = '0',\r\n  NotHeld = '1',\r\n  Work = '2',\r\n  GoAlong = '3',\r\n  OverTheDay = '4',\r\n  Held = '5',\r\n  ParticipateDoNotInitiate = '6',\r\n  StrictScale = '7',\r\n  TryToScale = '8',\r\n  StayOnBidSide = '9',\r\n  NoCross = 'A',\r\n  OkToCross = 'B',\r\n  CallFirst = 'C',\r\n  PercentOfVolume = 'D',\r\n  DoNotIncrease = 'E',\r\n  DoNotReduce = 'F',\r\n  AllOrNone = 'G',\r\n  ReinstateOnSystemFailure = 'H',\r\n  InstitutionsOnly = 'I',\r\n  ReinstateOnTradingHalt = 'J',\r\n  CancelOnTradingHalt = 'K',\r\n  LastPeg = 'L',\r\n  MidPricePeg = 'M',\r\n  NonNegotiable = 'N',\r\n  OpeningPeg = 'O',\r\n  MarketPeg = 'P',\r\n  CancelOnSystemFailure = 'Q',\r\n  PrimaryPeg = 'R',\r\n  Suspend = 'S',\r\n  CustomerDisplayInstruction = 'U',\r\n  Netting = 'V',\r\n  PegToVwap = 'W',\r\n  TradeAlong = 'X',\r\n  TryToStop = 'Y',\r\n  CancelIfNotBest = 'Z',\r\n  TrailingStopPeg = 'a',\r\n  StrictLimit = 'b',\r\n  IgnorePriceValidityChecks = 'c',\r\n  PegToLimitPrice = 'd',\r\n  WorkToTargetStrategy = 'e'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Instructions for order handling on Broker trading floor *\r\n***********************************************************\r\n*/\r\nexport enum HandlInst {\r\n  AutomatedExecutionNoIntervention = '1',\r\n  AutomatedExecutionInterventionOk = '2',\r\n  ManualOrder = '3'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Identifies class or source of the SecurityID (48) value. *\r\n* Required if SecurityID is specified.                     *\r\n************************************************************\r\n*/\r\nexport enum SecurityIDSource {\r\n  Cusip = '1',\r\n  Sedol = '2',\r\n  Quik = '3',\r\n  IsinNumber = '4',\r\n  RicCode = '5',\r\n  IsoCurrencyCode = '6',\r\n  IsoCountryCode = '7',\r\n  ExchangeSymbol = '8',\r\n  ConsolidatedTapeAssociation = '9',\r\n  BloombergSymbol = 'A',\r\n  Wertpapier = 'B',\r\n  Dutch = 'C',\r\n  Valoren = 'D',\r\n  Sicovam = 'E',\r\n  Belgian = 'F',\r\n  Common = 'G',\r\n  ClearingHouse = 'H',\r\n  IsdaFpMlSpecification = 'I',\r\n  OptionPriceReportingAuthority = 'J'\r\n}\r\n\r\n/*\r\n**********************************\r\n* Relative quality of indication *\r\n**********************************\r\n*/\r\nexport enum IOIQltyInd {\r\n  Low = 'L',\r\n  Medium = 'M',\r\n  High = 'H'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Quantity (e.g. number of shares) in numeric form or relative *\r\n* size.                                                        *\r\n****************************************************************\r\n*/\r\nexport enum IOIQty {\r\n  Small = 'S',\r\n  Medium = 'M',\r\n  Large = 'L'\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Identifies IOI message transaction type *\r\n*******************************************\r\n*/\r\nexport enum IOITransType {\r\n  New = 'N',\r\n  Cancel = 'C',\r\n  Replace = 'R'\r\n}\r\n\r\n/*\r\n**************************************\r\n* Broker capacity in order execution *\r\n**************************************\r\n*/\r\nexport enum LastCapacity {\r\n  Agent = '1',\r\n  CrossAsAgent = '2',\r\n  CrossAsPrincipal = '3',\r\n  Principal = '4'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Defines message type ALWAYS THIRD FIELD IN MESSAGE. (Always *\r\n* unencrypted)                                                *\r\n* Note: A \"U\" as the first character in the MsgType field     *\r\n* (i.e. U, U2, etc) indicates that the message format is      *\r\n* privately defined between the sender and receiver.          *\r\n***************************************************************\r\n*/\r\nexport enum MsgType {\r\n  Heartbeat = '0',\r\n  TestRequest = '1',\r\n  ResendRequest = '2',\r\n  Reject = '3',\r\n  SequenceReset = '4',\r\n  Logout = '5',\r\n  Ioi = '6',\r\n  Advertisement = '7',\r\n  ExecutionReport = '8',\r\n  OrderCancelReject = '9',\r\n  Logon = 'A',\r\n  News = 'B',\r\n  Email = 'C',\r\n  NewOrderSingle = 'D',\r\n  NewOrderList = 'E',\r\n  OrderCancelRequest = 'F',\r\n  OrderCancelReplaceRequest = 'G',\r\n  OrderStatusRequest = 'H',\r\n  AllocationInstruction = 'J',\r\n  ListCancelRequest = 'K',\r\n  ListExecute = 'L',\r\n  ListStatusRequest = 'M',\r\n  ListStatus = 'N',\r\n  AllocationInstructionAck = 'P',\r\n  DontKnowTrade = 'Q',\r\n  QuoteRequest = 'R',\r\n  Quote = 'S',\r\n  SettlementInstructions = 'T',\r\n  MarketDataRequest = 'V',\r\n  MarketDataSnapshotFullRefresh = 'W',\r\n  MarketDataIncrementalRefresh = 'X',\r\n  MarketDataRequestReject = 'Y',\r\n  QuoteCancel = 'Z',\r\n  QuoteStatusRequest = 'a',\r\n  MassQuoteAcknowledgement = 'b',\r\n  SecurityDefinitionRequest = 'c',\r\n  SecurityDefinition = 'd',\r\n  SecurityStatusRequest = 'e',\r\n  SecurityStatus = 'f',\r\n  TradingSessionStatusRequest = 'g',\r\n  TradingSessionStatus = 'h',\r\n  MassQuote = 'i',\r\n  BusinessMessageReject = 'j',\r\n  BidRequest = 'k',\r\n  BidResponse = 'l',\r\n  ListStrikePrice = 'm',\r\n  XmlNonFix = 'n',\r\n  RegistrationInstructions = 'o',\r\n  RegistrationInstructionsResponse = 'p',\r\n  OrderMassCancelRequest = 'q',\r\n  OrderMassCancelReport = 'r',\r\n  NewOrderCross = 's',\r\n  CrossOrderCancelReplaceRequest = 't',\r\n  CrossOrderCancelRequest = 'u',\r\n  SecurityTypeRequest = 'v',\r\n  SecurityTypes = 'w',\r\n  SecurityListRequest = 'x',\r\n  SecurityList = 'y',\r\n  DerivativeSecurityListRequest = 'z',\r\n  DerivativeSecurityList = 'AA',\r\n  NewOrderMultileg = 'AB',\r\n  MultilegOrderCancelReplace = 'AC',\r\n  TradeCaptureReportRequest = 'AD',\r\n  TradeCaptureReport = 'AE',\r\n  OrderMassStatusRequest = 'AF',\r\n  QuoteRequestReject = 'AG',\r\n  RfqRequest = 'AH',\r\n  QuoteStatusReport = 'AI',\r\n  QuoteResponse = 'AJ',\r\n  Confirmation = 'AK',\r\n  PositionMaintenanceRequest = 'AL',\r\n  PositionMaintenanceReport = 'AM',\r\n  RequestForPositions = 'AN',\r\n  RequestForPositionsAck = 'AO',\r\n  PositionReport = 'AP',\r\n  TradeCaptureReportRequestAck = 'AQ',\r\n  TradeCaptureReportAck = 'AR',\r\n  AllocationReport = 'AS',\r\n  AllocationReportAck = 'AT',\r\n  ConfirmationAck = 'AU',\r\n  SettlementInstructionRequest = 'AV',\r\n  AssignmentReport = 'AW',\r\n  CollateralRequest = 'AX',\r\n  CollateralAssignment = 'AY',\r\n  CollateralResponse = 'AZ',\r\n  CollateralReport = 'BA',\r\n  CollateralInquiry = 'BB',\r\n  NetworkCounterpartySystemStatusRequest = 'BC',\r\n  NetworkCounterpartySystemStatusResponse = 'BD',\r\n  UserRequest = 'BE',\r\n  UserResponse = 'BF',\r\n  CollateralInquiryAck = 'BG',\r\n  ConfirmationRequest = 'BH'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Identifies current status of order.                         *\r\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\r\n* and Supported Approach\" ***                                 *\r\n* (see Volume : \"Glossary\" for value definitions)             *\r\n***************************************************************\r\n*/\r\nexport enum OrdStatus {\r\n  New = '0',\r\n  PartiallyFilled = '1',\r\n  Filled = '2',\r\n  DoneForDay = '3',\r\n  Canceled = '4',\r\n  PendingCancel = '6',\r\n  Stopped = '7',\r\n  Rejected = '8',\r\n  Suspended = '9',\r\n  PendingNew = 'A',\r\n  Calculated = 'B',\r\n  Expired = 'C',\r\n  AcceptedForBidding = 'D',\r\n  PendingReplace = 'E'\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Order type                                           *\r\n* *** SOME VALUES ARE NO LONGER USED - See \"Deprecated *\r\n* (Phased-out) Features and Supported Approach\" ***    *\r\n* (see Volume : \"Glossary\" for value definitions)      *\r\n********************************************************\r\n*/\r\nexport enum OrdType {\r\n  Market = '1',\r\n  Limit = '2',\r\n  Stop = '3',\r\n  StopLimit = '4',\r\n  WithOrWithout = '6',\r\n  LimitOrBetter = '7',\r\n  LimitWithOrWithout = '8',\r\n  OnBasis = '9',\r\n  PreviouslyQuoted = 'D',\r\n  PreviouslyIndicated = 'E',\r\n  ForexSwap = 'G',\r\n  Funari = 'I',\r\n  MarketIfTouched = 'J',\r\n  MarketWithLeftOverAsLimit = 'K',\r\n  PreviousFundValuationPoint = 'L',\r\n  NextFundValuationPoint = 'M',\r\n  Pegged = 'P'\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Indicates possible retransmission of message with this *\r\n* sequence number                                        *\r\n**********************************************************\r\n*/\r\nexport enum PossDupFlag {\r\n  PossibleDuplicate = 'Y',\r\n  OriginalTransmission = 'N'\r\n}\r\n\r\n/*\r\n*****************\r\n* Side of order *\r\n*****************\r\n*/\r\nexport enum Side {\r\n  Buy = '1',\r\n  Sell = '2',\r\n  BuyMinus = '3',\r\n  SellPlus = '4',\r\n  SellShort = '5',\r\n  SellShortExempt = '6',\r\n  Undisclosed = '7',\r\n  Cross = '8',\r\n  CrossShort = '9',\r\n  CrossShortExempt = 'A',\r\n  AsDefined = 'B',\r\n  Opposite = 'C',\r\n  Subscribe = 'D',\r\n  Redeem = 'E',\r\n  Lend = 'F',\r\n  Borrow = 'G'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Specifies how long the order remains in effect. Absence of *\r\n* this field is interpreted as DAY.                          *\r\n**************************************************************\r\n*/\r\nexport enum TimeInForce {\r\n  Day = '0',\r\n  GoodTillCancel = '1',\r\n  AtTheOpening = '2',\r\n  ImmediateOrCancel = '3',\r\n  FillOrKill = '4',\r\n  GoodTillCrossing = '5',\r\n  GoodTillDate = '6',\r\n  AtTheClose = '7'\r\n}\r\n\r\n/*\r\n****************\r\n* Urgency flag *\r\n****************\r\n*/\r\nexport enum Urgency {\r\n  Normal = '0',\r\n  Flash = '1',\r\n  Background = '2'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates order settlement period. If present, SettlDate     *\r\n* (64) overrides this field. If both SettlType (63) and        *\r\n* SettDate (64) are omitted, the default for SettlType (63) is *\r\n* 0 (Regular)                                                  *\r\n* Regular is defined as the default settlement period for the  *\r\n* particular security on the exchange of execution.            *\r\n* In Fixed Income the contents of this field may influence the *\r\n* instrument definition if the SecurityID (48) is ambiguous.   *\r\n* In the US an active Treasury offering may be re-opened, and  *\r\n* for a time one CUSIP will apply to both the current and      *\r\n* \"when-issued\" securities. Supplying a value of \"7\" clarifies *\r\n* the instrument description; any other value or the absence   *\r\n* of this field should cause the respondent to default to the  *\r\n* active issue.                                                *\r\n****************************************************************\r\n*/\r\nexport enum SettlType {\r\n  Regular = '0',\r\n  Cash = '1',\r\n  NextDay = '2',\r\n  TPlus2 = '3',\r\n  TPlus3 = '4',\r\n  TPlus4 = '5',\r\n  Future = '6',\r\n  WhenAndIfIssued = '7',\r\n  SellersOption = '8',\r\n  TPlus5 = '9'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Identifies allocation transaction type                      *\r\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\r\n* and Supported Approach\" ***                                 *\r\n***************************************************************\r\n*/\r\nexport enum AllocTransType {\r\n  New = '0',\r\n  Replace = '1',\r\n  Cancel = '2'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates whether the resulting position after a trade      *\r\n* should be an opening position or closing position. Used for *\r\n* omnibus accounting - where accounts are held on a gross     *\r\n* basis instead of being netted together.                     *\r\n***************************************************************\r\n*/\r\nexport enum PositionEffect {\r\n  Open = 'O',\r\n  Close = 'C',\r\n  Rolled = 'R',\r\n  Fifo = 'F'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Processing code for sub-account. Absence of this field in *\r\n* AllocAccount (79) / AllocPrice (366) /AllocQty (80) /     *\r\n* ProcessCode instance indicates regular trade.             *\r\n*************************************************************\r\n*/\r\nexport enum ProcessCode {\r\n  Regular = '0',\r\n  SoftDollar = '1',\r\n  StepIn = '2',\r\n  StepOut = '3',\r\n  SoftDollarStepIn = '4',\r\n  SoftDollarStepOut = '5',\r\n  PlanSponsor = '6'\r\n}\r\n\r\n/*\r\n***********************************\r\n* Identifies status of allocation *\r\n***********************************\r\n*/\r\nexport enum AllocStatus {\r\n  Accepted = 0,\r\n  BlockLevelReject = 1,\r\n  AccountLevelReject = 2,\r\n  Received = 3,\r\n  Incomplete = 4,\r\n  RejectedByIntermediary = 5\r\n}\r\n\r\n/*\r\n***********************************\r\n* Identifies reason for rejection *\r\n***********************************\r\n*/\r\nexport enum AllocRejCode {\r\n  UnknownAccount = 0,\r\n  IncorrectQuantity = 1,\r\n  IncorrectAveragegPrice = 2,\r\n  UnknownExecutingBrokerMnemonic = 3,\r\n  CommissionDifference = 4,\r\n  UnknownOrderId = 5,\r\n  UnknownListId = 6,\r\n  OtherSeeText = 7,\r\n  IncorrectAllocatedQuantity = 8,\r\n  CalculationDifference = 9,\r\n  UnknownOrStaleExecId = 10,\r\n  MismatchedData = 11,\r\n  UnknownClOrdId = 12,\r\n  WarehouseRequestRejected = 13\r\n}\r\n\r\n/*\r\n**********************\r\n* Email message type *\r\n**********************\r\n*/\r\nexport enum EmailType {\r\n  New = '0',\r\n  Reply = '1',\r\n  AdminReply = '2'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates that message may contain information that has been *\r\n* sent under another sequence number.                          *\r\n****************************************************************\r\n*/\r\nexport enum PossResend {\r\n  PossibleResend = 'Y',\r\n  OriginalTransmission = 'N'\r\n}\r\n\r\n/*\r\n************************\r\n* Method of encryption *\r\n************************\r\n*/\r\nexport enum EncryptMethod {\r\n  None = 0,\r\n  Pkcs = 1,\r\n  Des = 2,\r\n  Pkcsdes = 3,\r\n  Pgpdes = 4,\r\n  Pgpdesmd5 = 5,\r\n  Pem = 6\r\n}\r\n\r\n/*\r\n************************************************\r\n* Code to identify reason for cancel rejection *\r\n************************************************\r\n*/\r\nexport enum CxlRejReason {\r\n  TooLateToCancel = 0,\r\n  UnknownOrder = 1,\r\n  BrokerCredit = 2,\r\n  OrderAlreadyInPendingStatus = 3,\r\n  UnableToProcessOrderMassCancelRequest = 4,\r\n  OrigOrdModTime = 5,\r\n  DuplicateClOrdId = 6,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n************************************************\r\n* Code to identify reason for order rejection. *\r\n************************************************\r\n*/\r\nexport enum OrdRejReason {\r\n  BrokerCredit = 0,\r\n  UnknownSymbol = 1,\r\n  ExchangeClosed = 2,\r\n  OrderExceedsLimit = 3,\r\n  TooLateToEnter = 4,\r\n  UnknownOrder = 5,\r\n  DuplicateOrder = 6,\r\n  DuplicateOfAVerballyCommunicatedOrder = 7,\r\n  StaleOrder = 8,\r\n  TradeAlongRequired = 9,\r\n  InvalidInvestorId = 10,\r\n  UnsupportedOrderCharacteristic = 11,\r\n  IncorrectQuantity = 13,\r\n  IncorrectAllocatedQuantity = 14,\r\n  UnknownAccount = 15,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n***************************\r\n* Code to qualify IOI use *\r\n***************************\r\n*/\r\nexport enum IOIQualifier {\r\n  AllOrNone = 'A',\r\n  MarketOnClose = 'B',\r\n  AtTheClose = 'C',\r\n  Vwap = 'D',\r\n  InTouchWith = 'I',\r\n  Limit = 'L',\r\n  MoreBehind = 'M',\r\n  AtTheOpen = 'O',\r\n  TakingAPosition = 'P',\r\n  AtTheMarket = 'Q',\r\n  ReadyToTrade = 'R',\r\n  PortfolioShown = 'S',\r\n  ThroughTheDay = 'T',\r\n  Versus = 'V',\r\n  Indication = 'W',\r\n  CrossingOpportunity = 'X',\r\n  AtTheMidpoint = 'Y',\r\n  PreOpen = 'Z'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Identifies party of trade responsible for exchange *\r\n* reporting.                                         *\r\n******************************************************\r\n*/\r\nexport enum ReportToExch {\r\n  ReceiverReports = 'Y',\r\n  SenderReports = 'N'\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Indicates whether the broker is to locate the stock in *\r\n* conjunction with a short sell order.                   *\r\n**********************************************************\r\n*/\r\nexport enum LocateReqd {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Indicates request for forex accommodation trade to be *\r\n* executed along with security transaction.             *\r\n*********************************************************\r\n*/\r\nexport enum ForexReq {\r\n  ExecuteForexAfterSecurityTrade = 'Y',\r\n  DoNotExecuteForexAfterSecurityTrade = 'N'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates that the Sequence Reset message is replacing   *\r\n* administrative or application messages which will not be *\r\n* resent.                                                  *\r\n************************************************************\r\n*/\r\nexport enum GapFillFlag {\r\n  GapFillMessage = 'Y',\r\n  SequenceReset = 'N'\r\n}\r\n\r\n/*\r\n**********************************\r\n* Reason for execution rejection *\r\n**********************************\r\n*/\r\nexport enum DKReason {\r\n  UnknownSymbol = 'A',\r\n  WrongSide = 'B',\r\n  QuantityExceedsOrder = 'C',\r\n  NoMatchingOrder = 'D',\r\n  PriceExceedsLimit = 'E',\r\n  CalculationDifference = 'F',\r\n  Other = 'Z'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates that IOI is the result of an existing agency order *\r\n* or a facilitation position resulting from an agency order,   *\r\n* not from principal trading or order solicitation activity.   *\r\n****************************************************************\r\n*/\r\nexport enum IOINaturalFlag {\r\n  Natural = 'Y',\r\n  NotNatural = 'N'\r\n}\r\n\r\n/*\r\n***************************************\r\n* Indicates type of miscellaneous fee *\r\n***************************************\r\n*/\r\nexport enum MiscFeeType {\r\n  Regulatory = '1',\r\n  Tax = '2',\r\n  LocalCommission = '3',\r\n  ExchangeFees = '4',\r\n  Stamp = '5',\r\n  Levy = '6',\r\n  Other = '7',\r\n  Markup = '8',\r\n  ConsumptionTax = '9',\r\n  PerTransaction = '10',\r\n  Conversion = '11',\r\n  Agent = '12'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Indicates that the both sides of the FIX session should *\r\n* reset sequence numbers.                                 *\r\n***********************************************************\r\n*/\r\nexport enum ResetSeqNumFlag {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Describes the specific ExecutionRpt (i.e. Pending Cancel)   *\r\n* while OrdStatus (39) will always identify the current order *\r\n* status (i.e. Partially Filled)                              *\r\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\r\n* and Supported Approach\" ***                                 *\r\n***************************************************************\r\n*/\r\nexport enum ExecType {\r\n  New = '0',\r\n  DoneForDay = '3',\r\n  Canceled = '4',\r\n  Replaced = '5',\r\n  PendingCancel = '6',\r\n  Stopped = '7',\r\n  Rejected = '8',\r\n  Suspended = '9',\r\n  PendingNew = 'A',\r\n  Calculated = 'B',\r\n  Expired = 'C',\r\n  Restated = 'D',\r\n  PendingReplace = 'E',\r\n  Trade = 'F',\r\n  TradeCorrect = 'G',\r\n  TradeCancel = 'H',\r\n  OrderStatus = 'I'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Specifies whether or not SettlCurrFxRate (55) should be *\r\n* multiplied or divided                                   *\r\n***********************************************************\r\n*/\r\nexport enum SettlCurrFxRateCalc {\r\n  Multiply = 'M',\r\n  Divide = 'D'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates mode used for Settlement Instructions message.    *\r\n* *** SOME VALUES HAVE BEEN REPLACED - See \"Replaced Features *\r\n* and Supported Approach\" ***                                 *\r\n***************************************************************\r\n*/\r\nexport enum SettlInstMode {\r\n  StandingInstructionsProvided = '1',\r\n  SpecificOrderForASingleAccount = '4',\r\n  RequestReject = '5'\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Settlement Instructions message transaction type *\r\n****************************************************\r\n*/\r\nexport enum SettlInstTransType {\r\n  New = 'N',\r\n  Cancel = 'C',\r\n  Replace = 'R',\r\n  Restate = 'T'\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Indicates source of Settlement Instructions *\r\n***********************************************\r\n*/\r\nexport enum SettlInstSource {\r\n  BrokerCredit = '1',\r\n  Institution = '2',\r\n  Investor = '3'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates type of security. See also the Product (460) and  *\r\n* CFICode (46) fields. It is recommended that CFICode be used *\r\n* instead of SecurityType for non-Fixed Income instruments.   *\r\n* Example values (grouped by Product field value) (Note:      *\r\n* additional values may be used by mutual agreement of the    *\r\n* counterparties):                                            *\r\n* * Identify the Issuer in the \"Issuer\" field(06)             *\r\n* *** REPLACED values - See \"Replaced Features and Supported  *\r\n* Approach\" ***                                               *\r\n* NOTE: Additional values may be used by mutual agreement of  *\r\n* the counterparties)                                         *\r\n***************************************************************\r\n*/\r\nexport enum SecurityType {\r\n  Future = 'FUT',\r\n  Option = 'OPT',\r\n  EuroSupranationalCoupons = 'EUSUPRA',\r\n  FederalAgencyCoupon = 'FAC',\r\n  FederalAgencyDiscountNote = 'FADN',\r\n  PrivateExportFunding = 'PEF',\r\n  UsdSupranationalCoupons = 'SUPRA',\r\n  CorporateBond = 'CORP',\r\n  CorporatePrivatePlacement = 'CPP',\r\n  ConvertibleBond = 'CB',\r\n  DualCurrency = 'DUAL',\r\n  EuroCorporateBond = 'EUCORP',\r\n  IndexedLinked = 'XLINKD',\r\n  StructuredNotes = 'STRUCT',\r\n  YankeeCorporateBond = 'YANK',\r\n  ForeignExchangeContract = 'FOR',\r\n  CommonStock = 'CS',\r\n  PreferredStock = 'PS',\r\n  BradyBond = 'BRADY',\r\n  EuroSovereigns = 'EUSOV',\r\n  UsTreasuryBond = 'TBOND',\r\n  InterestStripFromAnyBondOrNote = 'TINT',\r\n  TreasuryInflationProtectedSecurities = 'TIPS',\r\n  PrincipalStripOfACallableBondOrNote = 'TCAL',\r\n  PrincipalStripFromANonCallableBondOrNote = 'TPRN',\r\n  UsTreasuryNoteOld = 'UST',\r\n  UsTreasuryBillOld = 'USTB',\r\n  UsTreasuryNote = 'TNOTE',\r\n  UsTreasuryBill = 'TBILL',\r\n  Repurchase = 'REPO',\r\n  Forward = 'FORWARD',\r\n  BuySellback = 'BUYSELL',\r\n  SecuritiesLoan = 'SECLOAN',\r\n  SecuritiesPledge = 'SECPLEDGE',\r\n  TermLoan = 'TERM',\r\n  RevolverLoan = 'RVLV',\r\n  Revolver = 'RVLVTRM',\r\n  BridgeLoan = 'BRIDGE',\r\n  LetterOfCredit = 'LOFC',\r\n  SwingLineFacility = 'SWING',\r\n  DebtorInPossession = 'DINP',\r\n  Defaulted = 'DEFLTED',\r\n  Withdrawn = 'WITHDRN',\r\n  Replaced = 'REPLACD',\r\n  Matured = 'MATURED',\r\n  Amended = 'AMENDED',\r\n  Retired = 'RETIRED',\r\n  BankersAcceptance = 'BA',\r\n  BankNotes = 'BN',\r\n  BillOfExchanges = 'BOX',\r\n  CertificateOfDeposit = 'CD',\r\n  CallLoans = 'CL',\r\n  CommercialPaper = 'CP',\r\n  DepositNotes = 'DN',\r\n  EuroCertificateOfDeposit = 'EUCD',\r\n  EuroCommercialPaper = 'EUCP',\r\n  LiquidityNote = 'LQN',\r\n  MediumTermNotes = 'MTN',\r\n  Overnight = 'ONITE',\r\n  PromissoryNote = 'PN',\r\n  PlazosFijos = 'PZFJ',\r\n  ShortTermLoanNote = 'STN',\r\n  TimeDeposit = 'TD',\r\n  ExtendedCommNote = 'XCN',\r\n  YankeeCertificateOfDeposit = 'YCD',\r\n  AssetBackedSecurities = 'ABS',\r\n  Corp = 'CMBS',\r\n  CollateralizedMortgageObligation = 'CMO',\r\n  IoetteMortgage = 'IET',\r\n  MortgageBackedSecurities = 'MBS',\r\n  MortgageInterestOnly = 'MIO',\r\n  MortgagePrincipalOnly = 'MPO',\r\n  MortgagePrivatePlacement = 'MPP',\r\n  MiscellaneousPassThrough = 'MPT',\r\n  Pfandbriefe = 'PFAND',\r\n  ToBeAnnounced = 'TBA',\r\n  OtherAnticipationNotes = 'AN',\r\n  CertificateOfObligation = 'COFO',\r\n  CertificateOfParticipation = 'COFP',\r\n  GeneralObligationBonds = 'GO',\r\n  MandatoryTender = 'MT',\r\n  RevenueAnticipationNote = 'RAN',\r\n  RevenueBonds = 'REV',\r\n  SpecialAssessment = 'SPCLA',\r\n  SpecialObligation = 'SPCLO',\r\n  SpecialTax = 'SPCLT',\r\n  TaxAnticipationNote = 'TAN',\r\n  TaxAllocation = 'TAXA',\r\n  TaxExemptCommercialPaper = 'TECP',\r\n  TaxRevenueAnticipationNote = 'TRAN',\r\n  VariableRateDemandNote = 'VRDN',\r\n  Warrant = 'WAR',\r\n  MutualFund = 'MF',\r\n  MultilegInstrument = 'MLEG',\r\n  NoSecurityType = 'NONE'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Identifies the Standing Instruction database used *\r\n*****************************************************\r\n*/\r\nexport enum StandInstDbType {\r\n  Other = 0,\r\n  Dtcsid = 1,\r\n  ThomsonAlert = 2,\r\n  AGlobalCustodian = 3,\r\n  AccountNet = 4\r\n}\r\n\r\n/*\r\n*********************************\r\n* Identifies type of settlement *\r\n*********************************\r\n*/\r\nexport enum SettlDeliveryType {\r\n  Versus = 0,\r\n  Free = 1,\r\n  TriParty = 2,\r\n  HoldInCustody = 3\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Identifies the type of Allocation linkage when AllocLinkID *\r\n* (96) is used.                                              *\r\n**************************************************************\r\n*/\r\nexport enum AllocLinkType {\r\n  FxNetting = 0,\r\n  FxSwap = 1\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Indicates whether an Option is for a put or call *\r\n****************************************************\r\n*/\r\nexport enum PutOrCall {\r\n  Put = 0,\r\n  Call = 1\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Used for derivative products, such as options *\r\n*************************************************\r\n*/\r\nexport enum CoveredOrUncovered {\r\n  Covered = 0,\r\n  Uncovered = 1\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicates whether or not details should be communicated to *\r\n* BrokerOfCredit (i.e. step-in broker).                      *\r\n**************************************************************\r\n*/\r\nexport enum NotifyBrokerOfCredit {\r\n  DetailsShouldBeCommunicated = 'Y',\r\n  DetailsShouldNotBeCommunicated = 'N'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates how the receiver (i.e. third party) of Allocation *\r\n* message should handle/process the account details           *\r\n***************************************************************\r\n*/\r\nexport enum AllocHandlInst {\r\n  Match = 1,\r\n  Forward = 2,\r\n  ForwardAndMatch = 3\r\n}\r\n\r\n/*\r\n**************************************************\r\n* Indicates the type of RoutingID (27) specified *\r\n**************************************************\r\n*/\r\nexport enum RoutingType {\r\n  TargetFirm = 1,\r\n  TargetList = 2,\r\n  BlockFirm = 3,\r\n  BlockList = 4\r\n}\r\n\r\n/*\r\n***********************\r\n* Type of Stipulation *\r\n***********************\r\n*/\r\nexport enum StipulationType {\r\n  AlternativeMinimumTax = 'AMT',\r\n  AutoReinvestment = 'AUTOREINV',\r\n  BankQualified = 'BANKQUAL',\r\n  BargainConditions = 'BGNCON',\r\n  CouponRange = 'COUPON',\r\n  IsoCurrencyCode = 'CURRENCY',\r\n  CustomStart = 'CUSTOMDATE',\r\n  Geographics = 'GEOG',\r\n  ValuationDiscount = 'HAIRCUT',\r\n  Insured = 'INSURED',\r\n  IssueDate = 'ISSUE',\r\n  Issuer = 'ISSUER',\r\n  IssueSizeRange = 'ISSUESIZE',\r\n  LookbackDays = 'LOOKBACK',\r\n  ExplicitLotIdentifier = 'LOT',\r\n  LotVariance = 'LOTVAR',\r\n  MaturityYearAndMonth = 'MAT',\r\n  MaturityRange = 'MATURITY',\r\n  MaximumSubstitutions = 'MAXSUBS',\r\n  MinimumQuantity = 'MINQTY',\r\n  MinimumIncrement = 'MININCR',\r\n  MinimumDenomination = 'MINDNOM',\r\n  PaymentFrequency = 'PAYFREQ',\r\n  NumberOfPieces = 'PIECES',\r\n  PoolsMaximum = 'PMAX',\r\n  PoolsPerMillion = 'PPM',\r\n  PoolsPerLot = 'PPL',\r\n  PoolsPerTrade = 'PPT',\r\n  PriceRange = 'PRICE',\r\n  PricingFrequency = 'PRICEFREQ',\r\n  ProductionYear = 'PROD',\r\n  CallProtection = 'PROTECT',\r\n  Purpose = 'PURPOSE',\r\n  BenchmarkPriceSource = 'PXSOURCE',\r\n  RatingSourceAndRange = 'RATING',\r\n  TypeOfRedemption = 'REDEMPTION',\r\n  Restricted = 'RESTRICTED',\r\n  MarketSector = 'SECTOR',\r\n  SecurityTypeIncludedOrExcluded = 'SECTYPE',\r\n  Structure = 'STRUCT',\r\n  SubstitutionsFrequency = 'SUBSFREQ',\r\n  SubstitutionsLeft = 'SUBSLEFT',\r\n  FreeformText = 'TEXT',\r\n  TradeVariance = 'TRDVAR',\r\n  WeightedAverageCoupon = 'WAC',\r\n  WeightedAverageLifeCoupon = 'WAL',\r\n  WeightedAverageLoanAge = 'WALA',\r\n  WeightedAverageMaturity = 'WAM',\r\n  WholePool = 'WHOLE',\r\n  YieldRange = 'YIELD'\r\n}\r\n\r\n/*\r\n*****************\r\n* Type of yield *\r\n*****************\r\n*/\r\nexport enum YieldType {\r\n  AfterTaxYield = 'AFTERTAX',\r\n  AnnualYield = 'ANNUAL',\r\n  YieldAtIssue = 'ATISSUE',\r\n  YieldToAverageMaturity = 'AVGMATURITY',\r\n  BookYield = 'BOOK',\r\n  YieldToNextCall = 'CALL',\r\n  YieldChangeSinceClose = 'CHANGE',\r\n  ClosingYield = 'CLOSE',\r\n  CompoundYield = 'COMPOUND',\r\n  CurrentYield = 'CURRENT',\r\n  TrueGrossYield = 'GROSS',\r\n  GvntEquivalentYield = 'GOVTEQUIV',\r\n  YieldWithInflationAssumption = 'INFLATION',\r\n  InverseFloaterBondYield = 'INVERSEFLOATER',\r\n  MostRecentClosingYield = 'LASTCLOSE',\r\n  ClosingYieldMostRecentMonth = 'LASTMONTH',\r\n  ClosingYieldMostRecentQuarter = 'LASTQUARTER',\r\n  ClosingYieldMostRecentYear = 'LASTYEAR',\r\n  YieldToLongestAverageLife = 'LONGAVGLIFE',\r\n  MarkToMarketYield = 'MARK',\r\n  YieldToMaturity = 'MATURITY',\r\n  YieldToNextRefund = 'NEXTREFUND',\r\n  OpenAverageYield = 'OPENAVG',\r\n  YieldToNextPut = 'PUT',\r\n  PreviousCloseYield = 'PREVCLOSE',\r\n  ProceedsYield = 'PROCEEDS',\r\n  SemiAnnualYield = 'SEMIANNUAL',\r\n  YieldToShortestAverageLife = 'SHORTAVGLIFE',\r\n  SimpleYield = 'SIMPLE',\r\n  TaxEquivalentYield = 'TAXEQUIV',\r\n  YieldToTenderDate = 'TENDER',\r\n  TrueYield = 'TRUE',\r\n  YieldValueOf132 = 'VALUE1/32',\r\n  YieldToWorst = 'WORST'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Driver and part of trade in the event that the Security *\r\n* Master file was wrong at the point of entry             *\r\n* (Note tag # was reserved in FIX 4.1, added in FIX 4.3)  *\r\n***********************************************************\r\n*/\r\nexport enum TradedFlatSwitch {\r\n  TradedFlat = 'Y',\r\n  NotTradedFlat = 'N'\r\n}\r\n\r\n/*\r\n*****************************\r\n* Subscription Request Type *\r\n*****************************\r\n*/\r\nexport enum SubscriptionRequestType {\r\n  Snapshot = '0',\r\n  SnapshotAndUpdates = '1',\r\n  DisablePreviousSnapshot = '2'\r\n}\r\n\r\n/*\r\n********************************************\r\n* Specifies the type of Market Data update *\r\n********************************************\r\n*/\r\nexport enum MDUpdateType {\r\n  FullRefresh = 0,\r\n  IncrementalRefresh = 1\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Specifies whether or not book entries should be aggregated. *\r\n***************************************************************\r\n*/\r\nexport enum AggregatedBook {\r\n  BookEntriesToBeAggregated = 'Y',\r\n  BookEntriesShouldNotBeAggregated = 'N'\r\n}\r\n\r\n/*\r\n**************************\r\n* Type Market Data entry *\r\n**************************\r\n*/\r\nexport enum MDEntryType {\r\n  Bid = '0',\r\n  Offer = '1',\r\n  Trade = '2',\r\n  IndexValue = '3',\r\n  OpeningPrice = '4',\r\n  ClosingPrice = '5',\r\n  SettlementPrice = '6',\r\n  TradingSessionHighPrice = '7',\r\n  TradingSessionLowPrice = '8',\r\n  TradingSessionVwapPrice = '9',\r\n  Imbalance = 'A',\r\n  TradeVolume = 'B',\r\n  OpenInterest = 'C'\r\n}\r\n\r\n/*\r\n***************************\r\n* Direction of the \"tick\" *\r\n***************************\r\n*/\r\nexport enum TickDirection {\r\n  PlusTick = '0',\r\n  ZeroPlusTick = '1',\r\n  MinusTick = '2',\r\n  ZeroMinusTick = '3'\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Space-delimited list of conditions describing a quote *\r\n*********************************************************\r\n*/\r\nexport enum QuoteCondition {\r\n  Open = 'A',\r\n  Closed = 'B',\r\n  ExchangeBest = 'C',\r\n  ConsolidatedBest = 'D',\r\n  Locked = 'E',\r\n  Crossed = 'F',\r\n  Depth = 'G',\r\n  FastTrading = 'H',\r\n  NonFirm = 'I'\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Space-delimited list of conditions describing a trade *\r\n*********************************************************\r\n*/\r\nexport enum TradeCondition {\r\n  Cash = 'A',\r\n  AveragePriceTrade = 'B',\r\n  CashTrade = 'C',\r\n  NextDay = 'D',\r\n  Opening = 'E',\r\n  IntradayTradeDetail = 'F',\r\n  Rule127Trade = 'G',\r\n  Rule155Trade = 'H',\r\n  SoldLast = 'I',\r\n  NextDayTrade = 'J',\r\n  Opened = 'K',\r\n  Seller = 'L',\r\n  Sold = 'M',\r\n  StoppedStock = 'N',\r\n  ImbalanceMoreBuyers = 'P',\r\n  ImbalanceMoreSellers = 'Q',\r\n  OpeningPrice = 'R'\r\n}\r\n\r\n/*\r\n*************************************\r\n* Type of Market Data update action *\r\n*************************************\r\n*/\r\nexport enum MDUpdateAction {\r\n  New = '0',\r\n  Change = '1',\r\n  Delete = '2'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Reason for the rejection of a Market Data request *\r\n*****************************************************\r\n*/\r\nexport enum MDReqRejReason {\r\n  UnknownSymbol = '0',\r\n  DuplicateMdReqId = '1',\r\n  InsufficientBandwidth = '2',\r\n  InsufficientPermissions = '3',\r\n  UnsupportedSubscriptionRequestType = '4',\r\n  UnsupportedMarketDepth = '5',\r\n  UnsupportedMdUpdateType = '6',\r\n  UnsupportedAggregatedBook = '7',\r\n  UnsupportedMdEntryType = '8',\r\n  UnsupportedTradingSessionId = '9',\r\n  UnsupportedScope = 'A',\r\n  UnsupportedOpenCloseSettleFlag = 'B',\r\n  UnsupportedMdImplicitDelete = 'C'\r\n}\r\n\r\n/*\r\n***********************\r\n* Reason for deletion *\r\n***********************\r\n*/\r\nexport enum DeleteReason {\r\n  Cancellation = '0',\r\n  Error = '1'\r\n}\r\n\r\n/*\r\n**************************************************\r\n* Flag that identifies a market data entry       *\r\n* (Prior to FIX 4.3 this field was of type char) *\r\n**************************************************\r\n*/\r\nexport enum OpenCloseSettlFlag {\r\n  DailyOpen = '0',\r\n  SessionOpen = '1',\r\n  DeliverySettlementEntry = '2',\r\n  ExpectedEntry = '3',\r\n  EntryFromPreviousBusinessDay = '4',\r\n  TheoreticalPriceValue = '5'\r\n}\r\n\r\n/*\r\n****************************************\r\n* Identifies a firm\u0019s financial status *\r\n****************************************\r\n*/\r\nexport enum FinancialStatus {\r\n  Bankrupt = '1',\r\n  PendingDelisting = '2'\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Identifies the type of Corporate Action *\r\n*******************************************\r\n*/\r\nexport enum CorporateAction {\r\n  ExDividend = 'A',\r\n  ExDistribution = 'B',\r\n  ExRights = 'C',\r\n  New = 'D',\r\n  ExInterest = 'E'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Identifies the status of the quote acknowledgement *\r\n******************************************************\r\n*/\r\nexport enum QuoteStatus {\r\n  Accepted = 0,\r\n  CancelForSymbol = 1,\r\n  CanceledForSecurityType = 2,\r\n  CanceledForUnderlying = 3,\r\n  CanceledAll = 4,\r\n  Rejected = 5,\r\n  RemovedFromMarket = 6,\r\n  Expired = 7,\r\n  Query = 8,\r\n  QuoteNotFound = 9,\r\n  Pending = 10,\r\n  Pass = 11,\r\n  LockedMarketWarning = 12,\r\n  CrossMarketWarning = 13,\r\n  CanceledDueToLockMarket = 14,\r\n  CanceledDueToCrossMarket = 15\r\n}\r\n\r\n/*\r\n****************************************\r\n* Identifies the type of quote cancel. *\r\n****************************************\r\n*/\r\nexport enum QuoteCancelType {\r\n  CancelForOneOrMoreSecurities = 1,\r\n  CancelForSecurityType = 2,\r\n  CancelForUnderlyingSecurity = 3,\r\n  CancelAllQuotes = 4\r\n}\r\n\r\n/*\r\n*****************************\r\n* Reason Quote was rejected *\r\n*****************************\r\n*/\r\nexport enum QuoteRejectReason {\r\n  UnknownSymbol = 1,\r\n  Exchange = 2,\r\n  QuoteRequestExceedsLimit = 3,\r\n  TooLateToEnter = 4,\r\n  UnknownQuote = 5,\r\n  DuplicateQuote = 6,\r\n  InvalidBid = 7,\r\n  InvalidPrice = 8,\r\n  NotAuthorizedToQuoteSecurity = 9,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Level of Response requested from receiver of quote messages. *\r\n****************************************************************\r\n*/\r\nexport enum QuoteResponseLevel {\r\n  NoAcknowledgement = 0,\r\n  AcknowledgeOnlyNegativeOrErroneousQuotes = 1,\r\n  AcknowledgeEachQuoteMessage = 2\r\n}\r\n\r\n/*\r\n*******************************************************\r\n* Indicates the type of Quote Request being generated *\r\n*******************************************************\r\n*/\r\nexport enum QuoteRequestType {\r\n  Manual = 1,\r\n  Automatic = 2\r\n}\r\n\r\n/*\r\n****************************************\r\n* Type of Security Definition Request. *\r\n****************************************\r\n*/\r\nexport enum SecurityRequestType {\r\n  RequestSecurityIdentityAndSpecifications = 0,\r\n  RequestSecurityIdentityForSpecifications = 1,\r\n  RequestListSecurityTypes = 2,\r\n  RequestListSecurities = 3\r\n}\r\n\r\n/*\r\n************************************************\r\n* Type of Security Definition message response *\r\n************************************************\r\n*/\r\nexport enum SecurityResponseType {\r\n  AcceptAsIs = 1,\r\n  AcceptWithRevisions = 2,\r\n  RejectSecurityProposal = 5,\r\n  CannotMatchSelectionCriteria = 6\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicates whether or not message is being sent as a result *\r\n* of a subscription request or not.                          *\r\n**************************************************************\r\n*/\r\nexport enum UnsolicitedIndicator {\r\n  MessageIsBeingSentUnsolicited = 'Y',\r\n  MessageIsBeingSentAsAResultOfAPriorRequest = 'N'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Identifies the trading status applicable to the transaction *\r\n***************************************************************\r\n*/\r\nexport enum SecurityTradingStatus {\r\n  OpeningDelay = 1,\r\n  TradingHalt = 2,\r\n  Resume = 3,\r\n  NoOpen = 4,\r\n  PriceIndication = 5,\r\n  TradingRangeIndication = 6,\r\n  MarketImbalanceBuy = 7,\r\n  MarketImbalanceSell = 8,\r\n  MarketOnCloseImbalanceBuy = 9,\r\n  MarketOnCloseImbalanceSell = 10,\r\n  NoMarketImbalance = 12,\r\n  NoMarketOnCloseImbalance = 13,\r\n  ItsPreOpening = 14,\r\n  NewPriceIndication = 15,\r\n  TradeDisseminationTime = 16,\r\n  ReadyToTrade = 17,\r\n  NotAvailableForTrading = 18,\r\n  NotTradedOnThisMarket = 19,\r\n  UnknownOrInvalid = 20,\r\n  PreOpen = 21,\r\n  OpeningRotation = 22,\r\n  FastMarket = 23\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Denotes the reason for the Opening Delay or Trading Halt *\r\n************************************************************\r\n*/\r\nexport enum HaltReason {\r\n  OrderImbalance = 'I',\r\n  EquipmentChangeover = 'X',\r\n  NewsPending = 'P',\r\n  NewsDissemination = 'D',\r\n  OrderInflux = 'E',\r\n  AdditionalInformation = 'M'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Indicates whether or not the halt was due to Common Stock *\r\n* trading being halted.                                     *\r\n*************************************************************\r\n*/\r\nexport enum InViewOfCommon {\r\n  HaltWasDueToCommonStockBeingHalted = 'Y',\r\n  HaltWasNotRelatedToAHaltOfTheCommonStock = 'N'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates whether or not the halt was due to the Related *\r\n* Security being halted.                                   *\r\n************************************************************\r\n*/\r\nexport enum DueToRelated {\r\n  RelatedToSecurityHalt = 'Y',\r\n  NotRelatedToSecurityHalt = 'N'\r\n}\r\n\r\n/*\r\n*************************************\r\n* Identifies the type of adjustment *\r\n*************************************\r\n*/\r\nexport enum Adjustment {\r\n  Cancel = 1,\r\n  Error = 2,\r\n  Correction = 3\r\n}\r\n\r\n/*\r\n*********************\r\n* Method of trading *\r\n*********************\r\n*/\r\nexport enum TradSesMethod {\r\n  Electronic = 1,\r\n  OpenOutcry = 2,\r\n  TwoParty = 3\r\n}\r\n\r\n/*\r\n************************\r\n* Trading Session Mode *\r\n************************\r\n*/\r\nexport enum TradSesMode {\r\n  Testing = 1,\r\n  Simulated = 2,\r\n  Production = 3\r\n}\r\n\r\n/*\r\n********************************\r\n* State of the trading session *\r\n********************************\r\n*/\r\nexport enum TradSesStatus {\r\n  Unknown = 0,\r\n  Halted = 1,\r\n  Open = 2,\r\n  Closed = 3,\r\n  PreOpen = 4,\r\n  PreClose = 5,\r\n  RequestRejected = 6\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Type of message encoding (non-ASCII (non-English) *\r\n* characters) used in a message\u0019s \"Encoded\" fields. *\r\n*****************************************************\r\n*/\r\nexport enum MessageEncoding {\r\n  Iso2022Jp = 'ISO-2022-JP',\r\n  Eucjp = 'EUC-JP',\r\n  ShiftJis = 'Shift_JIS',\r\n  Utf8 = 'UTF-8'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Code to identify reason for a session-level Reject message *\r\n**************************************************************\r\n*/\r\nexport enum SessionRejectReason {\r\n  InvalidTagNumber = 0,\r\n  RequiredTagMissing = 1,\r\n  TagNotDefinedForThisMessageType = 2,\r\n  UndefinedTag = 3,\r\n  TagSpecifiedWithoutAValue = 4,\r\n  ValueIsIncorrect = 5,\r\n  IncorrectDataFormatForValue = 6,\r\n  DecryptionProblem = 7,\r\n  SignatureProblem = 8,\r\n  CompIdProblem = 9,\r\n  SendingTimeAccuracyProblem = 10,\r\n  InvalidMsgType = 11,\r\n  XmlValidationError = 12,\r\n  TagAppearsMoreThanOnce = 13,\r\n  TagSpecifiedOutOfRequiredOrder = 14,\r\n  RepeatingGroupFieldsOutOfOrder = 15,\r\n  IncorrectNumInGroupCountForRepeatingGroup = 16,\r\n  Non = 17,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Identifies the Bid Request message type *\r\n*******************************************\r\n*/\r\nexport enum BidRequestTransType {\r\n  New = 'N',\r\n  Cancel = 'C'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Indicates whether or not the order was solicited. *\r\n*****************************************************\r\n*/\r\nexport enum SolicitedFlag {\r\n  WasSolicited = 'Y',\r\n  WasNotSolicited = 'N'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Code to identify reason for an ExecutionRpt message sent *\r\n* with ExecType=Restated or used when communicating an     *\r\n* unsolicited cancel.                                      *\r\n************************************************************\r\n*/\r\nexport enum ExecRestatementReason {\r\n  GtCorporateAction = 0,\r\n  GtRenewal = 1,\r\n  VerbalChange = 2,\r\n  RepricingOfOrder = 3,\r\n  BrokerOption = 4,\r\n  PartialDeclineOfOrderQty = 5,\r\n  CancelOnTradingHalt = 6,\r\n  CancelOnSystemFailure = 7,\r\n  Market = 8,\r\n  Canceled = 9,\r\n  WarehouseRecap = 10,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Code to identify reason for a Business Message Reject *\r\n* message                                               *\r\n*********************************************************\r\n*/\r\nexport enum BusinessRejectReason {\r\n  Other = 0,\r\n  UnknownId = 1,\r\n  UnknownSecurity = 2,\r\n  UnsupportedMessageType = 3,\r\n  ApplicationNotAvailable = 4,\r\n  ConditionallyRequiredFieldMissing = 5,\r\n  NotAuthorized = 6,\r\n  DeliverToFirmNotAvailableAtThisTime = 7\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Specifies the direction of the messsage *\r\n*******************************************\r\n*/\r\nexport enum MsgDirection {\r\n  Send = 'S',\r\n  Receive = 'R'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Code to identify the price a DiscretionOffsetValue (389) is *\r\n* related to and should be mathematically added to            *\r\n***************************************************************\r\n*/\r\nexport enum DiscretionInst {\r\n  RelatedToDisplayedPrice = '0',\r\n  RelatedToMarketPrice = '1',\r\n  RelatedToPrimaryPrice = '2',\r\n  RelatedToLocalPrimaryPrice = '3',\r\n  RelatedToMidpointPrice = '4',\r\n  RelatedToLastTradePrice = '5',\r\n  RelatedToVwap = '6'\r\n}\r\n\r\n/*\r\n********************************************\r\n* Code to identify the type of Bid Request *\r\n********************************************\r\n*/\r\nexport enum BidType {\r\n  NonDisclosed = 1,\r\n  Disclosed = 2,\r\n  NoBiddingProcess = 3\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Code to identify the type of BidDescriptor (400) *\r\n****************************************************\r\n*/\r\nexport enum BidDescriptorType {\r\n  Sector = 1,\r\n  Country = 2,\r\n  Index = 3\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Code to identify which \"SideValue\" the value refers to.     *\r\n* SideValue and SideValue2 are used as opposed to Buy or Sell *\r\n* so that the basket can be quoted either way as Buy or Sell. *\r\n***************************************************************\r\n*/\r\nexport enum SideValueInd {\r\n  SideValue1 = 1,\r\n  SideValue2 = 2\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Code to identify the type of liquidity indicator *\r\n****************************************************\r\n*/\r\nexport enum LiquidityIndType {\r\n  FiveDayMovingAverage = 1,\r\n  TwentyDayMovingAverage = 2,\r\n  NormalMarketSize = 3,\r\n  Other = 4\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Indicates whether or not to exchange for phsyical. *\r\n******************************************************\r\n*/\r\nexport enum ExchangeForPhysical {\r\n  True = 'Y',\r\n  False = 'N'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Code to identify the desired frequency of progress reports *\r\n**************************************************************\r\n*/\r\nexport enum ProgRptReqs {\r\n  BuySideRequests = 1,\r\n  SellSideSends = 2,\r\n  RealTimeExecutionReports = 3\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Code to represent whether value is net (inclusive of tax) or *\r\n* gross                                                        *\r\n****************************************************************\r\n*/\r\nexport enum IncTaxInd {\r\n  Net = 1,\r\n  Gross = 2\r\n}\r\n\r\n/*\r\n***************************************\r\n* Code to represent the type of trade *\r\n***************************************\r\n*/\r\nexport enum BidTradeType {\r\n  RiskTrade = 'R',\r\n  VwapGuarantee = 'G',\r\n  Agency = 'A',\r\n  GuaranteedClose = 'J'\r\n}\r\n\r\n/*\r\n******************************************\r\n* Code to represent the basis price type *\r\n******************************************\r\n*/\r\nexport enum BasisPxType {\r\n  ClosingPriceAtMorningSession = '2',\r\n  ClosingPrice = '3',\r\n  CurrentPrice = '4',\r\n  Sq = '5',\r\n  VwapThroughADay = '6',\r\n  VwapThroughAMorningSession = '7',\r\n  VwapThroughAnAfternoonSession = '8',\r\n  VwapThroughADayExcept = '9',\r\n  VwapThroughAMorningSessionExcept = 'A',\r\n  VwapThroughAnAfternoonSessionExcept = 'B',\r\n  Strike = 'C',\r\n  Open = 'D',\r\n  Others = 'Z'\r\n}\r\n\r\n/*\r\n************************************\r\n* Code to represent the price type *\r\n************************************\r\n*/\r\nexport enum PriceType {\r\n  Percentage = 1,\r\n  PerUnit = 2,\r\n  FixedAmount = 3,\r\n  Discount = 4,\r\n  Premium = 5,\r\n  Spread = 6,\r\n  TedPrice = 7,\r\n  TedYield = 8,\r\n  Yield = 9,\r\n  FixedCabinetTradePrice = 10,\r\n  VariableCabinetTradePrice = 11\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Code to identify whether to book out executions on a *\r\n* part-filled GT order on the day of execution or to   *\r\n* accumulate                                           *\r\n********************************************************\r\n*/\r\nexport enum GTBookingInst {\r\n  BookOutAllTradesOnDayOfExecution = 0,\r\n  AccumulateUntilFilledOrExpired = 1,\r\n  AccumulateUntilVerballlyNotifiedOtherwise = 2\r\n}\r\n\r\n/*\r\n*************************************\r\n* Code to represent the status type *\r\n*************************************\r\n*/\r\nexport enum ListStatusType {\r\n  Ack = 1,\r\n  Response = 2,\r\n  Timed = 3,\r\n  ExecStarted = 4,\r\n  AllDone = 5,\r\n  Alert = 6\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Code to represent whether value is net (inclusive of tax) or *\r\n* gross                                                        *\r\n****************************************************************\r\n*/\r\nexport enum NetGrossInd {\r\n  Net = 1,\r\n  Gross = 2\r\n}\r\n\r\n/*\r\n************************************************\r\n* Code to represent the status of a list order *\r\n************************************************\r\n*/\r\nexport enum ListOrderStatus {\r\n  InBiddingProcess = 1,\r\n  ReceivedForExecution = 2,\r\n  Executing = 3,\r\n  Cancelling = 4,\r\n  Alert = 5,\r\n  AllDone = 6,\r\n  Reject = 7\r\n}\r\n\r\n/*\r\n********************************************\r\n* Identifies the type of ListExecInst (69) *\r\n********************************************\r\n*/\r\nexport enum ListExecInstType {\r\n  Immediate = '1',\r\n  WaitForInstruction = '2',\r\n  SellDriven = '3',\r\n  BuyDrivenCashTopUp = '4',\r\n  BuyDrivenCashWithdraw = '5'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Identifies the type of request that a Cancel Reject is in *\r\n* response to                                               *\r\n*************************************************************\r\n*/\r\nexport enum CxlRejResponseTo {\r\n  OrderCancelRequest = '1',\r\n  OrderCancel = '2'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Used to indicate what an Execution Report represents (e.g. *\r\n* used with multi-leg securities, such as option strategies, *\r\n* spreads, etc.).                                            *\r\n**************************************************************\r\n*/\r\nexport enum MultiLegReportingType {\r\n  SingleSecurity = '1',\r\n  IndividualLegOfAMultiLegSecurity = '2',\r\n  MultiLegSecurity = '3'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Identifies class or source of the PartyID (448) value.    *\r\n* Required if PartyID is specified. Note: applicable values *\r\n* depend upon PartyRole (452) specified.                    *\r\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"     *\r\n*************************************************************\r\n*/\r\nexport enum PartyIDSource {\r\n  KoreanInvestorId = '1',\r\n  TaiwaneseForeignInvestorId = '2',\r\n  TaiwaneseTradingAcct = '3',\r\n  MalaysianCentralDepository = '4',\r\n  ChineseInvestorId = '5',\r\n  UkNationalInsuranceOrPensionNumber = '6',\r\n  UsSocialSecurityNumber = '7',\r\n  UsEmployerOrTaxIdNumber = '8',\r\n  AustralianBusinessNumber = '9',\r\n  Bic = 'B',\r\n  GeneralIdentifier = 'C',\r\n  Proprietary = 'D',\r\n  IsoCountryCode = 'E',\r\n  SettlementEntityLocation = 'F',\r\n  Mic = 'G',\r\n  CsdParticipant = 'H',\r\n  AustralianTaxFileNumber = 'A',\r\n  IsitcAcronym = 'I'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Identifies the type or role of the PartyID (448) specified. *\r\n* See \"Appendix 6-G \u0013 Use of <Parties> Component Block\"       *\r\n***************************************************************\r\n*/\r\nexport enum PartyRole {\r\n  ExecutingFirm = 1,\r\n  BrokerOfCredit = 2,\r\n  ClientId = 3,\r\n  ClearingFirm = 4,\r\n  InvestorId = 5,\r\n  IntroducingFirm = 6,\r\n  EnteringFirm = 7,\r\n  Locate = 8,\r\n  FundManagerClientId = 9,\r\n  SettlementLocation = 10,\r\n  OrderOriginationTrader = 11,\r\n  ExecutingTrader = 12,\r\n  OrderOriginationFirm = 13,\r\n  GiveupClearingFirm = 14,\r\n  CorrespondantClearingFirm = 15,\r\n  ExecutingSystem = 16,\r\n  ContraFirm = 17,\r\n  ContraClearingFirm = 18,\r\n  SponsoringFirm = 19,\r\n  UnderlyingContraFirm = 20,\r\n  ClearingOrganization = 21,\r\n  Exchange = 22,\r\n  CustomerAccount = 24,\r\n  CorrespondentClearingOrganization = 25,\r\n  CorrespondentBroker = 26,\r\n  Buyer = 27,\r\n  Custodian = 28,\r\n  Intermediary = 29,\r\n  Agent = 30,\r\n  SubCustodian = 31,\r\n  Beneficiary = 32,\r\n  InterestedParty = 33,\r\n  RegulatoryBody = 34,\r\n  LiquidityProvider = 35,\r\n  EnteringTrader = 36,\r\n  ContraTrader = 37,\r\n  PositionAccount = 38\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates the type of product the security is associated *\r\n* with. See also the CFICode (46) and SecurityType (67)    *\r\n* fields.                                                  *\r\n************************************************************\r\n*/\r\nexport enum Product {\r\n  Agency = 1,\r\n  Commodity = 2,\r\n  Corporate = 3,\r\n  Currency = 4,\r\n  Equity = 5,\r\n  Government = 6,\r\n  Index = 7,\r\n  Loan = 8,\r\n  Moneymarket = 9,\r\n  Mortgage = 10,\r\n  Municipal = 11,\r\n  Other = 12,\r\n  Financing = 13\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates whether or not this FIX Session is a \"test\" vs.   *\r\n* \"production\" connection. Useful for preventing \"accidents\". *\r\n***************************************************************\r\n*/\r\nexport enum TestMessageIndicator {\r\n  True = 'Y',\r\n  Fales = 'N'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Specifies which direction to round For CIV \u0013 indicates       *\r\n* whether or not the quantity of shares/units is to be rounded *\r\n* and in which direction where CashOrdQty (52) or (for CIV     *\r\n* only) OrderPercent (56) are specified on an order.           *\r\n* The default is for rounding to be at the discretion of the   *\r\n* executing broker or fund manager.                            *\r\n* e.g. for an order specifying CashOrdQty or OrderPercent if   *\r\n* the calculated number of shares/units was 325.76 and         *\r\n* RoundingModulus (469) was 0 \u0013 \"round down\" would give 320    *\r\n* units, \"round up\" would give 330 units and \"round to         *\r\n* nearest\" would give 320 units.                               *\r\n****************************************************************\r\n*/\r\nexport enum RoundingDirection {\r\n  RoundToNearest = '0',\r\n  RoundDown = '1',\r\n  RoundUp = '2'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* A code identifying the payment method for a (fractional)    *\r\n* distribution.                                               *\r\n* 13 through 998 are reserved for future use                  *\r\n* Values above 000 are available for use by private agreement *\r\n* among counterparties                                        *\r\n***************************************************************\r\n*/\r\nexport enum DistribPaymentMethod {\r\n  Crest = 1,\r\n  Nscc = 2,\r\n  Euroclear = 3,\r\n  Clearstream = 4,\r\n  Cheque = 5,\r\n  TelegraphicTransfer = 6,\r\n  FedWire = 7,\r\n  DirectCredit = 8,\r\n  AchCredit = 9,\r\n  Bpay = 10,\r\n  HighValueClearingSystemHvacs = 11,\r\n  ReinvestInFund = 12\r\n}\r\n\r\n/*\r\n******************************************************\r\n* For CIV \u0013 A one character code identifying whether *\r\n* Cancellation rights/Cooling off period applies     *\r\n******************************************************\r\n*/\r\nexport enum CancellationRights {\r\n  Yes = 'Y',\r\n  NoExecutionOnly = 'N',\r\n  NoWaiverAgreement = 'M',\r\n  NoInstitutional = 'O'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* A one character code identifying Money laundering status *\r\n************************************************************\r\n*/\r\nexport enum MoneyLaunderingStatus {\r\n  ExemptBelowLimit = '1',\r\n  ExemptMoneyType = '2',\r\n  ExemptAuthorised = '3',\r\n  Passed = 'Y',\r\n  NotChecked = 'N'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* For CIV - Identifies how the execution price LastPx (3) was *\r\n* calculated from the fund unit/share price(s) calculated at  *\r\n* the fund valuation point                                    *\r\n***************************************************************\r\n*/\r\nexport enum ExecPriceType {\r\n  BidPrice = 'B',\r\n  CreationPrice = 'C',\r\n  CreationPricePlusAdjustmentPercent = 'D',\r\n  CreationPricePlusAdjustmentAmount = 'E',\r\n  OfferPrice = 'O',\r\n  OfferPriceMinusAdjustmentPercent = 'P',\r\n  OfferPriceMinusAdjustmentAmount = 'Q',\r\n  SinglePrice = 'S'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* A code identifying the Settlement payment method.           *\r\n* 16 through 998 are reserved for future use                  *\r\n* Values above 000 are available for use by private agreement *\r\n* among counterparties                                        *\r\n***************************************************************\r\n*/\r\nexport enum PaymentMethod {\r\n  Crest = 1,\r\n  Nscc = 2,\r\n  Euroclear = 3,\r\n  Clearstream = 4,\r\n  Cheque = 5,\r\n  TelegraphicTransfer = 6,\r\n  FedWire = 7,\r\n  DebitCard = 8,\r\n  DirectDebit = 9,\r\n  DirectCredit = 10,\r\n  CreditCard = 11,\r\n  AchDebit = 12,\r\n  AchCredit = 13,\r\n  Bpay = 14,\r\n  HighValueClearingSystem = 15\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* For CIV - a code identifying the type of tax exempt account *\r\n* in which purchased shares/units are to be held              *\r\n***************************************************************\r\n*/\r\nexport enum TaxAdvantageType {\r\n  None = 0,\r\n  MaxiIsa = 1,\r\n  Tessa = 2,\r\n  MiniCashIsa = 3,\r\n  MiniStocksAndSharesIsa = 4,\r\n  MiniInsuranceIsa = 5,\r\n  CurrentYearPayment = 6,\r\n  PriorYearPayment = 7,\r\n  AssetTransfer = 8,\r\n  EmployeePriorYear = 9,\r\n  EmployeeCurrentYear = 10,\r\n  EmployerPriorYear = 11,\r\n  EmployerCurrentYear = 12,\r\n  NonFundPrototypeIra = 13,\r\n  NonFundQualifiedPlan = 14,\r\n  DefinedContributionPlan = 15,\r\n  Ira = 16,\r\n  IraRollover = 17,\r\n  Keogh = 18,\r\n  ProfitSharingPlan = 19,\r\n  Us401K = 20,\r\n  SelfDirectedIra = 21,\r\n  Us403B = 22,\r\n  Us457 = 23,\r\n  RothIraPrototype = 24,\r\n  RothIraNonPrototype = 25,\r\n  RothConversionIraPrototype = 26,\r\n  RothConversionIraNonPrototype = 27,\r\n  EducationIraPrototype = 28,\r\n  EducationIraNonPrototype = 29\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* A one character code identifying whether the Fund based *\r\n* renewal commission is to be waived.                     *\r\n***********************************************************\r\n*/\r\nexport enum FundRenewWaiv {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Registration status as returned by the broker or (for CIV) *\r\n* the fund manager                                           *\r\n**************************************************************\r\n*/\r\nexport enum RegistStatus {\r\n  Accepted = 'A',\r\n  Rejected = 'R',\r\n  Held = 'H',\r\n  Reminder = 'N'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Reason(s) why Registration Instructions has been rejected. *\r\n* The reason may be further amplified in the                 *\r\n* RegistRejReasonCode field.                                 *\r\n* Possible values of reason code include:                    *\r\n**************************************************************\r\n*/\r\nexport enum RegistRejReasonCode {\r\n  InvalidAccountType = 1,\r\n  InvalidTaxExemptType = 2,\r\n  InvalidOwnershipType = 3,\r\n  NoRegDetails = 4,\r\n  InvalidRegSeqNo = 5,\r\n  InvalidRegDetails = 6,\r\n  InvalidMailingDetails = 7,\r\n  InvalidMailingInstructions = 8,\r\n  InvalidInvestorId = 9,\r\n  InvalidInvestorIdSource = 10,\r\n  InvalidDateOfBirth = 11,\r\n  InvalidCountry = 12,\r\n  InvalidDistribInstns = 13,\r\n  InvalidPercentage = 14,\r\n  InvalidPaymentMethod = 15,\r\n  InvalidAccountName = 16,\r\n  InvalidAgentCode = 17,\r\n  InvalidAccountNum = 18,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Identifies Registration Instructions transaction type *\r\n*********************************************************\r\n*/\r\nexport enum RegistTransType {\r\n  New = '0',\r\n  Replace = '1',\r\n  Cancel = '2'\r\n}\r\n\r\n/*\r\n**************************************************\r\n* The relationship between Registration parties. *\r\n**************************************************\r\n*/\r\nexport enum OwnershipType {\r\n  JointTrustees = '2',\r\n  JointInvestors = 'J',\r\n  TenantsInCommon = 'T'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Type of ContAmtValue (520).                                *\r\n* NOTE That Commission Amount / % in Contract Amounts is the *\r\n* commission actually charged, rather than the commission    *\r\n* instructions given in Fields 2/3.                          *\r\n**************************************************************\r\n*/\r\nexport enum ContAmtType {\r\n  CommissionAmount = 1,\r\n  CommissionPercent = 2,\r\n  InitialChargeAmount = 3,\r\n  InitialChargePercent = 4,\r\n  DiscountAmount = 5,\r\n  DiscountPercent = 6,\r\n  DilutionLevyAmount = 7,\r\n  DilutionLevyPercent = 8,\r\n  ExitChargeAmount = 9,\r\n  ExitChargePercent = 10,\r\n  FundBasedRenewalCommissionPercent = 11,\r\n  ProjectedFundValue = 12,\r\n  FundBasedRenewalCommissionOnOrder = 13,\r\n  FundBasedRenewalCommissionOnFund = 14,\r\n  NetSettlementAmount = 15\r\n}\r\n\r\n/*\r\n********************************\r\n* Identifies the type of owner *\r\n********************************\r\n*/\r\nexport enum OwnerType {\r\n  IndividualInvestor = 1,\r\n  PublicCompany = 2,\r\n  PrivateCompany = 3,\r\n  IndividualTrustee = 4,\r\n  CompanyTrustee = 5,\r\n  PensionPlan = 6,\r\n  CustodianUnderGiftsToMinorsAct = 7,\r\n  Trusts = 8,\r\n  Fiduciaries = 9,\r\n  NetworkingSubAccount = 10,\r\n  NonProfitOrganization = 11,\r\n  CorporateBody = 12,\r\n  Nominee = 13\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Designates the capacity of the firm placing the order       *\r\n* (as of FIX 4.3, this field replaced Rule80A (tag 47) --used *\r\n* in conjunction with OrderRestrictions (529) field)          *\r\n* (see Volume : \"Glossary\" for value definitions)             *\r\n***************************************************************\r\n*/\r\nexport enum OrderCapacity {\r\n  Agency = 'A',\r\n  Proprietary = 'G',\r\n  Individual = 'I',\r\n  Principal = 'P',\r\n  RisklessPrincipal = 'R',\r\n  AgentForOtherMember = 'W'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Restrictions associated with an order. If more than one *\r\n* restriction is applicable to an order, this field can   *\r\n* contain multiple instructions separated by space.       *\r\n***********************************************************\r\n*/\r\nexport enum OrderRestrictions {\r\n  ProgramTrade = '1',\r\n  IndexArbitrage = '2',\r\n  NonIndexArbitrage = '3',\r\n  CompetingMarketMaker = '4',\r\n  ActingAsMarketMakerOrSpecialistInSecurity = '5',\r\n  ActingAsMarketMakerOrSpecialistInUnderlying = '6',\r\n  ForeignEntity = '7',\r\n  ExternalMarketParticipant = '8',\r\n  ExternalInterConnectedMarketLinkage = '9',\r\n  RisklessArbitrage = 'A'\r\n}\r\n\r\n/*\r\n************************************************\r\n* Specifies scope of Order Mass Cancel Request *\r\n************************************************\r\n*/\r\nexport enum MassCancelRequestType {\r\n  CancelOrdersForASecurity = '1',\r\n  CancelOrdersForAnUnderlyingSecurity = '2',\r\n  CancelOrdersForAProduct = '3',\r\n  CancelOrdersForAcfiCode = '4',\r\n  CancelOrdersForASecurityType = '5',\r\n  CancelOrdersForATradingSession = '6',\r\n  CancelAllOrders = '7'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Specifies the action taken by counterparty order handling *\r\n* system as a result of the Order Mass Cancel Request       *\r\n*************************************************************\r\n*/\r\nexport enum MassCancelResponse {\r\n  CancelRequestRejected = '0',\r\n  CancelOrdersForASecurity = '1',\r\n  CancelOrdersForAnUnderlyingSecurity = '2',\r\n  CancelOrdersForAProduct = '3',\r\n  CancelOrdersForAcfiCode = '4',\r\n  CancelOrdersForASecurityType = '5',\r\n  CancelOrdersForATradingSession = '6',\r\n  CancelAllOrders = '7'\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Reason Order Mass Cancel Request was rejected *\r\n*************************************************\r\n*/\r\nexport enum MassCancelRejectReason {\r\n  MassCancelNotSupported = '0',\r\n  InvalidOrUnknownSecurity = '1',\r\n  InvalidOrUnkownUnderlyingSecurity = '2',\r\n  InvalidOrUnknownProduct = '3',\r\n  InvalidOrUnknownCfiCode = '4',\r\n  InvalidOrUnknownSecurityType = '5',\r\n  InvalidOrUnknownTradingSession = '6',\r\n  Other = '99'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Identifies the type of quote.                                *\r\n* An indicative quote is used to inform a counterparty of a    *\r\n* market. An indicative quote does not result directly in a    *\r\n* trade.                                                       *\r\n* A tradeable quote is submitted to a market and will result   *\r\n* directly in a trade against other orders and quotes in a     *\r\n* market.                                                      *\r\n* A restricted tradeable quote is submitted to a market and    *\r\n* within a certain restriction (possibly based upon price or   *\r\n* quantity) will automatically trade against orders. Order     *\r\n* that do not comply with restrictions are sent to the quote   *\r\n* issuer who can choose to accept or decline the order.        *\r\n* A counter quote is used in the negotiation model. See Volume *\r\n* 7 \u0013 Product: Fixed Income for example usage.                 *\r\n****************************************************************\r\n*/\r\nexport enum QuoteType {\r\n  Indicative = 0,\r\n  Tradeable = 1,\r\n  RestrictedTradeable = 2,\r\n  Counter = 3\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Identifies whether an order is a margin order or a           *\r\n* non-margin order. This is primarily used when sending orders *\r\n* to Japanese exchanges to indicate sell margin or buy to      *\r\n* cover. The same tag could be assigned also by buy-side to    *\r\n* indicate the intent to sell or buy margin and the sell-side  *\r\n* to accept or reject (base on some validation criteria) the   *\r\n* margin request.                                              *\r\n****************************************************************\r\n*/\r\nexport enum CashMargin {\r\n  Cash = '1',\r\n  MarginOpen = '2',\r\n  MarginClose = '3'\r\n}\r\n\r\n/*\r\n***************************************\r\n* Defines the scope of a data element *\r\n***************************************\r\n*/\r\nexport enum Scope {\r\n  LocalMarket = '1',\r\n  National = '2',\r\n  Global = '3'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Defines how a server handles distribution of a truncated *\r\n* book. Defaults to broker option.                         *\r\n************************************************************\r\n*/\r\nexport enum MDImplicitDelete {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Type of cross being submitted to a market *\r\n*********************************************\r\n*/\r\nexport enum CrossType {\r\n  CrossAon = 1,\r\n  CrossIoc = 2,\r\n  CrossOneSide = 3,\r\n  CrossSamePrice = 4\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicates if one side or the other of a cross order should *\r\n* be prioritized.                                            *\r\n* The definition of prioritization is left to the market. In *\r\n* some markets prioritization means which side of the cross  *\r\n* order is applied to the market first. In other markets \u0013   *\r\n* prioritization may mean that the prioritized side is fully *\r\n* executed (sometimes referred to as the side being          *\r\n* protected).                                                *\r\n**************************************************************\r\n*/\r\nexport enum CrossPrioritization {\r\n  None = 0,\r\n  BuySideIsPrioritized = 1,\r\n  SellSideIsPrioritized = 2\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Number of Side repeating group instances. *\r\n*********************************************\r\n*/\r\nexport enum NoSides {\r\n  OneSide = 1,\r\n  BothSides = 2\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Identifies the type/criteria of Security List Request *\r\n*********************************************************\r\n*/\r\nexport enum SecurityListRequestType {\r\n  Symbol = 0,\r\n  SecurityTypeAnd = 1,\r\n  Product = 2,\r\n  TradingSessionId = 3,\r\n  AllSecurities = 4\r\n}\r\n\r\n/*\r\n******************************************************\r\n* The results returned to a Security Request message *\r\n******************************************************\r\n*/\r\nexport enum SecurityRequestResult {\r\n  ValidRequest = 0,\r\n  InvalidOrUnsupportedRequest = 1,\r\n  NoInstrumentsFound = 2,\r\n  NotAuthorizedToRetrieveInstrumentData = 3,\r\n  InstrumentDataTemporarilyUnavailable = 4,\r\n  RequestForInstrumentDataNotSupported = 5\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates the method of execution reporting requested by *\r\n* issuer of the order                                      *\r\n************************************************************\r\n*/\r\nexport enum MultiLegRptTypeReq {\r\n  ReportByMulitlegSecurityOnly = 0,\r\n  ReportByMultilegSecurityAndInstrumentLegs = 1,\r\n  ReportByInstrumentLegsOnly = 2\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Indicates the reason a Trading Session Status Request was *\r\n* rejected                                                  *\r\n*************************************************************\r\n*/\r\nexport enum TradSesStatusRejReason {\r\n  UnknownOrInvalidTradingSessionId = 1,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n********************************\r\n* Type of Trade Capture Report *\r\n********************************\r\n*/\r\nexport enum TradeRequestType {\r\n  AllTrades = 0,\r\n  MatchedTradesMatchingCriteria = 1,\r\n  UnmatchedTradesThatMatchCriteria = 2,\r\n  UnreportedTradesThatMatchCriteria = 3,\r\n  AdvisoriesThatMatchCriteria = 4\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Indicates if the trade capture report was previously *\r\n* reported to the counterparty                         *\r\n********************************************************\r\n*/\r\nexport enum PreviouslyReported {\r\n  PerviouslyReportedToCounterparty = 'Y',\r\n  NotReportedToCounterparty = 'N'\r\n}\r\n\r\n/*\r\n********************************************************\r\n* The status of this trade with respect to matching or *\r\n* comparison                                           *\r\n********************************************************\r\n*/\r\nexport enum MatchStatus {\r\n  Compared = '0',\r\n  Uncompared = '1',\r\n  AdvisoryOrAlert = '2'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* The point in the matching process at which this trade was *\r\n* matched                                                   *\r\n*************************************************************\r\n*/\r\nexport enum MatchType {\r\n  ExactMatchPlus4BadgesExecTime = 'A1',\r\n  ExactMatchPlus4Badges = 'A2',\r\n  ExactMatchPlus2BadgesExecTime = 'A3',\r\n  ExactMatchPlus2Badges = 'A4',\r\n  ExactMatchPlusExecTime = 'A5',\r\n  StampedAdvisoriesOrSpecialistAccepts = 'AQ',\r\n  A1ExactMatchSummarizedQuantity = 'S1',\r\n  A2ExactMatchSummarizedQuantity = 'S2',\r\n  A3ExactMatchSummarizedQuantity = 'S3',\r\n  A4ExactMatchSummarizedQuantity = 'S4',\r\n  A5ExactMatchSummarizedQuantity = 'S5',\r\n  ExactMatchMinusBadgesTimes = 'M1',\r\n  SummarizedMatchMinusBadgesTimes = 'M2',\r\n  OcsLockedIn = 'MT',\r\n  ActAcceptedTrade = 'M3',\r\n  ActDefaultTrade = 'M4',\r\n  ActDefaultAfterM2 = 'M5',\r\n  Actm6Match = 'M6'\r\n}\r\n\r\n/*\r\n*********************************************\r\n* This trade is to be treated as an odd lot *\r\n*********************************************\r\n*/\r\nexport enum OddLot {\r\n  TreatAsOddLot = 'Y',\r\n  TreatAsRoundLot = 'N'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Eligibility of this trade for clearing and central *\r\n* counterparty processing                            *\r\n******************************************************\r\n*/\r\nexport enum ClearingInstruction {\r\n  ProcessNormally = 0,\r\n  ExcludeFromAllNetting = 1,\r\n  BilateralNettingOnly = 2,\r\n  ExClearing = 3,\r\n  SpecialTrade = 4,\r\n  MultilateralNetting = 5,\r\n  ClearAgainstCentralCounterparty = 6,\r\n  ExcludeFromCentralCounterparty = 7,\r\n  ManualMode = 8,\r\n  AutomaticPostingMode = 9,\r\n  AutomaticGiveUpMode = 10,\r\n  QualifiedServiceRepresentativeQsr = 11,\r\n  CustomerTrade = 12,\r\n  SelfClearing = 13\r\n}\r\n\r\n/*\r\n********************************************\r\n* Type of account associated with an order *\r\n********************************************\r\n*/\r\nexport enum AccountType {\r\n  CarriedCustomerSide = 1,\r\n  CarriedNonCustomerSide = 2,\r\n  HouseTrader = 3,\r\n  FloorTrader = 4,\r\n  CarriedNonCustomerSideCrossMargined = 6,\r\n  HouseTraderCrossMargined = 7,\r\n  JointBackOfficeAccount = 8\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Capacity of customer placing the order                      *\r\n* Primarily used by futures exchanges to indicate the CTICode *\r\n* (customer type indicator) as required by the US CFTC        *\r\n* (Commodity Futures Trading Commission).                     *\r\n***************************************************************\r\n*/\r\nexport enum CustOrderCapacity {\r\n  MemberTradingForTheirOwnAccount = 1,\r\n  ClearingFirmTradingForItsProprietaryAccount = 2,\r\n  MemberTradingForAnotherMember = 3,\r\n  AllOther = 4\r\n}\r\n\r\n/*\r\n****************************\r\n* Mass Status Request Type *\r\n****************************\r\n*/\r\nexport enum MassStatusReqType {\r\n  StatusForOrdersForASecurity = 1,\r\n  StatusForOrdersForAnUnderlyingSecurity = 2,\r\n  StatusForOrdersForAProduct = 3,\r\n  StatusForOrdersForAcfiCode = 4,\r\n  StatusForOrdersForASecurityType = 5,\r\n  StatusForOrdersForATradingSession = 6,\r\n  StatusForAllOrders = 7,\r\n  StatusForOrdersForAPartyId = 8\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Indicates whether or not automatic booking can occur. *\r\n*********************************************************\r\n*/\r\nexport enum DayBookingInst {\r\n  Auto = '0',\r\n  SpeakWithOrderInitiatorBeforeBooking = '1',\r\n  Accumulate = '2'\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Indicates what constitutes a bookable unit. *\r\n***********************************************\r\n*/\r\nexport enum BookingUnit {\r\n  EachPartialExecutionIsABookableUnit = '0',\r\n  AggregatePartialExecutionsOnThisOrder = '1',\r\n  AggregateExecutionsForThisSymbol = '2'\r\n}\r\n\r\n/*\r\n******************************************\r\n* Indicates the method of preallocation. *\r\n******************************************\r\n*/\r\nexport enum PreallocMethod {\r\n  ProRata = '0',\r\n  DoNotProRata = '1'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Describes the specific type or purpose of an Allocation *\r\n* message (i.e. \"Buyside Calculated\")                     *\r\n***********************************************************\r\n*/\r\nexport enum AllocType {\r\n  Calculated = 1,\r\n  Preliminary = 2,\r\n  ReadyToBook = 5,\r\n  WarehouseInstruction = 7,\r\n  RequestToIntermediary = 8\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates type of fee being assessed of the customer for *\r\n* trade executions at an exchange. Applicable for futures  *\r\n* markets only at this time.                               *\r\n* (Values source CBOT, CME, NYBOT, and NYMEX):             *\r\n************************************************************\r\n*/\r\nexport enum ClearingFeeIndicator {\r\n  FirstYearDelegate = '1',\r\n  SecondYearDelegate = '2',\r\n  ThirdYearDelegate = '3',\r\n  FourthYearDelegate = '4',\r\n  FifthYearDelegate = '5',\r\n  SixthYearDelegate = '9',\r\n  CboeMember = 'B',\r\n  NonMemberAndCustomer = 'C',\r\n  EquityMemberAndClearingMember = 'E',\r\n  FullAndAssociateMember = 'F',\r\n  Firms106HAnd106J = 'H',\r\n  Gim = 'I',\r\n  Lessee106FEmployees = 'L',\r\n  AllOtherOwnershipTypes = 'M'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates if the order is currently being worked. Applicable *\r\n* only for OrdStatus = \"New\". For open outcry markets this     *\r\n* indicates that the order is being worked in the crowd. For   *\r\n* electronic markets it indicates that the order has           *\r\n* transitioned from a contingent order to a market order.      *\r\n****************************************************************\r\n*/\r\nexport enum WorkingIndicator {\r\n  Working = 'Y',\r\n  NotWorking = 'N'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Indicates if a Cancel/Replace has caused an order to lose *\r\n* book priority                                             *\r\n*************************************************************\r\n*/\r\nexport enum PriorityIndicator {\r\n  PriorityUnchanged = 0,\r\n  LostPriorityAsResultOfOrderChange = 1\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates that this message is to serve as the final and *\r\n* legal confirmation.                                      *\r\n************************************************************\r\n*/\r\nexport enum LegalConfirm {\r\n  LegalConfirm = 'Y',\r\n  DoesNotConsituteALegalConfirm = 'N'\r\n}\r\n\r\n/*\r\n******************************\r\n* Reason Quote was rejected: *\r\n******************************\r\n*/\r\nexport enum QuoteRequestRejectReason {\r\n  UnknownSymbol = 1,\r\n  Exchange = 2,\r\n  QuoteRequestExceedsLimit = 3,\r\n  TooLateToEnter = 4,\r\n  InvalidPrice = 5,\r\n  NotAuthorizedToRequestQuote = 6,\r\n  NoMatchForInquiry = 7,\r\n  NoMarketForInstrument = 8,\r\n  NoInventory = 9,\r\n  Pass = 10,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Used to identify the source of the Account (1) code. This is *\r\n* especially useful if the account is a new account that the   *\r\n* Respondent may not have setup yet in their system.           *\r\n****************************************************************\r\n*/\r\nexport enum AcctIDSource {\r\n  Bic = 1,\r\n  SidCode = 2,\r\n  Tfm = 3,\r\n  Omgeo = 4,\r\n  DtccCode = 5,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n**********************************************\r\n* Identifies the status of the Confirmation. *\r\n**********************************************\r\n*/\r\nexport enum ConfirmStatus {\r\n  Received = 1,\r\n  MismatchedAccount = 2,\r\n  MissingSettlementInstructions = 3,\r\n  Confirmed = 4,\r\n  RequestRejected = 5\r\n}\r\n\r\n/*\r\n************************************************\r\n* Identifies the Confirmation transaction type *\r\n************************************************\r\n*/\r\nexport enum ConfirmTransType {\r\n  New = 0,\r\n  Replace = 1,\r\n  Cancel = 2\r\n}\r\n\r\n/*\r\n***********************************\r\n* Identifies the form of delivery *\r\n***********************************\r\n*/\r\nexport enum DeliveryForm {\r\n  BookEntry = 1,\r\n  Bearer = 2\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* For Fixed Income, used instead of LegQty (687) or          *\r\n* LegOrderQty (685) to requests the respondent to calculate  *\r\n* the quantity based on the quantity on the opposite side of *\r\n* the swap.                                                  *\r\n**************************************************************\r\n*/\r\nexport enum LegSwapType {\r\n  ParForPar = 1,\r\n  ModifiedDuration = 2,\r\n  Risk = 4,\r\n  Proceeds = 5\r\n}\r\n\r\n/*\r\n***************************************************\r\n* Code to represent price type requested in Quote *\r\n***************************************************\r\n*/\r\nexport enum QuotePriceType {\r\n  Percent = 1,\r\n  PerShare = 2,\r\n  FixedAmount = 3,\r\n  Discount = 4,\r\n  Premium = 5,\r\n  Spread = 6,\r\n  TedPrice = 7,\r\n  TedYield = 8,\r\n  YieldSpread = 9,\r\n  Yield = 10\r\n}\r\n\r\n/*\r\n*****************************************\r\n* Identifies the type of Quote Response *\r\n*****************************************\r\n*/\r\nexport enum QuoteRespType {\r\n  Hit = 1,\r\n  Counter = 2,\r\n  Expired = 3,\r\n  Cover = 4,\r\n  DoneAway = 5,\r\n  Pass = 6\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Used to identify the type of quantity that is being returned *\r\n****************************************************************\r\n*/\r\nexport enum PosType {\r\n  TransactionQuantity = 'TQ',\r\n  IntraSpreadQty = 'IAS',\r\n  InterSpreadQty = 'IES',\r\n  EndOfDayQty = 'FIN',\r\n  StartOfDayQty = 'SOD',\r\n  OptionExerciseQty = 'EX',\r\n  OptionAssignment = 'AS',\r\n  TransactionFromExercise = 'TX',\r\n  TransactionFromAssignment = 'TA',\r\n  PitTradeQty = 'PIT',\r\n  TransferTradeQty = 'TRF',\r\n  ElectronicTradeQty = 'ETR',\r\n  AllocationTradeQty = 'ALC',\r\n  AdjustmentQty = 'PA',\r\n  AsOfTradeQty = 'ASF',\r\n  DeliveryQty = 'DLV',\r\n  TotalTransactionQty = 'TOT',\r\n  CrossMarginQty = 'XM',\r\n  IntegralSplit = 'SPL'\r\n}\r\n\r\n/*\r\n***************************\r\n* Status of this position *\r\n***************************\r\n*/\r\nexport enum PosQtyStatus {\r\n  Submitted = 0,\r\n  Accepted = 1,\r\n  Rejected = 2\r\n}\r\n\r\n/*\r\n***************************\r\n* Type of Position amount *\r\n***************************\r\n*/\r\nexport enum PosAmtType {\r\n  FinalMarkToMarketAmount = 'FMTM',\r\n  IncrementalMarkToMarketAmount = 'IMTM',\r\n  TradeVariationAmount = 'TVAR',\r\n  StartOfDayMarkToMarketAmount = 'SMTM',\r\n  PremiumAmount = 'PREM',\r\n  CashResidualAmount = 'CRES',\r\n  CashAmount = 'CASH',\r\n  ValueAdjustedAmount = 'VADJ'\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Identifies the type of position transaction *\r\n***********************************************\r\n*/\r\nexport enum PosTransType {\r\n  Exercise = 1,\r\n  DoNotExercise = 2,\r\n  PositionAdjustment = 3,\r\n  PositionChangeSubmission = 4,\r\n  Pledge = 5\r\n}\r\n\r\n/*\r\n**************************************\r\n* Maintenance Action to be performed *\r\n**************************************\r\n*/\r\nexport enum PosMaintAction {\r\n  New = 1,\r\n  Replace = 2,\r\n  Cancel = 3\r\n}\r\n\r\n/*\r\n********************************************\r\n* Identifies a specific settlement session *\r\n********************************************\r\n*/\r\nexport enum SettlSessID {\r\n  Intraday = 'ITD',\r\n  RegularTradingHours = 'RTH',\r\n  ElectronicTradingHours = 'ETH'\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Type of adjustment to be applied, used for PCS & PAJ *\r\n********************************************************\r\n*/\r\nexport enum AdjustmentType {\r\n  ProcessRequestAsMarginDisposition = 0,\r\n  DeltaPlus = 1,\r\n  DeltaMinus = 2,\r\n  Final = 3\r\n}\r\n\r\n/*\r\n******************************************\r\n* Status of Position Maintenance Request *\r\n******************************************\r\n*/\r\nexport enum PosMaintStatus {\r\n  Accepted = 0,\r\n  AcceptedWithWarnings = 1,\r\n  Rejected = 2,\r\n  Completed = 3,\r\n  CompletedWithWarnings = 4\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Result of Position Maintenance Request. *\r\n*******************************************\r\n*/\r\nexport enum PosMaintResult {\r\n  SuccessfulCompletion = 0,\r\n  Rejected = 1,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Unique identifier for the position maintenance request as *\r\n* assigned by the submitter                                 *\r\n*************************************************************\r\n*/\r\nexport enum PosReqType {\r\n  Positions = 0,\r\n  Trades = 1,\r\n  Exercises = 2,\r\n  Assignments = 3\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Identifies how the response to the request should be *\r\n* transmitted                                          *\r\n********************************************************\r\n*/\r\nexport enum ResponseTransportType {\r\n  Inband = 0,\r\n  OutOfBand = 1\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Result of Request for Position                            *\r\n* 4000+ Reserved and available for bi-laterally agreed upon *\r\n* user-defined values                                       *\r\n*************************************************************\r\n*/\r\nexport enum PosReqResult {\r\n  ValidRequest = 0,\r\n  InvalidOrUnsupportedRequest = 1,\r\n  NoPositionsFoundThatMatchCriteria = 2,\r\n  NotAuthorizedToRequestPositions = 3,\r\n  RequestForPositionNotSupported = 4,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n***********************************\r\n* Status of Request for Positions *\r\n***********************************\r\n*/\r\nexport enum PosReqStatus {\r\n  Completed = 0,\r\n  CompletedWithWarnings = 1,\r\n  Rejected = 2\r\n}\r\n\r\n/*\r\n****************************\r\n* Type of settlement price *\r\n****************************\r\n*/\r\nexport enum SettlPriceType {\r\n  Final = 1,\r\n  Theoretical = 2\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Method under which assignment was conducted *\r\n***********************************************\r\n*/\r\nexport enum AssignmentMethod {\r\n  Random = 'R',\r\n  ProRata = 'P'\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Exercise Method used to in performing assignment *\r\n****************************************************\r\n*/\r\nexport enum ExerciseMethod {\r\n  Automatic = 'A',\r\n  Manual = 'M'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Result of Trade Request                                   *\r\n* 4000+ Reserved and available for bi-laterally agreed upon *\r\n* user-defined values                                       *\r\n*************************************************************\r\n*/\r\nexport enum TradeRequestResult {\r\n  Successful = 0,\r\n  InvalidOrUnknownInstrument = 1,\r\n  InvalidTypeOfTradeRequested = 2,\r\n  InvalidParties = 3,\r\n  InvalidTransportTypeRequested = 4,\r\n  InvalidDestinationRequested = 5,\r\n  TradeRequestTypeNotSupported = 8,\r\n  NotAuthorized = 9,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n****************************\r\n* Status of Trade Request. *\r\n****************************\r\n*/\r\nexport enum TradeRequestStatus {\r\n  Accepted = 0,\r\n  Completed = 1,\r\n  Rejected = 2\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Reason Trade Capture Request was rejected.                *\r\n* 4000+ Reserved and available for bi-laterally agreed upon *\r\n* user-defined values                                       *\r\n*************************************************************\r\n*/\r\nexport enum TradeReportRejectReason {\r\n  Successful = 0,\r\n  InvalidPartyOnformation = 1,\r\n  UnknownInstrument = 2,\r\n  UnauthorizedToReportTrades = 3,\r\n  InvalidTradeType = 4,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Used to indicate if the side being reported on Trade Capture *\r\n* Report represents a leg of a multileg instrument or a single *\r\n* security                                                     *\r\n****************************************************************\r\n*/\r\nexport enum SideMultiLegReportingType {\r\n  SingleSecurity = 1,\r\n  IndividualLegOfAMultilegSecurity = 2,\r\n  MultilegSecurity = 3\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Traded / Regulatory timestamp type                       *\r\n* Note of Applicability: values are required in US futures *\r\n* markets by the CFTC to support computerized trade        *\r\n* reconstruction.                                          *\r\n* (see Volume : \"Glossary\" for value definitions)          *\r\n************************************************************\r\n*/\r\nexport enum TrdRegTimestampType {\r\n  ExecutionTime = 1,\r\n  TimeIn = 2,\r\n  TimeOut = 3,\r\n  BrokerReceipt = 4,\r\n  BrokerExecution = 5\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Identifies the type of Confirmation message being sent *\r\n**********************************************************\r\n*/\r\nexport enum ConfirmType {\r\n  Status = 1,\r\n  Confirmation = 2,\r\n  ConfirmationRequestRejected = 3\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Identifies the reason for rejecting a Confirmation *\r\n******************************************************\r\n*/\r\nexport enum ConfirmRejReason {\r\n  MismatchedAccount = 1,\r\n  MissingSettlementInstructions = 2,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Method for booking out this order. Used when notifying a   *\r\n* broker that an order to be settled by that broker is to be *\r\n* booked out as an OTC derivative (e.g. CFD or similar).     *\r\n**************************************************************\r\n*/\r\nexport enum BookingType {\r\n  RegularBooking = 0,\r\n  Cfd = 1,\r\n  TotalReturnSwap = 2\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Used to indicate whether settlement instructions are       *\r\n* provided on an allocation instruction message, and if not, *\r\n* how they are to be derived                                 *\r\n**************************************************************\r\n*/\r\nexport enum AllocSettlInstType {\r\n  UseDefaultInstructions = 0,\r\n  DeriveFromParametersProvided = 1,\r\n  FullDetailsProvided = 2,\r\n  SsidbiDsProvided = 3,\r\n  PhoneForInstructions = 4\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Used to indicate whether a delivery instruction is used for *\r\n* securities or cash settlement                               *\r\n***************************************************************\r\n*/\r\nexport enum DlvyInstType {\r\n  Securities = 'S',\r\n  Cash = 'C'\r\n}\r\n\r\n/*\r\n*********************************\r\n* Type of financing termination *\r\n*********************************\r\n*/\r\nexport enum TerminationType {\r\n  Overnight = 1,\r\n  Term = 2,\r\n  Flexible = 3,\r\n  Open = 4\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Identifies reason for rejection (of a settlement instruction *\r\n* request message)                                             *\r\n****************************************************************\r\n*/\r\nexport enum SettlInstReqRejCode {\r\n  UnableToProcessRequest = 0,\r\n  UnknownAccount = 1,\r\n  NoMatchingSettlementInstructionsFound = 2,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Describes the specific type or purpose of an Allocation *\r\n* Report message                                          *\r\n***********************************************************\r\n*/\r\nexport enum AllocReportType {\r\n  SellsideCalculatedUsingPreliminary = 3,\r\n  SellsideCalculatedWithoutPreliminary = 4,\r\n  WarehouseRecap = 5,\r\n  RequestToIntermediary = 8\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Reason for cancelling or replacing an Allocation Instruction *\r\n* or Allocation Report message                                 *\r\n****************************************************************\r\n*/\r\nexport enum AllocCancReplaceReason {\r\n  OriginalDetailsIncomplete = 1,\r\n  ChangeInUnderlyingOrderDetails = 2,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Type of account associated with a confirmation or other *\r\n* trade-level message                                     *\r\n***********************************************************\r\n*/\r\nexport enum AllocAccountType {\r\n  CarriedCustomerSide = 1,\r\n  CarriedNonCustomerSide = 2,\r\n  HouseTrader = 3,\r\n  FloorTrader = 4,\r\n  CarriedNonCustomerSideCrossMargined = 6,\r\n  HouseTraderCrossMargined = 7,\r\n  JointBackOfficeAccount = 8\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Type of PartySubID (523) value                              *\r\n* 4000+ = Reserved and available for bi-laterally agreed upon *\r\n* user defined values                                         *\r\n***************************************************************\r\n*/\r\nexport enum PartySubIDType {\r\n  Firm = 1,\r\n  Person = 2,\r\n  System = 3,\r\n  Application = 4,\r\n  FullLegalNameOfFirm = 5,\r\n  PostalAddress = 6,\r\n  PhoneNumber = 7,\r\n  EmailAddress = 8,\r\n  ContactName = 9,\r\n  SecuritiesAccountNumber = 10,\r\n  RegistrationNumber = 11,\r\n  RegisteredAddressForConfirmation = 12,\r\n  RegulatoryStatus = 13,\r\n  RegistrationName = 14,\r\n  CashAccountNumber = 15,\r\n  Bic = 16,\r\n  CsdParticipantMemberCode = 17,\r\n  RegisteredAddress = 18,\r\n  FundAccountName = 19,\r\n  TelexNumber = 20,\r\n  FaxNumber = 21,\r\n  SecuritiesAccountName = 22,\r\n  CashAccountName = 23,\r\n  Department = 24,\r\n  LocationDesk = 25,\r\n  PositionAccountType = 26\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Response to allocation to be communicated to a counterparty *\r\n* through an intermediary, i.e. clearing house. Used in       *\r\n* conjunction with AllocType = \"Request to Intermediary\" and  *\r\n* AllocReportType = \"Request to Intermediary\"                 *\r\n***************************************************************\r\n*/\r\nexport enum AllocIntermedReqType {\r\n  PendingAccept = 1,\r\n  PendingRelease = 2,\r\n  PendingReversal = 3,\r\n  Accept = 4,\r\n  BlockLevelReject = 5,\r\n  AccountLevelReject = 6\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Resolution taken when ApplQueueDepth (813) exceeds         *\r\n* ApplQueueMax (812) or system specified maximum queue size. *\r\n**************************************************************\r\n*/\r\nexport enum ApplQueueResolution {\r\n  NoActionTaken = 0,\r\n  QueueFlushed = 1,\r\n  OverlayLast = 2,\r\n  EndSession = 3\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Action to take to resolve an application message queue *\r\n* (backlog).                                             *\r\n**********************************************************\r\n*/\r\nexport enum ApplQueueAction {\r\n  NoActionTaken = 0,\r\n  QueueFlushed = 1,\r\n  OverlayLast = 2,\r\n  EndSession = 3\r\n}\r\n\r\n/*\r\n*****************************\r\n* Average Pricing Indicator *\r\n*****************************\r\n*/\r\nexport enum AvgPxIndicator {\r\n  NoAveragePricing = 0,\r\n  Trade = 1,\r\n  LastTrade = 2\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Identifies how the trade is to be allocated *\r\n***********************************************\r\n*/\r\nexport enum TradeAllocIndicator {\r\n  AllocationNotRequired = 0,\r\n  AllocationRequired = 1,\r\n  UseAllocationProvidedWithTheTrade = 2\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Part of trading cycle when an instrument expires. Field is *\r\n* applicable for derivatives.                                *\r\n**************************************************************\r\n*/\r\nexport enum ExpirationCycle {\r\n  ExpireOnTradingSessionClose = 0,\r\n  ExpireOnTradingSessionOpen = 1\r\n}\r\n\r\n/*\r\n*****************\r\n* Type of Trade *\r\n*****************\r\n*/\r\nexport enum TrdType {\r\n  RegularTrade = 0,\r\n  BlockTrade = 1,\r\n  Efp = 2,\r\n  Transfer = 3,\r\n  LateTrade = 4,\r\n  TTrade = 5,\r\n  WeightedAveragePriceTrade = 6,\r\n  BunchedTrade = 7,\r\n  LateBunchedTrade = 8,\r\n  PriorReferencePriceTrade = 9,\r\n  AfterHoursTrade = 10\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Describes whether peg is static or floats *\r\n*********************************************\r\n*/\r\nexport enum PegMoveType {\r\n  Floating = 0,\r\n  Fixed = 1\r\n}\r\n\r\n/*\r\n****************************\r\n* Type of Peg Offset value *\r\n****************************\r\n*/\r\nexport enum PegOffsetType {\r\n  Price = 0,\r\n  BasisPoints = 1,\r\n  Ticks = 2,\r\n  PriceTier = 3\r\n}\r\n\r\n/*\r\n*********************\r\n* Type of Peg Limit *\r\n*********************\r\n*/\r\nexport enum PegLimitType {\r\n  OrBetter = 0,\r\n  Strict = 1,\r\n  OrWorse = 2\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* If the calculated peg price is not a valid tick price,  *\r\n* specifies whether to round the price to be more or less *\r\n* aggressive                                              *\r\n***********************************************************\r\n*/\r\nexport enum PegRoundDirection {\r\n  MoreAggressive = 1,\r\n  MorePassive = 2\r\n}\r\n\r\n/*\r\n************************\r\n* The scope of the peg *\r\n************************\r\n*/\r\nexport enum PegScope {\r\n  Local = 1,\r\n  National = 2,\r\n  Global = 3,\r\n  NationalExcludingLocal = 4\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Describes whether discretionay price is static or floats *\r\n************************************************************\r\n*/\r\nexport enum DiscretionMoveType {\r\n  Floating = 0,\r\n  Fixed = 1\r\n}\r\n\r\n/*\r\n***********************************\r\n* Type of Discretion Offset value *\r\n***********************************\r\n*/\r\nexport enum DiscretionOffsetType {\r\n  Price = 0,\r\n  BasisPoints = 1,\r\n  Ticks = 2,\r\n  PriceTier = 3\r\n}\r\n\r\n/*\r\n****************************\r\n* Type of Discretion Limit *\r\n****************************\r\n*/\r\nexport enum DiscretionLimitType {\r\n  OrBetter = 0,\r\n  Strict = 1,\r\n  OrWorse = 2\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* If the calculated discretionary price is not a valid tick *\r\n* price, specifies whether to round the price to be more or *\r\n* less aggressive                                           *\r\n*************************************************************\r\n*/\r\nexport enum DiscretionRoundDirection {\r\n  MoreAggressive = 1,\r\n  MorePassive = 2\r\n}\r\n\r\n/*\r\n*******************************\r\n* The scope of the discretion *\r\n*******************************\r\n*/\r\nexport enum DiscretionScope {\r\n  Local = 1,\r\n  National = 2,\r\n  Global = 3,\r\n  NationalExcludingLocal = 4\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* The target strategy of the order                            *\r\n* 1000+ = Reserved and available for bi-laterally agreed upon *\r\n* user defined values                                         *\r\n***************************************************************\r\n*/\r\nexport enum TargetStrategy {\r\n  Vwap = 1,\r\n  Participate = 2,\r\n  MininizeMarketImpact = 3\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicator to identify whether this fill was a result of a  *\r\n* liquidity provider providing or liquidity taker taking the *\r\n* liquidity. Applicable only for OrdStatus of Partial or     *\r\n* Filled.                                                    *\r\n**************************************************************\r\n*/\r\nexport enum LastLiquidityInd {\r\n  AddedLiquidity = 1,\r\n  RemovedLiquidity = 2,\r\n  LiquidityRoutedOut = 3\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Indicates if a trade should be reported via a market *\r\n* reporting service.                                   *\r\n********************************************************\r\n*/\r\nexport enum PublishTrdIndicator {\r\n  ReportTrade = 'Y',\r\n  DoNotReportTrade = 'N'\r\n}\r\n\r\n/*\r\n*************************\r\n* Reason for short sale *\r\n*************************\r\n*/\r\nexport enum ShortSaleReason {\r\n  DealerSoldShort = 0,\r\n  DealerSoldShortExempt = 1,\r\n  SellingCustomerSoldShort = 2,\r\n  SellingCustomerSoldShortExempt = 3,\r\n  QualifiedServiceRepresentative = 4,\r\n  QsrOrAguContraSideSoldShortExempt = 5\r\n}\r\n\r\n/*\r\n**************************************************\r\n* Type of quantity specified in a quantity field *\r\n**************************************************\r\n*/\r\nexport enum QtyType {\r\n  Units = 0,\r\n  Contracts = 1\r\n}\r\n\r\n/*\r\n************************\r\n* Type of Trade Report *\r\n************************\r\n*/\r\nexport enum TradeReportType {\r\n  Submit = 0,\r\n  Alleged = 1,\r\n  Accept = 2,\r\n  Decline = 3,\r\n  Addendum = 4,\r\n  No = 5,\r\n  TradeReportCancel = 6,\r\n  LockedIn = 7\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Indicates how the orders being booked and allocated by an *\r\n* Allocation Instruction or Allocation Report message are   *\r\n* identified, i.e. by explicit definition in the NoOrders   *\r\n* group or not.                                             *\r\n*************************************************************\r\n*/\r\nexport enum AllocNoOrdersType {\r\n  NotSpecified = 0,\r\n  ExplicitListProvided = 1\r\n}\r\n\r\n/*\r\n***************************************\r\n* Code to represent the type of event *\r\n***************************************\r\n*/\r\nexport enum EventType {\r\n  Put = 1,\r\n  Call = 2,\r\n  Tender = 3,\r\n  SinkingFundCall = 4,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Code to represent the type of instrument attribute *\r\n******************************************************\r\n*/\r\nexport enum InstrAttribType {\r\n  Flat = 1,\r\n  ZeroCoupon = 2,\r\n  InterestBearing = 3,\r\n  NoPeriodicPayments = 4,\r\n  VariableRate = 5,\r\n  LessFeeForPut = 6,\r\n  SteppedCoupon = 7,\r\n  CouponPeriod = 8,\r\n  When = 9,\r\n  OriginalIssueDiscount = 10,\r\n  Callable = 11,\r\n  EscrowedToMaturity = 12,\r\n  EscrowedToRedemptionDate = 13,\r\n  PreRefunded = 14,\r\n  InDefault = 15,\r\n  Unrated = 16,\r\n  Taxable = 17,\r\n  Indexed = 18,\r\n  SubjectToAlternativeMinimumTax = 19,\r\n  OriginalIssueDiscountPrice = 20,\r\n  CallableBelowMaturityValue = 21,\r\n  CallableWithoutNotice = 22,\r\n  Text = 99\r\n}\r\n\r\n/*\r\n********************************************************\r\n* The program under which a commercial paper is issued *\r\n********************************************************\r\n*/\r\nexport enum CPProgram {\r\n  Program3A3 = 1,\r\n  Program42 = 2,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Defines the unit for a miscellaneous fee. *\r\n*********************************************\r\n*/\r\nexport enum MiscFeeBasis {\r\n  Absolute = 0,\r\n  PerUnit = 1,\r\n  Percentage = 2\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates whether this message is the last in a sequence of  *\r\n* messages for those messages that support fragmentation, such *\r\n* as Allocation Instruction, Mass Quote, Security List,        *\r\n* Derivative Security List                                     *\r\n****************************************************************\r\n*/\r\nexport enum LastFragment {\r\n  LastMessage = 'Y',\r\n  NotLastMessage = 'N'\r\n}\r\n\r\n/*\r\n************************************\r\n* Reason for Collateral Assignment *\r\n************************************\r\n*/\r\nexport enum CollAsgnReason {\r\n  Initial = 0,\r\n  Scheduled = 1,\r\n  TimeWarning = 2,\r\n  MarginDeficiency = 3,\r\n  MarginExcess = 4,\r\n  ForwardCollateralDemand = 5,\r\n  EventOfDefault = 6,\r\n  AdverseTaxEvent = 7\r\n}\r\n\r\n/*\r\n**********************************\r\n* Collateral inquiry qualifiers: *\r\n**********************************\r\n*/\r\nexport enum CollInquiryQualifier {\r\n  TradeDate = 0,\r\n  GcInstrument = 1,\r\n  CollateralInstrument = 2,\r\n  SubstitutionEligible = 3,\r\n  NotAssigned = 4,\r\n  PartiallyAssigned = 5,\r\n  FullyAssigned = 6,\r\n  OutstandingTrades = 7\r\n}\r\n\r\n/*\r\n******************************************\r\n* Collateral Assignment Transaction Type *\r\n******************************************\r\n*/\r\nexport enum CollAsgnTransType {\r\n  New = 0,\r\n  Replace = 1,\r\n  Cancel = 2,\r\n  Release = 3,\r\n  Reverse = 4\r\n}\r\n\r\n/*\r\n***************************************\r\n* Collateral Assignment Response Type *\r\n***************************************\r\n*/\r\nexport enum CollAsgnRespType {\r\n  Received = 0,\r\n  Accepted = 1,\r\n  Declined = 2,\r\n  Rejected = 3\r\n}\r\n\r\n/*\r\n***************************************\r\n* Collateral Assignment Reject Reason *\r\n***************************************\r\n*/\r\nexport enum CollAsgnRejectReason {\r\n  UnknownDeal = 0,\r\n  UnknownOrInvalidInstrument = 1,\r\n  UnauthorizedTransaction = 2,\r\n  InsufficientCollateral = 3,\r\n  InvalidTypeOfCollateral = 4,\r\n  ExcessiveSubstitution = 5,\r\n  Other = 99\r\n}\r\n\r\n/*\r\n*********************\r\n* Collateral Status *\r\n*********************\r\n*/\r\nexport enum CollStatus {\r\n  Unassigned = 0,\r\n  PartiallyAssigned = 1,\r\n  AssignmentProposed = 2,\r\n  Assigned = 3,\r\n  Challenged = 4\r\n}\r\n\r\n/*\r\n*********************************\r\n* Identifies type of settlement *\r\n*********************************\r\n*/\r\nexport enum DeliveryType {\r\n  VersusPayment = 0,\r\n  Free = 1,\r\n  TriParty = 2,\r\n  HoldInCustody = 3\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Indicates the action required by a User Request Message *\r\n***********************************************************\r\n*/\r\nexport enum UserRequestType {\r\n  LogOnUser = 1,\r\n  LogOffUser = 2,\r\n  ChangePasswordForUser = 3,\r\n  RequestIndividualUserStatus = 4\r\n}\r\n\r\n/*\r\n**********************************\r\n* Indicates the status of a user *\r\n**********************************\r\n*/\r\nexport enum UserStatus {\r\n  LoggedIn = 1,\r\n  NotLoggedIn = 2,\r\n  UserNotRecognised = 3,\r\n  PasswordIncorrect = 4,\r\n  PasswordChanged = 5,\r\n  Other = 6\r\n}\r\n\r\n/*\r\n************************************************\r\n* Indicates the status of a network connection *\r\n************************************************\r\n*/\r\nexport enum StatusValue {\r\n  Connected = 1,\r\n  NotConnectedUnexpected = 2,\r\n  NotConnectedExpected = 3,\r\n  InProcess = 4\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Indicates the type and level of details required for a *\r\n* Network Status Request Message                         *\r\n* Boolean logic applies EG If you want to subscribe for  *\r\n* changes to certain id\u0019s then UserRequestType =0 (8+2), *\r\n* Snapshot for certain ID\u0019s = 9 (8+)                     *\r\n**********************************************************\r\n*/\r\nexport enum NetworkRequestType {\r\n  Snapshot = 1,\r\n  Subscribe = 2,\r\n  StopSubscribing = 4,\r\n  LevelOfDetail = 8\r\n}\r\n\r\n/*\r\n**************************************************\r\n* Indicates the type of Network Response Message *\r\n**************************************************\r\n*/\r\nexport enum NetworkStatusResponseType {\r\n  Full = 1,\r\n  IncrementalUpdate = 2\r\n}\r\n\r\n/*\r\n***********************\r\n* Trade Report Status *\r\n***********************\r\n*/\r\nexport enum TrdRptStatus {\r\n  Accepted = 0,\r\n  Rejected = 1\r\n}\r\n\r\n/*\r\n************************************************\r\n* Identifies the status of the ConfirmationAck *\r\n************************************************\r\n*/\r\nexport enum AffirmStatus {\r\n  Received = 1,\r\n  ConfirmRejected = 2,\r\n  Affirmed = 3\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Action proposed for an Underlying Instrument instance *\r\n*********************************************************\r\n*/\r\nexport enum CollAction {\r\n  Retain = 0,\r\n  Add = 1,\r\n  Remove = 2\r\n}\r\n\r\n/*\r\n********************************\r\n* Status of Collateral Inquiry *\r\n********************************\r\n*/\r\nexport enum CollInquiryStatus {\r\n  Accepted = 0,\r\n  AcceptedWithWarnings = 1,\r\n  Completed = 2,\r\n  CompletedWithWarnings = 3,\r\n  Rejected = 4\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Result returned in response to Collateral Inquiry         *\r\n* 4000+ Reserved and available for bi-laterally agreed upon *\r\n* user-defined values                                       *\r\n*************************************************************\r\n*/\r\nexport enum CollInquiryResult {\r\n  Successful = 0,\r\n  InvalidOrUnknownInstrument = 1,\r\n  InvalidOrUnknownCollateralType = 2,\r\n  InvalidParties = 3,\r\n  InvalidTransportTypeRequested = 4,\r\n  InvalidDestinationRequested = 5,\r\n  NoCollateralFoundForTheTradeSpecified = 6,\r\n  NoCollateralFoundForTheOrderSpecified = 7,\r\n  CollateralInquiryTypeNotSupported = 8,\r\n  UnauthorizedForCollateralInquiry = 9,\r\n  Other = 99\r\n}\r\n\r\n"]}