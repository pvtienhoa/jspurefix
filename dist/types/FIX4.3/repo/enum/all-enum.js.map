{"version":3,"file":"all-enum.js","sourceRoot":"","sources":["../../../../../src/types/FIX4.3/repo/enum/all-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n*************************************\r\n* Broker's side of advertised trade *\r\n*************************************\r\n*/\r\nexport enum AdvSide {\r\n  Buy = 'B',\r\n  Sell = 'S',\r\n  Cross = 'X',\r\n  Trade = 'T'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Identifies advertisement message transaction type *\r\n*****************************************************\r\n*/\r\nexport enum AdvTransType {\r\n  New = 'N',\r\n  Cancel = 'C',\r\n  Replace = 'R'\r\n}\r\n\r\n/*\r\n*******************\r\n* Commission type *\r\n*******************\r\n*/\r\nexport enum CommType {\r\n  PerUnit = '1',\r\n  Percent = '2',\r\n  Absolute = '3',\r\n  PercentageWaivedCashDiscount = '4',\r\n  PercentageWaivedEnhancedUnits = '5',\r\n  PointsPerBondOrContract = '6'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Instructions for order handling on exchange trading floor.   *\r\n* If more than one instruction is applicable to an order, this *\r\n* field can contain multiple instructions separated by space.  *\r\n****************************************************************\r\n*/\r\nexport enum ExecInst {\r\n  StayOnOfferSide = '0',\r\n  NotHeld = '1',\r\n  Work = '2',\r\n  GoAlong = '3',\r\n  OverTheDay = '4',\r\n  Held = '5',\r\n  ParticipateDoNotInitiate = '6',\r\n  StrictScale = '7',\r\n  TryToScale = '8',\r\n  StayOnBidSide = '9',\r\n  TryToStop = 'Y',\r\n  MidPricePeg = 'M',\r\n  MarketPeg = 'P',\r\n  CancelOnSystemFailure = 'Q',\r\n  PrimaryPeg = 'R',\r\n  Suspend = 'S',\r\n  CustomerDisplayInstruction = 'U',\r\n  Netting = 'V',\r\n  PegToVwap = 'W',\r\n  TradeAlong = 'X',\r\n  PercentOfVolume = 'D',\r\n  NoCross = 'A',\r\n  OpeningPeg = 'O',\r\n  CallFirst = 'C',\r\n  NonNegotiable = 'N',\r\n  DoNotIncrease = 'E',\r\n  DoNotReduce = 'F',\r\n  AllOrNone = 'G',\r\n  ReinstateOnSystemFailure = 'H',\r\n  InstitutionsOnly = 'I',\r\n  ReinstateOnTradingHalt = 'J',\r\n  CancelOnTradingHalt = 'K',\r\n  LastPeg = 'L',\r\n  OkToCross = 'B'\r\n}\r\n\r\n/*\r\n*******************************\r\n* Identifies transaction type *\r\n*******************************\r\n*/\r\nexport enum ExecTransType {\r\n  New = '0',\r\n  Cancel = '1',\r\n  Correct = '2',\r\n  Status = '3'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Instructions for order handling on Broker trading floor *\r\n***********************************************************\r\n*/\r\nexport enum HandlInst {\r\n  AutomatedExecutionNoIntervention = '1',\r\n  AutomatedExecutionInterventionOk = '2',\r\n  ManualOrder = '3'\r\n}\r\n\r\n/*\r\n**********************************************\r\n* Identifies class of alternative SecurityID *\r\n**********************************************\r\n*/\r\nexport enum IDSource {\r\n  Cusip = '1',\r\n  Sedol = '2',\r\n  Quik = '3',\r\n  IsinNumber = '4',\r\n  RicCode = '5',\r\n  IsoCurrencyCode = '6',\r\n  IsoCountryCode = '7',\r\n  ExchangeSymbol = '8',\r\n  ConsolidatedTapeAssociation = '9',\r\n  Sicovam = 'E',\r\n  Belgian = 'F',\r\n  Valoren = 'D',\r\n  Dutch = 'C',\r\n  Wertpapier = 'B',\r\n  BloombergSymbol = 'A',\r\n  Common = 'G'\r\n}\r\n\r\n/*\r\n**********************************\r\n* Relative quality of indication *\r\n**********************************\r\n*/\r\nexport enum IOIQltyInd {\r\n  Medium = 'M',\r\n  High = 'H',\r\n  Low = 'L'\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Number of shares in numeric or relative size. *\r\n*************************************************\r\n*/\r\nexport enum IOIShares {\r\n  Large = 'L',\r\n  Medium = 'M',\r\n  Small = 'S'\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Identifies IOI message transaction type *\r\n*******************************************\r\n*/\r\nexport enum IOITransType {\r\n  Cancel = 'C',\r\n  New = 'N',\r\n  Replace = 'R'\r\n}\r\n\r\n/*\r\n**************************************\r\n* Broker capacity in order execution *\r\n**************************************\r\n*/\r\nexport enum LastCapacity {\r\n  Agent = '1',\r\n  CrossAsAgent = '2',\r\n  CrossAsPrincipal = '3',\r\n  Principal = '4'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Defines message type. ALWAYS THIRD FIELD IN MESSAGE. (Always *\r\n* unencrypted)                                                 *\r\n* Note: A \"U\" as the first character in the MsgType field      *\r\n* (i.e. U1, U2, etc) indicates that the message format is      *\r\n* privately defined between the sender and receiver.           *\r\n****************************************************************\r\n*/\r\nexport enum MsgType {\r\n  Heartbeat = '0',\r\n  TestRequest = '1',\r\n  ResendRequest = '2',\r\n  Reject = '3',\r\n  SequenceReset = '4',\r\n  Logout = '5',\r\n  Ioi = '6',\r\n  Advertisement = '7',\r\n  ExecutionReport = '8',\r\n  OrderCancelReject = '9',\r\n  QuoteStatusRequest = 'a',\r\n  Logon = 'A',\r\n  DerivativeSecurityList = 'AA',\r\n  NewOrderMultileg = 'AB',\r\n  MultilegOrderCancelReplace = 'AC',\r\n  TradeCaptureReportRequest = 'AD',\r\n  TradeCaptureReport = 'AE',\r\n  OrderMassStatusRequest = 'AF',\r\n  QuoteRequestReject = 'AG',\r\n  RfqRequest = 'AH',\r\n  QuoteStatusReport = 'AI',\r\n  MassQuoteAcknowledgement = 'b',\r\n  News = 'B',\r\n  SecurityDefinitionRequest = 'c',\r\n  Email = 'C',\r\n  SecurityDefinition = 'd',\r\n  NewOrderSingle = 'D',\r\n  SecurityStatusRequest = 'e',\r\n  NewOrderList = 'E',\r\n  SecurityStatus = 'f',\r\n  OrderCancelRequest = 'F',\r\n  OrderCancelReplaceRequest = 'G',\r\n  TradingSessionStatusRequest = 'g',\r\n  TradingSessionStatus = 'h',\r\n  OrderStatusRequest = 'H',\r\n  MassQuote = 'i',\r\n  BusinessMessageReject = 'j',\r\n  AllocationInstruction = 'J',\r\n  ListCancelRequest = 'K',\r\n  BidRequest = 'k',\r\n  BidResponse = 'l',\r\n  ListExecute = 'L',\r\n  ListStrikePrice = 'm',\r\n  ListStatusRequest = 'M',\r\n  ListStatus = 'N',\r\n  XmlNonFix = 'n',\r\n  RegistrationInstructions = 'o',\r\n  AllocationInstructionAck = 'P',\r\n  RegistrationInstructionsResponse = 'p',\r\n  OrderMassCancelRequest = 'q',\r\n  DontKnowTrade = 'Q',\r\n  OrderMassCancelReport = 'r',\r\n  QuoteRequest = 'R',\r\n  NewOrderCross = 's',\r\n  Quote = 'S',\r\n  CrossOrderCancelReplaceRequest = 't',\r\n  SettlementInstructions = 'T',\r\n  CrossOrderCancelRequest = 'u',\r\n  SecurityTypeRequest = 'v',\r\n  MarketDataRequest = 'V',\r\n  SecurityTypes = 'w',\r\n  MarketDataSnapshotFullRefresh = 'W',\r\n  SecurityListRequest = 'x',\r\n  MarketDataIncrementalRefresh = 'X',\r\n  SecurityList = 'y',\r\n  MarketDataRequestReject = 'Y',\r\n  DerivativeSecurityListRequest = 'z',\r\n  QuoteCancel = 'Z'\r\n}\r\n\r\n/*\r\n***************************************\r\n* Identifies current status of order. *\r\n***************************************\r\n*/\r\nexport enum OrdStatus {\r\n  New = '0',\r\n  PartiallyFilled = '1',\r\n  Filled = '2',\r\n  DoneForDay = '3',\r\n  Canceled = '4',\r\n  Replaced = '5',\r\n  PendingCancel = '6',\r\n  Stopped = '7',\r\n  Rejected = '8',\r\n  Suspended = '9',\r\n  PendingNew = 'A',\r\n  Calculated = 'B',\r\n  Expired = 'C',\r\n  AcceptedForBidding = 'D',\r\n  PendingReplace = 'E'\r\n}\r\n\r\n/*\r\n***************\r\n* Order type. *\r\n***************\r\n*/\r\nexport enum OrdType {\r\n  Market = '1',\r\n  Limit = '2',\r\n  Stop = '3',\r\n  StopLimit = '4',\r\n  MarketOnClose = '5',\r\n  WithOrWithout = '6',\r\n  LimitOrBetter = '7',\r\n  LimitWithOrWithout = '8',\r\n  OnBasis = '9',\r\n  PreviouslyQuoted = 'D',\r\n  OnClose = 'A',\r\n  ForexMarket = 'C',\r\n  ForexLimit = 'F',\r\n  PreviouslyIndicated = 'E',\r\n  ForexSwap = 'G',\r\n  Funari = 'I',\r\n  MarketIfTouched = 'J',\r\n  MarketWithLeftOverAsLimit = 'K',\r\n  PreviousFundValuationPoint = 'L',\r\n  NextFundValuationPoint = 'M',\r\n  Pegged = 'P',\r\n  LimitOnClose = 'B',\r\n  ForexPreviouslyQuoted = 'H'\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Indicates possible retransmission of message with this *\r\n* sequence number                                        *\r\n**********************************************************\r\n*/\r\nexport enum PossDupFlag {\r\n  OriginalTransmission = 'N',\r\n  PossibleDuplicate = 'Y'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Note that the name of this field is changing to              *\r\n* \"OrderCapacity\" as Rule80A is a very US market-specific      *\r\n* term. Other world markets need to convey similar             *\r\n* information, however, often a subset of the US values. . See *\r\n* the \"Rule80A (aka OrderCapacity) Usage by Market\" appendix   *\r\n* for market-specific usage of this field.                     *\r\n****************************************************************\r\n*/\r\nexport enum Rule80A {\r\n  AgentForOtherMember = 'N',\r\n  ShortExemptTransactionAType = 'B',\r\n  ProgramOrderMember = 'D',\r\n  ShortExemptTransactionForPrincipal = 'E',\r\n  ShortExemptTransactionWType = 'F',\r\n  ShortExemptTransactionIType = 'H',\r\n  IndividualInvestor = 'I',\r\n  ProprietaryAlgo = 'J',\r\n  AgencyAlgo = 'K',\r\n  ProgramOrderOtherMember = 'M',\r\n  AgencySingleOrder = 'A',\r\n  ProprietaryTransactionAffiliated = 'O',\r\n  Principal = 'P',\r\n  TransactionNonMember = 'R',\r\n  SpecialistTrades = 'S',\r\n  TransactionUnaffiliatedMember = 'T',\r\n  AgencyIndexArb = 'U',\r\n  AllOtherOrdersAsAgentForOtherMember = 'W',\r\n  ShortExemptTransactionMemberNotAffliated = 'X',\r\n  AgencyNonAlgo = 'Y',\r\n  ShortExemptTransactionNonMember = 'Z',\r\n  ShortExemptTransactionMemberAffliated = 'L',\r\n  ProprietaryNonAlgo = 'C'\r\n}\r\n\r\n/*\r\n*****************\r\n* Side of order *\r\n*****************\r\n*/\r\nexport enum Side {\r\n  Buy = '1',\r\n  Sell = '2',\r\n  BuyMinus = '3',\r\n  SellPlus = '4',\r\n  SellShort = '5',\r\n  SellShortExempt = '6',\r\n  Undisclosed = '7',\r\n  Cross = '8',\r\n  CrossShort = '9',\r\n  AsDefined = 'B',\r\n  Opposite = 'C',\r\n  CrossShortExempt = 'A'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Specifies how long the order remains in effect. Absence of *\r\n* this field is interpreted as DAY.                          *\r\n**************************************************************\r\n*/\r\nexport enum TimeInForce {\r\n  Day = '0',\r\n  GoodTillCancel = '1',\r\n  AtTheOpening = '2',\r\n  ImmediateOrCancel = '3',\r\n  FillOrKill = '4',\r\n  GoodTillCrossing = '5',\r\n  GoodTillDate = '6',\r\n  AtTheClose = '7'\r\n}\r\n\r\n/*\r\n****************\r\n* Urgency flag *\r\n****************\r\n*/\r\nexport enum Urgency {\r\n  Normal = '0',\r\n  Flash = '1',\r\n  Background = '2'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates order settlement period. Absence of this field is *\r\n* interpreted as Regular. Regular is defined as the default   *\r\n* settlement period for the particular security on the        *\r\n* exchange of execution.                                      *\r\n***************************************************************\r\n*/\r\nexport enum SettlmntTyp {\r\n  Regular = '0',\r\n  Cash = '1',\r\n  NextDay = '2',\r\n  TPlus2 = '3',\r\n  TPlus3 = '4',\r\n  TPlus4 = '5',\r\n  Future = '6',\r\n  WhenAndIfIssued = '7',\r\n  SellersOption = '8',\r\n  TPlus5 = '9',\r\n  T1 = 'A'\r\n}\r\n\r\n/*\r\n******************************************\r\n* Identifies allocation transaction type *\r\n******************************************\r\n*/\r\nexport enum AllocTransType {\r\n  New = '0',\r\n  Replace = '1',\r\n  Cancel = '2',\r\n  Preliminary = '3',\r\n  Calculated = '4',\r\n  CalculatedWithoutPreliminary = '5'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates whether the resulting position after a trade      *\r\n* should be an opening position or closing position. Used for *\r\n* omnibus accounting - where accounts are held on a gross     *\r\n* basis instead of being netted together.                     *\r\n***************************************************************\r\n*/\r\nexport enum OpenClose {\r\n  Fifo = 'F',\r\n  Rolled = 'R',\r\n  Close = 'C',\r\n  Open = 'O'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Processing code for sub-account. Absence of this field in    *\r\n* AllocAccount / AllocPrice/AllocShares / ProcessCode instance *\r\n* indicates regular trade.                                     *\r\n****************************************************************\r\n*/\r\nexport enum ProcessCode {\r\n  Regular = '0',\r\n  SoftDollar = '1',\r\n  StepIn = '2',\r\n  StepOut = '3',\r\n  SoftDollarStepIn = '4',\r\n  SoftDollarStepOut = '5',\r\n  PlanSponsor = '6'\r\n}\r\n\r\n/*\r\n************************************\r\n* Identifies status of allocation. *\r\n************************************\r\n*/\r\nexport enum AllocStatus {\r\n  Accepted = 0,\r\n  BlockLevelReject = 1,\r\n  AccountLevelReject = 2,\r\n  Received = 3\r\n}\r\n\r\n/*\r\n************************************\r\n* Identifies reason for rejection. *\r\n************************************\r\n*/\r\nexport enum AllocRejCode {\r\n  UnknownAccount = 0,\r\n  IncorrectQuantity = 1,\r\n  IncorrectAveragegPrice = 2,\r\n  UnknownExecutingBrokerMnemonic = 3,\r\n  CommissionDifference = 4,\r\n  UnknownOrderId = 5,\r\n  UnknownListId = 6,\r\n  OtherSeeText = 7\r\n}\r\n\r\n/*\r\n***********************\r\n* Email message type. *\r\n***********************\r\n*/\r\nexport enum EmailType {\r\n  New = '0',\r\n  Reply = '1',\r\n  AdminReply = '2'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates that message may contain information that has been *\r\n* sent under another sequence number.                          *\r\n****************************************************************\r\n*/\r\nexport enum PossResend {\r\n  OriginalTransmission = 'N',\r\n  PossibleResend = 'Y'\r\n}\r\n\r\n/*\r\n*************************\r\n* Method of encryption. *\r\n*************************\r\n*/\r\nexport enum EncryptMethod {\r\n  None = 0,\r\n  Pkcs = 1,\r\n  Des = 2,\r\n  Pkcsdes = 3,\r\n  Pgpdes = 4,\r\n  Pgpdesmd5 = 5,\r\n  Pem = 6\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Code to identify reason for cancel rejection. *\r\n*************************************************\r\n*/\r\nexport enum CxlRejReason {\r\n  TooLateToCancel = 0,\r\n  UnknownOrder = 1,\r\n  BrokerCredit = 2,\r\n  OrderAlreadyInPendingStatus = 3,\r\n  UnableToProcessOrderMassCancelRequest = 4,\r\n  OrigOrdModTime = 5,\r\n  DuplicateClOrdId = 6\r\n}\r\n\r\n/*\r\n************************************************\r\n* Code to identify reason for order rejection. *\r\n************************************************\r\n*/\r\nexport enum OrdRejReason {\r\n  BrokerCredit = 0,\r\n  UnknownSymbol = 1,\r\n  ExchangeClosed = 2,\r\n  OrderExceedsLimit = 3,\r\n  TooLateToEnter = 4,\r\n  UnknownOrder = 5,\r\n  DuplicateOrder = 6,\r\n  DuplicateOfAVerballyCommunicatedOrder = 7,\r\n  StaleOrder = 8,\r\n  TradeAlongRequired = 9,\r\n  InvalidInvestorId = 10,\r\n  UnsupportedOrderCharacteristic = 11,\r\n  SurveillenceOption = 12\r\n}\r\n\r\n/*\r\n****************************\r\n* Code to qualify IOI use. *\r\n****************************\r\n*/\r\nexport enum IOIQualifier {\r\n  AtTheOpen = 'O',\r\n  CrossingOpportunity = 'X',\r\n  Indication = 'W',\r\n  Versus = 'V',\r\n  ThroughTheDay = 'T',\r\n  PortfolioShown = 'S',\r\n  ReadyToTrade = 'R',\r\n  AllOrNone = 'A',\r\n  TakingAPosition = 'P',\r\n  MoreBehind = 'M',\r\n  Limit = 'L',\r\n  InTouchWith = 'I',\r\n  Vwap = 'D',\r\n  AtTheClose = 'C',\r\n  MarketOnClose = 'B',\r\n  AtTheMarket = 'Q',\r\n  AtTheMidpoint = 'Y',\r\n  PreOpen = 'Z'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Identifies party of trade responsible for exchange *\r\n* reporting.                                         *\r\n******************************************************\r\n*/\r\nexport enum ReportToExch {\r\n  ReceiverReports = 'Y',\r\n  SenderReports = 'N'\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Indicates whether the broker is to locate the stock in *\r\n* conjunction with a short sell order.                   *\r\n**********************************************************\r\n*/\r\nexport enum LocateReqd {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Indicates request for forex accommodation trade to be *\r\n* executed along with security transaction.             *\r\n*********************************************************\r\n*/\r\nexport enum ForexReq {\r\n  ExecuteForexAfterSecurityTrade = 'Y',\r\n  DoNotExecuteForexAfterSecurityTrade = 'N'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates that the Sequence Reset message is replacing   *\r\n* administrative or application messages which will not be *\r\n* resent.                                                  *\r\n************************************************************\r\n*/\r\nexport enum GapFillFlag {\r\n  GapFillMessage = 'Y',\r\n  SequenceReset = 'N'\r\n}\r\n\r\n/*\r\n***********************************\r\n* Reason for execution rejection. *\r\n***********************************\r\n*/\r\nexport enum DKReason {\r\n  WrongSide = 'B',\r\n  QuantityExceedsOrder = 'C',\r\n  NoMatchingOrder = 'D',\r\n  PriceExceedsLimit = 'E',\r\n  Other = 'Z',\r\n  UnknownSymbol = 'A'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Indicates that IOI is the result of an existing agency order *\r\n* or a facilitation position resulting from an agency order,   *\r\n* not from principal trading or order solicitation activity.   *\r\n****************************************************************\r\n*/\r\nexport enum IOINaturalFlag {\r\n  Natural = 'Y',\r\n  NotNatural = 'N'\r\n}\r\n\r\n/*\r\n****************************************\r\n* Indicates type of miscellaneous fee. *\r\n****************************************\r\n*/\r\nexport enum MiscFeeType {\r\n  Regulatory = '1',\r\n  Tax = '2',\r\n  LocalCommission = '3',\r\n  ExchangeFees = '4',\r\n  Stamp = '5',\r\n  Levy = '6',\r\n  Other = '7',\r\n  Markup = '8',\r\n  ConsumptionTax = '9'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Indicates that the both sides of the FIX session should *\r\n* reset sequence numbers.                                 *\r\n***********************************************************\r\n*/\r\nexport enum ResetSeqNumFlag {\r\n  Yes = 'Y',\r\n  No = 'N'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Describes the specific ExecutionRpt (i.e. Pending Cancel) *\r\n* while OrdStatus will always identify the current order    *\r\n* status (i.e. Partially Filled)                            *\r\n*************************************************************\r\n*/\r\nexport enum ExecType {\r\n  New = '0',\r\n  PartialFill = '1',\r\n  Fill = '2',\r\n  DoneForDay = '3',\r\n  Canceled = '4',\r\n  Replaced = '5',\r\n  PendingCancel = '6',\r\n  Stopped = '7',\r\n  Rejected = '8',\r\n  Suspended = '9',\r\n  PendingNew = 'A',\r\n  Calculated = 'B',\r\n  Expired = 'C',\r\n  Restated = 'D',\r\n  PendingReplace = 'E',\r\n  Trade = 'F',\r\n  TradeCorrect = 'G',\r\n  TradeCancel = 'H',\r\n  OrderStatus = 'I'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Specifies whether or not SettlCurrFxRate should be *\r\n* multiplied or divided.                             *\r\n******************************************************\r\n*/\r\nexport enum SettlCurrFxRateCalc {\r\n  Divide = 'D',\r\n  Multiply = 'M'\r\n}\r\n\r\n/*\r\n***************************************************\r\n* Indicates mode used for Settlement Instructions *\r\n***************************************************\r\n*/\r\nexport enum SettlInstMode {\r\n  Default = '0',\r\n  StandingInstructionsProvided = '1',\r\n  SpecificAllocationAccountOverriding = '2',\r\n  SpecificAllocationAccountStanding = '3',\r\n  SpecificOrderForASingleAccount = '4'\r\n}\r\n\r\n/*\r\n****************************************************\r\n* Settlement Instructions message transaction type *\r\n****************************************************\r\n*/\r\nexport enum SettlInstTransType {\r\n  New = 'N',\r\n  Replace = 'R',\r\n  Cancel = 'C'\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Indicates source of Settlement Instructions *\r\n***********************************************\r\n*/\r\nexport enum SettlInstSource {\r\n  BrokerCredit = '1',\r\n  Institution = '2',\r\n  Investor = '3'\r\n}\r\n\r\n/*\r\n***********************************************************\r\n* Identifies Settlement Depository or Country Code (ISITC *\r\n* spec)                                                   *\r\n***********************************************************\r\n*/\r\nexport enum SettlLocation {\r\n  FederalBookEntry = 'FED',\r\n  LocalMarketSettleLocation = 'ISO Country Code',\r\n  Physical = 'PNY',\r\n  EuroClear = 'EUR',\r\n  DepositoryTrustCompany = 'DTC',\r\n  Cedel = 'CED',\r\n  ParticipantTrustCompany = 'PTC'\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Indicates type of security (ISITC spec) *\r\n*******************************************\r\n*/\r\nexport enum SecurityType {\r\n  CommercialPaper = 'CP',\r\n  VariableRateDemandNote = 'VRDN',\r\n  PlazosFijos = 'PZFJ',\r\n  PromissoryNote = 'PN',\r\n  Overnight = 'ONITE',\r\n  MediumTermNotes = 'MTN',\r\n  TaxExemptCommercialPaper = 'TECP',\r\n  Amended = 'AMENDED',\r\n  BridgeLoan = 'BRIDGE',\r\n  LetterOfCredit = 'LOFC',\r\n  SwingLineFacility = 'SWING',\r\n  DebtorInPossession = 'DINP',\r\n  Defaulted = 'DEFLTED',\r\n  Withdrawn = 'WITHDRN',\r\n  LiquidityNote = 'LQN',\r\n  Matured = 'MATURED',\r\n  DepositNotes = 'DN',\r\n  Retired = 'RETIRED',\r\n  BankersAcceptance = 'BA',\r\n  BankNotes = 'BN',\r\n  BillOfExchanges = 'BOX',\r\n  CertificateOfDeposit = 'CD',\r\n  CallLoans = 'CL',\r\n  Replaced = 'REPLACD',\r\n  MandatoryTender = 'MT',\r\n  Revolver = 'RVLVTRM',\r\n  MortgagePrivatePlacement = 'MPP',\r\n  ShortTermLoanNote = 'STN',\r\n  MiscellaneousPassThrough = 'MPT',\r\n  ToBeAnnounced = 'TBA',\r\n  OtherAnticipationNotes = 'AN',\r\n  MortgageInterestOnly = 'MIO',\r\n  CertificateOfParticipation = 'COFP',\r\n  MortgageBackedSecurities = 'MBS',\r\n  RevenueBonds = 'REV',\r\n  SpecialAssessment = 'SPCLA',\r\n  SpecialObligation = 'SPCLO',\r\n  SpecialTax = 'SPCLT',\r\n  TaxAnticipationNote = 'TAN',\r\n  TaxAllocation = 'TAXA',\r\n  CertificateOfObligation = 'COFO',\r\n  TimeDeposit = 'TD',\r\n  GeneralObligationBonds = 'GO',\r\n  Wildcard = '?',\r\n  Warrant = 'WAR',\r\n  MutualFund = 'MF',\r\n  MultilegInstrument = 'MLEG',\r\n  TaxRevenueAnticipationNote = 'TRAN',\r\n  MortgagePrincipalOnly = 'MPO',\r\n  RepurchaseAgreement = 'RP',\r\n  NoSecurityType = 'NONE',\r\n  ExtendedCommNote = 'XCN',\r\n  AgencyPools = 'POOL',\r\n  AssetBackedSecurities = 'ABS',\r\n  Corp = 'CMBS',\r\n  CollateralizedMortgageObligation = 'CMO',\r\n  IoetteMortgage = 'IET',\r\n  ReverseRepurchaseAgreement = 'RVRP',\r\n  ForeignExchangeContract = 'FOR',\r\n  RevenueAnticipationNote = 'RAN',\r\n  RevolverLoan = 'RVLV',\r\n  FederalAgencyCoupon = 'FAC',\r\n  FederalAgencyDiscountNote = 'FADN',\r\n  PrivateExportFunding = 'PEF',\r\n  CorporateBond = 'CORP',\r\n  CorporatePrivatePlacement = 'CPP',\r\n  ConvertibleBond = 'CB',\r\n  DualCurrency = 'DUAL',\r\n  IndexedLinked = 'XLINKD',\r\n  YankeeCorporateBond = 'YANK',\r\n  CommonStock = 'CS',\r\n  PreferredStock = 'PS',\r\n  BradyBond = 'BRADY',\r\n  UsTreasuryBond = 'TBOND',\r\n  InterestStripFromAnyBondOrNote = 'TINT',\r\n  TreasuryInflationProtectedSecurities = 'TIPS',\r\n  PrincipalStripOfACallableBondOrNote = 'TCAL',\r\n  PrincipalStripFromANonCallableBondOrNote = 'TPRN',\r\n  UsTreasuryNoteOld = 'UST',\r\n  UsTreasuryBillOld = 'USTB',\r\n  TermLoan = 'TERM',\r\n  StructuredNotes = 'STRUCT'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Identifies the Standing Instruction database used *\r\n*****************************************************\r\n*/\r\nexport enum StandInstDbType {\r\n  Other = 0,\r\n  Dtcsid = 1,\r\n  ThomsonAlert = 2,\r\n  AGlobalCustodian = 3\r\n}\r\n\r\n/*\r\n*********************************\r\n* Identifies type of settlement *\r\n*********************************\r\n*/\r\nexport enum SettlDeliveryType {\r\n  Versus = 0,\r\n  Free = 1\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Identifies the type of Allocation linkage when AllocLinkID *\r\n* is used.                                                   *\r\n**************************************************************\r\n*/\r\nexport enum AllocLinkType {\r\n  FxNetting = 0,\r\n  FxSwap = 1\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Indicates whether an Option is for a put or call. *\r\n*****************************************************\r\n*/\r\nexport enum PutOrCall {\r\n  Put = 0,\r\n  Call = 1\r\n}\r\n\r\n/*\r\n********************\r\n* Used for options *\r\n********************\r\n*/\r\nexport enum CoveredOrUncovered {\r\n  Covered = 0,\r\n  Uncovered = 1\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Used for options when delivering the order to an execution   *\r\n* system/exchange to specify if the order is for a customer or *\r\n* the firm placing the order itself.                           *\r\n****************************************************************\r\n*/\r\nexport enum CustomerOrFirm {\r\n  Customer = 0,\r\n  Firm = 1\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicates whether or not details should be communicated to *\r\n* BrokerOfCredit (i.e. step-in broker).                      *\r\n**************************************************************\r\n*/\r\nexport enum NotifyBrokerOfCredit {\r\n  DetailsShouldNotBeCommunicated = 'N',\r\n  DetailsShouldBeCommunicated = 'Y'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Indicates how the receiver (i.e. third party) of Allocation *\r\n* message should handle/process the account details.          *\r\n***************************************************************\r\n*/\r\nexport enum AllocHandlInst {\r\n  Match = 1,\r\n  Forward = 2,\r\n  ForwardAndMatch = 3\r\n}\r\n\r\n/*\r\n**********************************************\r\n* Indicates the type of RoutingID specified. *\r\n**********************************************\r\n*/\r\nexport enum RoutingType {\r\n  TargetFirm = 1,\r\n  TargetList = 2,\r\n  BlockFirm = 3,\r\n  BlockList = 4\r\n}\r\n\r\n/*\r\n************************************************************\r\n* For Fixed Income. Identifies the benchmark (e.g. used in *\r\n* conjunction with the SpreadToBenchmark field).           *\r\n************************************************************\r\n*/\r\nexport enum Benchmark {\r\n  Curve = '1',\r\n  FiveYr = '2',\r\n  Old5 = '3',\r\n  TenYr = '4',\r\n  Old10 = '5',\r\n  ThirtyYr = '6',\r\n  Old30 = '7',\r\n  ThreeMolibor = '8',\r\n  SixMolibor = '9'\r\n}\r\n\r\n/*\r\n*****************************\r\n* Subscription Request Type *\r\n*****************************\r\n*/\r\nexport enum SubscriptionRequestType {\r\n  Snapshot = '0',\r\n  SnapshotAndUpdates = '1',\r\n  DisablePreviousSnapshot = '2'\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Specifies the type of Market Data update. *\r\n*********************************************\r\n*/\r\nexport enum MDUpdateType {\r\n  FullRefresh = 0,\r\n  IncrementalRefresh = 1\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Specifies whether or not book entries should be aggregated. *\r\n***************************************************************\r\n*/\r\nexport enum AggregatedBook {\r\n  BookEntriesToBeAggregated = 'Y',\r\n  BookEntriesShouldNotBeAggregated = 'N'\r\n}\r\n\r\n/*\r\n***************************\r\n* Type Market Data entry. *\r\n***************************\r\n*/\r\nexport enum MDEntryType {\r\n  Bid = '0',\r\n  Offer = '1',\r\n  Trade = '2',\r\n  IndexValue = '3',\r\n  OpeningPrice = '4',\r\n  ClosingPrice = '5',\r\n  SettlementPrice = '6',\r\n  TradingSessionHighPrice = '7',\r\n  TradingSessionLowPrice = '8',\r\n  TradingSessionVwapPrice = '9',\r\n  Imbalance = 'A'\r\n}\r\n\r\n/*\r\n****************************\r\n* Direction of the \"tick\". *\r\n****************************\r\n*/\r\nexport enum TickDirection {\r\n  PlusTick = '0',\r\n  ZeroPlusTick = '1',\r\n  MinusTick = '2',\r\n  ZeroMinusTick = '3'\r\n}\r\n\r\n/*\r\n**********************************************************\r\n* Space-delimited list of conditions describing a quote. *\r\n**********************************************************\r\n*/\r\nexport enum QuoteCondition {\r\n  Locked = 'E',\r\n  NonFirm = 'I',\r\n  FastTrading = 'H',\r\n  Crossed = 'F',\r\n  ConsolidatedBest = 'D',\r\n  ExchangeBest = 'C',\r\n  Closed = 'B',\r\n  Open = 'A',\r\n  Depth = 'G'\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Space-delimited list of conditions describing a trade *\r\n*********************************************************\r\n*/\r\nexport enum TradeCondition {\r\n  NextDayTrade = 'J',\r\n  Opened = 'K',\r\n  Seller = 'L',\r\n  AveragePriceTrade = 'B',\r\n  Sold = 'M',\r\n  Rule155Trade = 'H',\r\n  StoppedStock = 'N',\r\n  ImbalanceMoreBuyers = 'P',\r\n  ImbalanceMoreSellers = 'Q',\r\n  OpeningPrice = 'R',\r\n  SoldLast = 'I',\r\n  Cash = 'A',\r\n  CashTrade = 'C',\r\n  Opening = 'E',\r\n  IntradayTradeDetail = 'F',\r\n  Rule127Trade = 'G',\r\n  NextDay = 'D'\r\n}\r\n\r\n/*\r\n**************************************\r\n* Type of Market Data update action. *\r\n**************************************\r\n*/\r\nexport enum MDUpdateAction {\r\n  New = '0',\r\n  Change = '1',\r\n  Delete = '2'\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Reason for the rejection of a Market Data request. *\r\n******************************************************\r\n*/\r\nexport enum MDReqRejReason {\r\n  UnknownSymbol = '0',\r\n  DuplicateMdReqId = '1',\r\n  InsufficientBandwidth = '2',\r\n  InsufficientPermissions = '3',\r\n  UnsupportedSubscriptionRequestType = '4',\r\n  UnsupportedMarketDepth = '5',\r\n  UnsupportedMdUpdateType = '6',\r\n  UnsupportedAggregatedBook = '7',\r\n  UnsupportedMdEntryType = '8',\r\n  UnsupportedTradingSessionId = '9',\r\n  UnsupportedMdImplicitDelete = 'C',\r\n  UnsupportedOpenCloseSettleFlag = 'B',\r\n  UnsupportedScope = 'A'\r\n}\r\n\r\n/*\r\n************************\r\n* Reason for deletion. *\r\n************************\r\n*/\r\nexport enum DeleteReason {\r\n  Cancellation = '0',\r\n  Error = '1'\r\n}\r\n\r\n/*\r\n*********************************\r\n* Flag that identifies a price. *\r\n*********************************\r\n*/\r\nexport enum OpenCloseSettleFlag {\r\n  DailyOpen = '0',\r\n  SessionOpen = '1',\r\n  DeliverySettlementEntry = '2',\r\n  ExpectedEntry = '3',\r\n  EntryFromPreviousBusinessDay = '4'\r\n}\r\n\r\n/*\r\n*****************************************\r\n* Identifies a firm\u0019s financial status. *\r\n*****************************************\r\n*/\r\nexport enum FinancialStatus {\r\n  Bankrupt = '1',\r\n  PendingDelisting = '2'\r\n}\r\n\r\n/*\r\n********************************************\r\n* Identifies the type of Corporate Action. *\r\n********************************************\r\n*/\r\nexport enum CorporateAction {\r\n  ExDistribution = 'B',\r\n  ExInterest = 'E',\r\n  ExRights = 'C',\r\n  ExDividend = 'A',\r\n  New = 'D'\r\n}\r\n\r\n/*\r\n*******************************************************\r\n* Identifies the status of the quote acknowledgement. *\r\n*******************************************************\r\n*/\r\nexport enum QuoteAckStatus {\r\n  Accepted = 0,\r\n  CancelForSymbol = 1,\r\n  CanceledForSecurityType = 2,\r\n  CanceledForUnderlying = 3,\r\n  CanceledAll = 4,\r\n  Rejected = 5,\r\n  RemovedFromMarket = 6,\r\n  Expired = 7,\r\n  Query = 8,\r\n  QuoteNotFound = 9,\r\n  Pending = 10\r\n}\r\n\r\n/*\r\n****************************************\r\n* Identifies the type of quote cancel. *\r\n****************************************\r\n*/\r\nexport enum QuoteCancelType {\r\n  CancelForOneOrMoreSecurities = 1,\r\n  CancelForSecurityType = 2,\r\n  CancelForUnderlyingSecurity = 3,\r\n  CancelAllQuotes = 4\r\n}\r\n\r\n/*\r\n******************************\r\n* Reason Quote was rejected: *\r\n******************************\r\n*/\r\nexport enum QuoteRejectReason {\r\n  UnknownSymbol = 1,\r\n  Exchange = 2,\r\n  QuoteRequestExceedsLimit = 3,\r\n  TooLateToEnter = 4,\r\n  UnknownQuote = 5,\r\n  DuplicateQuote = 6,\r\n  InvalidBid = 7,\r\n  InvalidPrice = 8,\r\n  NotAuthorizedToQuoteSecurity = 9\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Level of Response requested from receiver of quote messages. *\r\n****************************************************************\r\n*/\r\nexport enum QuoteResponseLevel {\r\n  NoAcknowledgement = 0,\r\n  AcknowledgeOnlyNegativeOrErroneousQuotes = 1,\r\n  AcknowledgeEachQuoteMessage = 2\r\n}\r\n\r\n/*\r\n*******************************************************\r\n* Indicates the type of Quote Request being generated *\r\n*******************************************************\r\n*/\r\nexport enum QuoteRequestType {\r\n  Manual = 1,\r\n  Automatic = 2\r\n}\r\n\r\n/*\r\n****************************************\r\n* Type of Security Definition Request. *\r\n****************************************\r\n*/\r\nexport enum SecurityRequestType {\r\n  RequestSecurityIdentityAndSpecifications = 0,\r\n  RequestSecurityIdentityForSpecifications = 1,\r\n  RequestListSecurityTypes = 2,\r\n  RequestListSecurities = 3\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Type of Security Definition message response. *\r\n*************************************************\r\n*/\r\nexport enum SecurityResponseType {\r\n  AcceptAsIs = 1,\r\n  AcceptWithRevisions = 2,\r\n  ListOfSecurityTypesReturnedPerRequest = 3,\r\n  ListOfSecuritiesReturnedPerRequest = 4,\r\n  RejectSecurityProposal = 5,\r\n  CannotMatchSelectionCriteria = 6\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Indicates whether or not message is being sent as a result *\r\n* of a subscription request or not.                          *\r\n**************************************************************\r\n*/\r\nexport enum UnsolicitedIndicator {\r\n  MessageIsBeingSentUnsolicited = 'Y',\r\n  MessageIsBeingSentAsAResultOfAPriorRequest = 'N'\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Identifies the trading status applicable to the transaction. *\r\n****************************************************************\r\n*/\r\nexport enum SecurityTradingStatus {\r\n  OpeningDelay = 1,\r\n  TradingHalt = 2,\r\n  Resume = 3,\r\n  NoOpen = 4,\r\n  PriceIndication = 5,\r\n  TradingRangeIndication = 6,\r\n  MarketImbalanceBuy = 7,\r\n  MarketImbalanceSell = 8,\r\n  MarketOnCloseImbalanceBuy = 9,\r\n  MarketOnCloseImbalanceSell = 10,\r\n  NoMarketImbalance = 12,\r\n  NoMarketOnCloseImbalance = 13,\r\n  ItsPreOpening = 14,\r\n  NewPriceIndication = 15,\r\n  TradeDisseminationTime = 16,\r\n  ReadyToTrade = 17,\r\n  NotAvailableForTrading = 18,\r\n  NotTradedOnThisMarket = 19,\r\n  UnknownOrInvalid = 20,\r\n  PreOpen = 21,\r\n  OpeningRotation = 22,\r\n  FastMarket = 23\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Denotes the reason for the Opening Delay or Trading Halt. *\r\n*************************************************************\r\n*/\r\nexport enum HaltReason {\r\n  EquipmentChangeover = 'X',\r\n  AdditionalInformation = 'M',\r\n  OrderInflux = 'E',\r\n  NewsPending = 'P',\r\n  OrderImbalance = 'I',\r\n  NewsDissemination = 'D'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Indicates whether or not the halt was due to Common Stock *\r\n* trading being halted.                                     *\r\n*************************************************************\r\n*/\r\nexport enum InViewOfCommon {\r\n  HaltWasDueToCommonStockBeingHalted = 'Y',\r\n  HaltWasNotRelatedToAHaltOfTheCommonStock = 'N'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Indicates whether or not the halt was due to the Related *\r\n* Security being halted.                                   *\r\n************************************************************\r\n*/\r\nexport enum DueToRelated {\r\n  RelatedToSecurityHalt = 'Y',\r\n  NotRelatedToSecurityHalt = 'N'\r\n}\r\n\r\n/*\r\n**************************************\r\n* Identifies the type of adjustment. *\r\n**************************************\r\n*/\r\nexport enum Adjustment {\r\n  Cancel = 1,\r\n  Error = 2,\r\n  Correction = 3\r\n}\r\n\r\n/*\r\n*********************\r\n* Method of trading *\r\n*********************\r\n*/\r\nexport enum TradSesMethod {\r\n  Electronic = 1,\r\n  OpenOutcry = 2,\r\n  TwoParty = 3\r\n}\r\n\r\n/*\r\n************************\r\n* Trading Session Mode *\r\n************************\r\n*/\r\nexport enum TradSesMode {\r\n  Testing = 1,\r\n  Simulated = 2,\r\n  Production = 3\r\n}\r\n\r\n/*\r\n*********************************\r\n* State of the trading session. *\r\n*********************************\r\n*/\r\nexport enum TradSesStatus {\r\n  Unknown = 0,\r\n  Halted = 1,\r\n  Open = 2,\r\n  Closed = 3,\r\n  PreOpen = 4,\r\n  PreClose = 5,\r\n  RequestRejected = 6\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Type of message encoding (non-ASCII (non-English) *\r\n* characters) used in a message\u0019s \"Encoded\" fields. *\r\n*****************************************************\r\n*/\r\nexport enum MessageEncoding {\r\n  Utf8 = 'UTF-8',\r\n  Iso2022Jp = 'ISO-2022-JP',\r\n  Eucjp = 'EUC-JP',\r\n  ShiftJis = 'Shift_JIS'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Code to identify reason for a session-level Reject message. *\r\n***************************************************************\r\n*/\r\nexport enum SessionRejectReason {\r\n  InvalidTagNumber = 0,\r\n  RequiredTagMissing = 1,\r\n  TagNotDefinedForThisMessageType = 2,\r\n  UndefinedTag = 3,\r\n  TagSpecifiedWithoutAValue = 4,\r\n  ValueIsIncorrect = 5,\r\n  IncorrectDataFormatForValue = 6,\r\n  DecryptionProblem = 7,\r\n  SignatureProblem = 8,\r\n  CompIdProblem = 9,\r\n  SendingTimeAccuracyProblem = 10,\r\n  InvalidMsgType = 11,\r\n  XmlValidationError = 12,\r\n  TagAppearsMoreThanOnce = 13,\r\n  TagSpecifiedOutOfRequiredOrder = 14,\r\n  RepeatingGroupFieldsOutOfOrder = 15,\r\n  IncorrectNumInGroupCountForRepeatingGroup = 16,\r\n  Non = 17\r\n}\r\n\r\n/*\r\n********************************************\r\n* Identifies the Bid Request message type. *\r\n********************************************\r\n*/\r\nexport enum BidRequestTransType {\r\n  New = 'N',\r\n  Cancel = 'C'\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Indicates whether or not the order was solicited. *\r\n*****************************************************\r\n*/\r\nexport enum SolicitedFlag {\r\n  WasNotSolicited = 'N',\r\n  WasSolicited = 'Y'\r\n}\r\n\r\n/*\r\n************************************************************\r\n* Code to identify reason for an ExecutionRpt message sent *\r\n* with ExecType=Restated or used when communicating an     *\r\n* unsolicited cancel.                                      *\r\n************************************************************\r\n*/\r\nexport enum ExecRestatementReason {\r\n  GtCorporateAction = 0,\r\n  GtRenewal = 1,\r\n  VerbalChange = 2,\r\n  RepricingOfOrder = 3,\r\n  BrokerOption = 4,\r\n  PartialDeclineOfOrderQty = 5,\r\n  CancelOnTradingHalt = 6,\r\n  CancelOnSystemFailure = 7,\r\n  Market = 8\r\n}\r\n\r\n/*\r\n*********************************************************\r\n* Code to identify reason for a Business Message Reject *\r\n* message.                                              *\r\n*********************************************************\r\n*/\r\nexport enum BusinessRejectReason {\r\n  Other = 0,\r\n  UnknownId = 1,\r\n  UnknownSecurity = 2,\r\n  UnsupportedMessageType = 3,\r\n  ApplicationNotAvailable = 4,\r\n  ConditionallyRequiredFieldMissing = 5,\r\n  NotAuthorized = 6,\r\n  DeliverToFirmNotAvailableAtThisTime = 7\r\n}\r\n\r\n/*\r\n********************************************\r\n* Specifies the direction of the messsage. *\r\n********************************************\r\n*/\r\nexport enum MsgDirection {\r\n  Send = 'S',\r\n  Receive = 'R'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Code to identify the price a DiscretionOffset is related to *\r\n* and should be mathematically added to.                      *\r\n***************************************************************\r\n*/\r\nexport enum DiscretionInst {\r\n  RelatedToDisplayedPrice = '0',\r\n  RelatedToMarketPrice = '1',\r\n  RelatedToPrimaryPrice = '2',\r\n  RelatedToLocalPrimaryPrice = '3',\r\n  RelatedToMidpointPrice = '4',\r\n  RelatedToLastTradePrice = '5'\r\n}\r\n\r\n/*\r\n*********************************************\r\n* Code to identify the type of Bid Request. *\r\n*********************************************\r\n*/\r\nexport enum BidType {\r\n  NonDisclosed = 1,\r\n  Disclosed = 2,\r\n  NoBiddingProcess = 3\r\n}\r\n\r\n/*\r\n***********************************************\r\n* Code to identify the type of BidDescriptor. *\r\n***********************************************\r\n*/\r\nexport enum BidDescriptorType {\r\n  Sector = 1,\r\n  Country = 2,\r\n  Index = 3\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Code to identify which \"SideValue\" the value refers to.      *\r\n* SideValue1 and SideValue2 are used as opposed to Buy or Sell *\r\n* so that the basket can be quoted either way as Buy or Sell.  *\r\n****************************************************************\r\n*/\r\nexport enum SideValueInd {\r\n  SideValue1 = 1,\r\n  SideValue2 = 2\r\n}\r\n\r\n/*\r\n*****************************************************\r\n* Code to identify the type of liquidity indicator. *\r\n*****************************************************\r\n*/\r\nexport enum LiquidityIndType {\r\n  FiveDayMovingAverage = 1,\r\n  TwentyDayMovingAverage = 2,\r\n  NormalMarketSize = 3,\r\n  Other = 4\r\n}\r\n\r\n/*\r\n******************************************************\r\n* Indicates whether or not to exchange for phsyical. *\r\n******************************************************\r\n*/\r\nexport enum ExchangeForPhysical {\r\n  False = 'N',\r\n  True = 'Y'\r\n}\r\n\r\n/*\r\n***************************************************************\r\n* Code to identify the desired frequency of progress reports. *\r\n***************************************************************\r\n*/\r\nexport enum ProgRptReqs {\r\n  BuySideRequests = 1,\r\n  SellSideSends = 2,\r\n  RealTimeExecutionReports = 3\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Code to represent whether value is net (inclusive of tax) or *\r\n* gross.                                                       *\r\n****************************************************************\r\n*/\r\nexport enum IncTaxInd {\r\n  Net = 1,\r\n  Gross = 2\r\n}\r\n\r\n/*\r\n****************************************\r\n* Code to represent the type of trade. *\r\n****************************************\r\n*/\r\nexport enum TradeType {\r\n  VwapGuarantee = 'G',\r\n  Agency = 'A',\r\n  GuaranteedClose = 'J',\r\n  RiskTrade = 'R'\r\n}\r\n\r\n/*\r\n*******************************************\r\n* Code to represent the basis price type. *\r\n*******************************************\r\n*/\r\nexport enum BasisPxType {\r\n  ClosingPriceAtMorningSession = '2',\r\n  ClosingPrice = '3',\r\n  CurrentPrice = '4',\r\n  Sq = '5',\r\n  VwapThroughADay = '6',\r\n  VwapThroughAMorningSession = '7',\r\n  VwapThroughAnAfternoonSession = '8',\r\n  VwapThroughADayExcept = '9',\r\n  Open = 'D',\r\n  Others = 'Z',\r\n  Strike = 'C',\r\n  VwapThroughAnAfternoonSessionExcept = 'B',\r\n  VwapThroughAMorningSessionExcept = 'A'\r\n}\r\n\r\n/*\r\n*************************************\r\n* Code to represent the price type. *\r\n*************************************\r\n*/\r\nexport enum PriceType {\r\n  Percentage = 1,\r\n  PerUnit = 2,\r\n  FixedAmount = 3,\r\n  Discount = 4,\r\n  Premium = 5,\r\n  Spread = 6,\r\n  TedPrice = 7,\r\n  TedYield = 8\r\n}\r\n\r\n/*\r\n********************************************************\r\n* Code to identify whether to book out executions on a *\r\n* part-filled GT order on the day of execution or to   *\r\n* accumulate.                                          *\r\n********************************************************\r\n*/\r\nexport enum GTBookingInst {\r\n  BookOutAllTradesOnDayOfExecution = 0,\r\n  AccumulateUntilFilledOrExpired = 1,\r\n  AccumulateUntilVerballlyNotifiedOtherwise = 2\r\n}\r\n\r\n/*\r\n*************************************\r\n* Code to represent the price type. *\r\n*************************************\r\n*/\r\nexport enum ListStatusType {\r\n  Ack = 1,\r\n  Response = 2,\r\n  Timed = 3,\r\n  ExecStarted = 4,\r\n  AllDone = 5,\r\n  Alert = 6\r\n}\r\n\r\n/*\r\n****************************************************************\r\n* Code to represent whether value is net (inclusive of tax) or *\r\n* gross.                                                       *\r\n****************************************************************\r\n*/\r\nexport enum NetGrossInd {\r\n  Net = 1,\r\n  Gross = 2\r\n}\r\n\r\n/*\r\n*************************************************\r\n* Code to represent the status of a list order. *\r\n*************************************************\r\n*/\r\nexport enum ListOrderStatus {\r\n  InBiddingProcess = 1,\r\n  ReceivedForExecution = 2,\r\n  Executing = 3,\r\n  Cancelling = 4,\r\n  Alert = 5,\r\n  AllDone = 6,\r\n  Reject = 7\r\n}\r\n\r\n/*\r\n****************************************\r\n* Identifies the type of ListExecInst. *\r\n****************************************\r\n*/\r\nexport enum ListExecInstType {\r\n  Immediate = '1',\r\n  WaitForInstruction = '2',\r\n  SellDriven = '3',\r\n  BuyDrivenCashTopUp = '4',\r\n  BuyDrivenCashWithdraw = '5'\r\n}\r\n\r\n/*\r\n*************************************************************\r\n* Identifies the type of request that a Cancel Reject is in *\r\n* response to.                                              *\r\n*************************************************************\r\n*/\r\nexport enum CxlRejResponseTo {\r\n  OrderCancelRequest = '1',\r\n  OrderCancel = '2'\r\n}\r\n\r\n/*\r\n**************************************************************\r\n* Used to indicate what an Execution Report represents (e.g. *\r\n* used with multi-leg securiteis, such as option strategies, *\r\n* spreads, etc.).                                            *\r\n**************************************************************\r\n*/\r\nexport enum MultiLegReportingType {\r\n  SingleSecurity = '1',\r\n  IndividualLegOfAMultiLegSecurity = '2',\r\n  MultiLegSecurity = '3'\r\n}\r\n\r\n"]}